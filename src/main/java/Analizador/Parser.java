
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import Generador.html;
import com.hp.gagawa.java.Node;
import com.hp.gagawa.java.elements.Body;
import com.hp.gagawa.java.elements.Br;
import com.hp.gagawa.java.elements.Button;
import com.hp.gagawa.java.elements.Div;
import com.hp.gagawa.java.elements.H1;
import com.hp.gagawa.java.elements.Head;
import com.hp.gagawa.java.elements.Html;
import com.hp.gagawa.java.elements.Img;
import com.hp.gagawa.java.elements.Input;
import com.hp.gagawa.java.elements.Link;
import com.hp.gagawa.java.elements.P;
import com.hp.gagawa.java.elements.Span;
import com.hp.gagawa.java.elements.Textarea;
import com.hp.gagawa.java.elements.Title;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import Controladores.Tabla;
import POJOS.Variable;
import com.hp.gagawa.java.elements.Option;
import com.hp.gagawa.java.elements.Script;
import com.hp.gagawa.java.elements.Select;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\320\000\002\002\004\000\002\002\014\000\002\003" +
    "\005\000\002\003\005\000\002\006\011\000\002\005\011" +
    "\000\002\011\005\000\002\011\005\000\002\061\004\000" +
    "\002\061\003\000\002\064\004\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\012\016\000\002\127\010\000\002\126\003\000\002" +
    "\126\003\000\002\103\003\000\002\103\003\000\002\130" +
    "\002\000\002\130\004\000\002\066\002\000\002\066\003" +
    "\000\002\065\005\000\002\065\004\000\002\122\003\000" +
    "\002\122\003\000\002\122\003\000\002\122\003\000\002" +
    "\122\003\000\002\122\003\000\002\122\003\000\002\114" +
    "\010\000\002\067\002\000\002\067\003\000\002\070\005" +
    "\000\002\070\003\000\002\123\003\000\002\123\003\000" +
    "\002\123\003\000\002\123\003\000\002\123\003\000\002" +
    "\123\003\000\002\123\003\000\002\104\010\000\002\105" +
    "\010\000\002\004\005\000\002\004\005\000\002\071\002" +
    "\000\002\071\003\000\002\072\005\000\002\072\004\000" +
    "\002\073\002\000\002\073\003\000\002\075\005\000\002" +
    "\075\004\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\076\002\000\002\076\003\000\002" +
    "\077\005\000\002\077\004\000\002\133\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\133\003" +
    "\000\002\115\010\000\002\116\010\000\002\143\003\000" +
    "\002\143\003\000\002\117\003\000\002\117\003\000\002" +
    "\120\010\000\002\121\010\000\002\124\010\000\002\107" +
    "\010\000\002\106\010\000\002\110\010\000\002\111\010" +
    "\000\002\112\010\000\002\113\010\000\002\044\011\000" +
    "\002\053\004\000\002\052\005\000\002\045\011\000\002" +
    "\054\011\000\002\057\011\000\002\055\011\000\002\046" +
    "\010\000\002\051\005\000\002\047\005\000\002\101\002" +
    "\000\002\101\003\000\002\102\005\000\002\102\004\000" +
    "\002\141\003\000\002\141\003\000\002\141\003\000\002" +
    "\141\003\000\002\141\003\000\002\141\003\000\002\137" +
    "\010\000\002\140\010\000\002\050\011\000\002\062\004" +
    "\000\002\062\003\000\002\056\011\000\002\016\004\000" +
    "\002\016\003\000\002\010\010\000\002\010\010\000\002" +
    "\125\003\000\002\125\003\000\002\013\004\000\002\013" +
    "\003\000\002\014\004\000\002\014\003\000\002\015\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\024\012\000\002\030\012\000\002\031\004\000\002\025" +
    "\013\000\002\032\005\000\002\032\006\000\002\026\010" +
    "\000\002\017\011\000\002\017\003\000\002\027\007\000" +
    "\002\074\005\000\002\074\003\000\002\134\003\000\002" +
    "\134\005\000\002\135\003\000\002\135\003\000\002\135" +
    "\003\000\002\135\004\000\002\023\006\000\002\023\005" +
    "\000\002\021\007\000\002\022\006\000\002\040\002\000" +
    "\002\040\004\000\002\060\003\000\002\060\006\000\002" +
    "\060\006\000\002\060\006\000\002\060\006\000\002\060" +
    "\006\000\002\060\005\000\002\060\005\000\002\144\003" +
    "\000\002\144\005\000\002\142\003\000\002\142\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\004\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\004\000\002\042\003\000\002\042" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\100\005\000\002\100\003\000\002\136\002\000\002" +
    "\136\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f5\000\004\056\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\051\010\001\002\000\006\033\011\034\014\001" +
    "\002\000\004\140\u01f3\001\002\000\004\051\u01f1\001\002" +
    "\000\004\055\025\001\002\000\004\140\020\001\002\000" +
    "\004\051\016\001\002\000\004\034\014\001\002\000\004" +
    "\055\uffc9\001\002\000\004\141\021\001\002\000\004\105" +
    "\022\001\002\000\004\141\023\001\002\000\004\052\024" +
    "\001\002\000\006\051\uffa4\055\uffa4\001\002\000\004\056" +
    "\026\001\002\000\006\005\033\010\031\001\002\000\004" +
    "\056\u01ef\001\002\000\004\056\u01ed\001\002\000\006\051" +
    "\100\055\uffe5\001\002\000\004\054\074\001\002\000\004" +
    "\055\034\001\002\000\004\056\035\001\002\000\006\006" +
    "\041\007\036\001\002\000\004\051\061\001\002\000\004" +
    "\054\056\001\002\000\004\056\054\001\002\000\004\055" +
    "\045\001\002\000\004\056\043\001\002\000\004\007\036" +
    "\001\002\000\004\054\ufffa\001\002\000\006\105\046\143" +
    "\047\001\002\000\004\054\uffe8\001\002\000\004\054\uffe9" +
    "\001\002\000\004\054\051\001\002\000\004\006\052\001" +
    "\002\000\004\055\053\001\002\000\006\054\uffea\056\uffea" +
    "\001\002\000\004\006\041\001\002\000\004\054\ufffb\001" +
    "\002\000\004\005\057\001\002\000\004\055\060\001\002" +
    "\000\006\054\ufffc\056\ufffc\001\002\000\004\024\062\001" +
    "\002\000\004\140\063\001\002\000\004\141\064\001\002" +
    "\000\004\137\065\001\002\000\004\141\066\001\002\000" +
    "\004\052\067\001\002\000\004\055\070\001\002\000\004" +
    "\054\071\001\002\000\004\007\072\001\002\000\004\055" +
    "\073\001\002\000\006\054\uffeb\056\uffeb\001\002\000\004" +
    "\004\075\001\002\000\004\055\076\001\002\000\004\002" +
    "\000\001\002\000\004\055\112\001\002\000\004\025\102" +
    "\001\002\000\004\055\uffe4\001\002\000\004\140\103\001" +
    "\002\000\004\141\104\001\002\000\006\125\107\131\105" +
    "\001\002\000\004\141\uffe7\001\002\000\004\141\110\001" +
    "\002\000\004\141\uffe6\001\002\000\004\052\111\001\002" +
    "\000\006\051\uffcc\055\uffcc\001\002\000\004\056\115\001" +
    "\002\000\006\054\u01ea\056\115\001\002\000\006\054\ufff8" +
    "\056\ufff8\001\002\000\030\011\122\012\117\013\124\014" +
    "\123\016\136\017\120\020\137\021\121\022\130\023\125" +
    "\142\127\001\002\000\010\054\uffed\056\uffed\150\uffed\001" +
    "\002\000\006\051\u01d9\055\uffc4\001\002\000\006\051\u01b1" +
    "\055\uffc8\001\002\000\006\051\u0198\055\uffe3\001\002\000" +
    "\006\051\226\055\uffb6\001\002\000\006\051\226\055\uffb6" +
    "\001\002\000\006\051\u016c\055\uff94\001\002\000\006\051" +
    "\226\055\uffb6\001\002\000\010\054\ufff6\056\ufff6\150\ufff6" +
    "\001\002\000\004\055\250\001\002\000\006\051\226\055" +
    "\uffb6\001\002\000\010\054\ufff2\056\ufff2\150\ufff2\001\002" +
    "\000\010\054\uffef\056\uffef\150\uffef\001\002\000\010\054" +
    "\ufff1\056\ufff1\150\ufff1\001\002\000\010\054\uffec\056\uffec" +
    "\150\uffec\001\002\000\010\054\ufff0\056\ufff0\150\ufff0\001" +
    "\002\000\022\025\102\026\146\027\155\030\162\031\150" +
    "\033\011\037\163\055\uffd7\001\002\000\004\055\145\001" +
    "\002\000\010\054\ufff4\056\ufff4\150\ufff4\001\002\000\010" +
    "\054\ufff5\056\ufff5\150\ufff5\001\002\000\010\054\ufff3\056" +
    "\ufff3\150\ufff3\001\002\000\006\054\ufff7\056\ufff7\001\002" +
    "\000\010\054\uffee\056\uffee\150\uffee\001\002\000\010\054" +
    "\uff9d\056\uff9d\150\uff9d\001\002\000\004\140\221\001\002" +
    "\000\006\051\uffd0\055\uffd0\001\002\000\004\140\214\001" +
    "\002\000\006\051\uffd1\055\uffd1\001\002\000\006\051\uffd4" +
    "\055\uffd4\001\002\000\006\051\uffce\055\uffce\001\002\000" +
    "\006\051\uffd2\055\uffd2\001\002\000\004\140\207\001\002" +
    "\000\006\051\uffcd\055\uffcd\001\002\000\006\051\uffcf\055" +
    "\uffcf\001\002\000\006\051\205\055\uffd6\001\002\000\006" +
    "\051\uffd3\055\uffd3\001\002\000\004\140\200\001\002\000" +
    "\004\140\173\001\002\000\004\055\165\001\002\000\004" +
    "\056\115\001\002\000\006\054\170\056\115\001\002\000" +
    "\006\054\ufff9\056\ufff9\001\002\000\004\016\171\001\002" +
    "\000\004\055\172\001\002\000\010\054\uff9b\056\uff9b\150" +
    "\uff9b\001\002\000\004\141\174\001\002\000\004\135\175" +
    "\001\002\000\004\141\176\001\002\000\004\052\177\001" +
    "\002\000\006\051\uffcb\055\uffcb\001\002\000\004\141\201" +
    "\001\002\000\004\132\202\001\002\000\004\141\203\001" +
    "\002\000\004\052\204\001\002\000\006\051\uffa1\055\uffa1" +
    "\001\002\000\020\025\102\026\146\027\155\030\162\031" +
    "\150\033\011\037\163\001\002\000\006\051\uffd5\055\uffd5" +
    "\001\002\000\004\141\210\001\002\000\004\127\211\001" +
    "\002\000\004\141\212\001\002\000\004\052\213\001\002" +
    "\000\006\051\uffa2\055\uffa2\001\002\000\004\141\215\001" +
    "\002\000\004\133\216\001\002\000\004\141\217\001\002" +
    "\000\004\052\220\001\002\000\006\051\uffa0\055\uffa0\001" +
    "\002\000\004\141\222\001\002\000\006\125\107\131\105" +
    "\001\002\000\004\141\224\001\002\000\004\052\225\001" +
    "\002\000\006\051\uff9f\055\uff9f\001\002\000\014\026\146" +
    "\027\155\030\162\031\150\033\011\001\002\000\006\051" +
    "\240\055\uffb5\001\002\000\004\055\231\001\002\000\006" +
    "\105\233\126\232\001\002\000\006\054\uff7f\141\uff7f\001" +
    "\002\000\006\054\uff80\141\uff80\001\002\000\004\054\235" +
    "\001\002\000\004\022\236\001\002\000\004\055\237\001" +
    "\002\000\010\054\uff9e\056\uff9e\150\uff9e\001\002\000\014" +
    "\026\146\027\155\030\162\031\150\033\011\001\002\000" +
    "\006\051\uffaf\055\uffaf\001\002\000\006\051\uffb0\055\uffb0" +
    "\001\002\000\006\051\uffae\055\uffae\001\002\000\006\051" +
    "\uffb1\055\uffb1\001\002\000\006\051\uffb2\055\uffb2\001\002" +
    "\000\006\051\uffb4\055\uffb4\001\002\000\006\051\uffb3\055" +
    "\uffb3\001\002\000\006\143\251\144\253\001\002\000\004" +
    "\045\u015d\001\002\000\010\054\uff83\143\uff83\144\uff83\001" +
    "\002\000\004\045\261\001\002\000\010\054\256\143\251" +
    "\144\253\001\002\000\010\054\uff84\143\uff84\144\uff84\001" +
    "\002\000\004\142\257\001\002\000\004\055\260\001\002" +
    "\000\010\054\uff97\056\uff97\150\uff97\001\002\000\004\046" +
    "\262\001\002\000\004\051\263\001\002\000\026\103\265" +
    "\107\306\110\267\115\272\117\305\121\270\124\277\143" +
    "\303\146\266\151\302\001\002\000\034\052\uff74\103\uff74" +
    "\107\uff74\110\uff74\114\uff74\115\uff74\116\uff74\117\uff74\121" +
    "\uff74\124\uff74\143\uff74\146\uff74\151\uff74\001\002\000\006" +
    "\053\uff51\143\uff51\001\002\000\006\053\uff50\143\uff50\001" +
    "\002\000\006\053\uff4e\143\uff4e\001\002\000\004\045\u0158" +
    "\001\002\000\032\052\uff7d\103\uff7d\107\uff7d\110\uff7d\114" +
    "\uff7d\115\uff7d\117\uff7d\121\uff7d\124\uff7d\143\uff7d\146\uff7d" +
    "\151\uff7d\001\002\000\004\045\u0147\001\002\000\006\053" +
    "\u013d\143\uff33\001\002\000\034\052\uff78\103\uff78\107\uff78" +
    "\110\uff78\114\uff78\115\uff78\116\uff78\117\uff78\121\uff78\124" +
    "\uff78\143\uff78\146\uff78\151\uff78\001\002\000\034\052\uff76" +
    "\103\uff76\107\uff76\110\uff76\114\uff76\115\uff76\116\uff76\117" +
    "\uff76\121\uff76\124\uff76\143\uff76\146\uff76\151\uff76\001\002" +
    "\000\034\052\uff79\103\uff79\107\uff79\110\uff79\114\uff79\115" +
    "\uff79\116\uff79\117\uff79\121\uff79\124\uff79\143\uff79\146\uff79" +
    "\151\uff79\001\002\000\004\045\u012d\001\002\000\034\052" +
    "\uff77\103\uff77\107\uff77\110\uff77\114\uff77\115\uff77\116\uff77" +
    "\117\uff77\121\uff77\124\uff77\143\uff77\146\uff77\151\uff77\001" +
    "\002\000\034\052\uff75\103\uff75\107\uff75\110\uff75\114\uff75" +
    "\115\uff75\116\uff75\117\uff75\121\uff75\124\uff75\143\uff75\146" +
    "\uff75\151\uff75\001\002\000\006\053\uff4d\143\uff4d\001\002" +
    "\000\004\140\370\001\002\000\030\052\367\103\265\107" +
    "\306\110\267\115\272\117\305\121\270\124\277\143\303" +
    "\146\266\151\302\001\002\000\004\045\307\001\002\000" +
    "\006\053\uff4f\143\uff4f\001\002\000\006\103\312\143\310" +
    "\001\002\000\004\140\365\001\002\000\004\046\316\001" +
    "\002\000\004\143\313\001\002\000\004\140\314\001\002" +
    "\000\004\126\315\001\002\000\004\046\uff6e\001\002\000" +
    "\004\120\317\001\002\000\004\045\320\001\002\000\022" +
    "\045\325\067\322\104\324\106\321\126\326\141\327\143" +
    "\332\150\323\001\002\000\036\046\uff39\055\uff39\056\uff39" +
    "\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\066" +
    "\uff39\067\uff39\070\uff39\071\uff39\112\uff39\001\002\000\022" +
    "\045\325\067\322\104\324\106\321\126\326\141\327\143" +
    "\332\150\323\001\002\000\004\155\362\001\002\000\036" +
    "\046\uff37\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37\062" +
    "\uff37\063\uff37\064\uff37\066\uff37\067\uff37\070\uff37\071\uff37" +
    "\112\uff37\001\002\000\022\045\325\067\322\104\324\106" +
    "\321\126\326\141\327\143\332\150\323\001\002\000\036" +
    "\046\uff38\055\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062" +
    "\uff38\063\uff38\064\uff38\066\uff38\067\uff38\070\uff38\071\uff38" +
    "\112\uff38\001\002\000\004\105\356\001\002\000\036\046" +
    "\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d" +
    "\063\uff3d\064\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\112" +
    "\uff3d\001\002\000\014\046\335\066\333\067\336\070\337" +
    "\071\334\001\002\000\036\046\uff36\055\uff36\056\uff36\057" +
    "\uff36\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\066\uff36" +
    "\067\uff36\070\uff36\071\uff36\112\uff36\001\002\000\022\045" +
    "\325\067\322\104\324\106\321\126\326\141\327\143\332" +
    "\150\323\001\002\000\022\045\325\067\322\104\324\106" +
    "\321\126\326\141\327\143\332\150\323\001\002\000\030" +
    "\103\265\107\306\110\267\113\342\115\272\117\305\121" +
    "\270\124\277\143\303\146\266\151\302\001\002\000\022" +
    "\045\325\067\322\104\324\106\321\126\326\141\327\143" +
    "\332\150\323\001\002\000\022\045\325\067\322\104\324" +
    "\106\321\126\326\141\327\143\332\150\323\001\002\000" +
    "\036\046\uff40\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\066\uff40\067\uff40\070\uff40\071" +
    "\uff40\112\uff40\001\002\000\036\046\uff41\055\uff41\056\uff41" +
    "\057\uff41\060\uff41\061\uff41\062\uff41\063\uff41\064\uff41\066" +
    "\uff41\067\uff41\070\337\071\334\112\uff41\001\002\000\004" +
    "\047\345\001\002\000\034\052\uff6b\103\uff6b\107\uff6b\110" +
    "\uff6b\114\uff6b\115\uff6b\116\uff6b\117\uff6b\121\uff6b\124\uff6b" +
    "\143\uff6b\146\uff6b\151\uff6b\001\002\000\034\052\uff70\103" +
    "\uff70\107\uff70\110\uff70\114\uff70\115\uff70\116\uff70\117\uff70" +
    "\121\uff70\124\uff70\143\uff70\146\uff70\151\uff70\001\002\000" +
    "\004\114\346\001\002\000\026\103\265\107\306\110\267" +
    "\115\272\117\305\121\270\124\277\143\303\146\266\151" +
    "\302\001\002\000\030\103\265\107\306\110\267\114\351" +
    "\115\272\117\305\121\270\124\277\143\303\146\266\151" +
    "\302\001\002\000\032\052\uff7e\103\uff7e\107\uff7e\110\uff7e" +
    "\114\uff7e\115\uff7e\117\uff7e\121\uff7e\124\uff7e\143\uff7e\146" +
    "\uff7e\151\uff7e\001\002\000\004\050\352\001\002\000\004" +
    "\154\353\001\002\000\034\052\uff6c\103\uff6c\107\uff6c\110" +
    "\uff6c\114\uff6c\115\uff6c\116\uff6c\117\uff6c\121\uff6c\124\uff6c" +
    "\143\uff6c\146\uff6c\151\uff6c\001\002\000\036\046\uff3f\055" +
    "\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f" +
    "\064\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\112\uff3f\001" +
    "\002\000\036\046\uff42\055\uff42\056\uff42\057\uff42\060\uff42" +
    "\061\uff42\062\uff42\063\uff42\064\uff42\066\uff42\067\uff42\070" +
    "\337\071\334\112\uff42\001\002\000\004\141\357\001\002" +
    "\000\036\046\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061" +
    "\uff3b\062\uff3b\063\uff3b\064\uff3b\066\uff3b\067\uff3b\070\uff3b" +
    "\071\uff3b\112\uff3b\001\002\000\014\046\361\066\333\067" +
    "\336\070\337\071\334\001\002\000\036\046\uff3c\055\uff3c" +
    "\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064" +
    "\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c\112\uff3c\001\002" +
    "\000\004\150\363\001\002\000\036\046\uff3a\055\uff3a\056" +
    "\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a" +
    "\066\uff3a\067\uff3a\070\uff3a\071\uff3a\112\uff3a\001\002\000" +
    "\036\046\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e" +
    "\062\uff3e\063\uff3e\064\uff3e\066\uff3e\067\uff3e\070\uff3e\071" +
    "\uff3e\112\uff3e\001\002\000\004\126\366\001\002\000\004" +
    "\046\uff6f\001\002\000\010\054\uff82\143\uff82\144\uff82\001" +
    "\002\000\042\045\325\065\375\067\322\072\u0100\073\373" +
    "\074\371\075\372\076\u0103\077\377\100\u0101\104\324\106" +
    "\321\126\326\141\327\143\332\150\323\001\002\000\004" +
    "\045\u012a\001\002\000\004\045\u0127\001\002\000\004\045" +
    "\u0124\001\002\000\036\046\uff43\055\uff43\056\uff43\057\uff43" +
    "\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43\066\333\067" +
    "\336\070\337\071\334\112\uff43\001\002\000\024\045\325" +
    "\065\375\067\322\104\324\106\321\126\326\141\327\143" +
    "\332\150\323\001\002\000\004\112\u0122\001\002\000\004" +
    "\045\u0120\001\002\000\004\045\u011d\001\002\000\004\045" +
    "\u011b\001\002\000\024\055\u010c\056\u0110\057\u0112\060\u010b" +
    "\061\u010d\062\u010e\063\u0111\064\u010f\112\uff5b\001\002\000" +
    "\004\045\u0104\001\002\000\006\141\u0107\143\u0105\001\002" +
    "\000\004\046\uff53\001\002\000\004\046\u010a\001\002\000" +
    "\004\105\u0108\001\002\000\004\141\u0109\001\002\000\004" +
    "\046\uff52\001\002\000\004\112\uff56\001\002\000\024\045" +
    "\325\065\375\067\322\104\324\106\321\126\326\141\327" +
    "\143\332\150\323\001\002\000\024\045\325\065\375\067" +
    "\322\104\324\106\321\126\326\141\327\143\332\150\323" +
    "\001\002\000\024\045\325\065\375\067\322\104\324\106" +
    "\321\126\326\141\327\143\332\150\323\001\002\000\024" +
    "\045\325\065\375\067\322\104\324\106\321\126\326\141" +
    "\327\143\332\150\323\001\002\000\024\045\325\065\375" +
    "\067\322\104\324\106\321\126\326\141\327\143\332\150" +
    "\323\001\002\000\024\045\325\065\375\067\322\104\324" +
    "\106\321\126\326\141\327\143\332\150\323\001\002\000" +
    "\024\045\325\065\375\067\322\104\324\106\321\126\326" +
    "\141\327\143\332\150\323\001\002\000\024\045\325\065" +
    "\375\067\322\104\324\106\321\126\326\141\327\143\332" +
    "\150\323\001\002\000\026\046\uff49\055\uff49\056\uff49\057" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\112\uff49" +
    "\001\002\000\026\046\uff4c\055\u010c\056\u0110\057\u0112\060" +
    "\u010b\061\u010d\062\u010e\063\uff4c\064\u010f\112\uff4c\001\002" +
    "\000\026\046\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061" +
    "\uff45\062\uff45\063\uff45\064\uff45\112\uff45\001\002\000\026" +
    "\046\uff4b\055\u010c\056\u0110\057\u0112\060\u010b\061\u010d\062" +
    "\u010e\063\uff4b\064\uff4b\112\uff4b\001\002\000\026\046\uff46" +
    "\055\uff46\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063" +
    "\uff46\064\uff46\112\uff46\001\002\000\026\046\uff47\055\uff47" +
    "\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47\063\uff47\064" +
    "\uff47\112\uff47\001\002\000\026\046\uff44\055\uff44\056\uff44" +
    "\057\uff44\060\uff44\061\uff44\062\uff44\063\uff44\064\uff44\112" +
    "\uff44\001\002\000\026\046\uff48\055\uff48\056\uff48\057\uff48" +
    "\060\uff48\061\uff48\062\uff48\063\uff48\064\uff48\112\uff48\001" +
    "\002\000\004\046\u011c\001\002\000\004\112\uff54\001\002" +
    "\000\006\141\u0107\143\u0105\001\002\000\004\046\u011f\001" +
    "\002\000\004\112\uff5a\001\002\000\004\046\u0121\001\002" +
    "\000\004\112\uff55\001\002\000\034\052\uff5e\103\uff5e\107" +
    "\uff5e\110\uff5e\114\uff5e\115\uff5e\116\uff5e\117\uff5e\121\uff5e" +
    "\124\uff5e\143\uff5e\146\uff5e\151\uff5e\001\002\000\026\046" +
    "\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a" +
    "\063\uff4a\064\uff4a\112\uff4a\001\002\000\006\141\u0107\143" +
    "\u0105\001\002\000\004\046\u0126\001\002\000\004\112\uff59" +
    "\001\002\000\006\141\u0107\143\u0105\001\002\000\004\046" +
    "\u0129\001\002\000\004\112\uff57\001\002\000\006\141\u0107" +
    "\143\u0105\001\002\000\004\046\u012c\001\002\000\004\112" +
    "\uff58\001\002\000\006\143\u012e\150\u0131\001\002\000\006" +
    "\046\uff67\147\uff67\001\002\000\006\046\uff68\147\uff68\001" +
    "\002\000\006\046\u013a\147\u0139\001\002\000\012\056\u0133" +
    "\105\u0132\143\u0134\155\u0136\001\002\000\004\150\uff65\001" +
    "\002\000\030\011\122\012\117\013\124\014\123\016\136" +
    "\017\120\020\137\021\121\022\130\023\125\142\127\001" +
    "\002\000\004\150\uff63\001\002\000\004\150\u0137\001\002" +
    "\000\004\150\uff64\001\002\000\006\046\uff66\147\uff66\001" +
    "\002\000\004\150\uff62\001\002\000\006\143\u012e\150\u0131" +
    "\001\002\000\004\112\u013b\001\002\000\034\052\uff6a\103" +
    "\uff6a\107\uff6a\110\uff6a\114\uff6a\115\uff6a\116\uff6a\117\uff6a" +
    "\121\uff6a\124\uff6a\143\uff6a\146\uff6a\151\uff6a\001\002\000" +
    "\006\046\uff69\147\uff69\001\002\000\004\143\uff32\001\002" +
    "\000\004\143\u0140\001\002\000\010\112\uff5d\140\u0143\147" +
    "\u0142\001\002\000\010\112\uff34\140\uff34\147\uff34\001\002" +
    "\000\004\112\u0146\001\002\000\004\143\u0145\001\002\000" +
    "\042\045\325\065\375\067\322\072\u0100\073\373\074\371" +
    "\075\372\076\u0103\077\377\100\u0101\104\324\106\321\126" +
    "\326\141\327\143\332\150\323\001\002\000\004\112\uff5c" +
    "\001\002\000\010\112\uff35\140\uff35\147\uff35\001\002\000" +
    "\034\052\uff5f\103\uff5f\107\uff5f\110\uff5f\114\uff5f\115\uff5f" +
    "\116\uff5f\117\uff5f\121\uff5f\124\uff5f\143\uff5f\146\uff5f\151" +
    "\uff5f\001\002\000\024\045\325\065\375\067\322\104\324" +
    "\106\321\126\326\141\327\143\332\150\323\001\002\000" +
    "\024\046\u0149\055\u010c\056\u0110\057\u0112\060\u010b\061\u010d" +
    "\062\u010e\063\u0111\064\u010f\001\002\000\004\123\u014a\001" +
    "\002\000\030\103\265\107\306\110\267\113\342\115\272" +
    "\117\305\121\270\124\277\143\303\146\266\151\302\001" +
    "\002\000\004\116\u014c\001\002\000\004\115\u0151\001\002" +
    "\000\004\116\u014e\001\002\000\030\103\265\107\306\110" +
    "\267\113\342\115\272\117\305\121\270\124\277\143\303" +
    "\146\266\151\302\001\002\000\034\052\uff73\103\uff73\107" +
    "\uff73\110\uff73\114\uff73\115\uff73\116\uff73\117\uff73\121\uff73" +
    "\124\uff73\143\uff73\146\uff73\151\uff73\001\002\000\034\052" +
    "\uff71\103\uff71\107\uff71\110\uff71\114\uff71\115\uff71\116\uff71" +
    "\117\uff71\121\uff71\124\uff71\143\uff71\146\uff71\151\uff71\001" +
    "\002\000\004\045\u0152\001\002\000\024\045\325\065\375" +
    "\067\322\104\324\106\321\126\326\141\327\143\332\150" +
    "\323\001\002\000\024\046\u0154\055\u010c\056\u0110\057\u0112" +
    "\060\u010b\061\u010d\062\u010e\063\u0111\064\u010f\001\002\000" +
    "\004\123\u0155\001\002\000\030\103\265\107\306\110\267" +
    "\113\342\115\272\117\305\121\270\124\277\143\303\146" +
    "\266\151\302\001\002\000\004\116\u014c\001\002\000\004" +
    "\116\uff72\001\002\000\024\045\325\065\375\067\322\104" +
    "\324\106\321\126\326\141\327\143\332\150\323\001\002" +
    "\000\024\046\u015a\055\u010c\056\u0110\057\u0112\060\u010b\061" +
    "\u010d\062\u010e\063\u0111\064\u010f\001\002\000\004\122\u015b" +
    "\001\002\000\030\103\265\107\306\110\267\113\342\115" +
    "\272\117\305\121\270\124\277\143\303\146\266\151\302" +
    "\001\002\000\034\052\uff6d\103\uff6d\107\uff6d\110\uff6d\114" +
    "\uff6d\115\uff6d\116\uff6d\117\uff6d\121\uff6d\124\uff6d\143\uff6d" +
    "\146\uff6d\151\uff6d\001\002\000\004\046\u015e\001\002\000" +
    "\004\051\u015f\001\002\000\026\103\265\107\306\110\267" +
    "\115\272\117\305\121\270\124\277\143\303\146\266\151" +
    "\302\001\002\000\030\052\uff7b\103\uff7b\107\uff7b\110\uff7b" +
    "\115\uff7b\117\uff7b\121\uff7b\124\uff7b\143\uff7b\146\uff7b\151" +
    "\uff7b\001\002\000\030\052\u0162\103\265\107\306\110\267" +
    "\115\272\117\305\121\270\124\277\143\303\146\266\151" +
    "\302\001\002\000\010\054\uff81\143\uff81\144\uff81\001\002" +
    "\000\030\052\uff7c\103\uff7c\107\uff7c\110\uff7c\115\uff7c\117" +
    "\uff7c\121\uff7c\124\uff7c\143\uff7c\146\uff7c\151\uff7c\001\002" +
    "\000\004\055\u0165\001\002\000\006\105\233\126\232\001" +
    "\002\000\004\054\u0167\001\002\000\004\023\u0168\001\002" +
    "\000\004\055\u0169\001\002\000\010\054\uff99\056\uff99\150" +
    "\uff99\001\002\000\006\051\u0181\055\uff93\001\002\000\004" +
    "\055\u0180\001\002\000\016\027\155\030\162\031\150\033" +
    "\011\035\u0171\036\u0174\001\002\000\006\051\uff8d\055\uff8d" +
    "\001\002\000\006\051\uff8e\055\uff8e\001\002\000\006\051" +
    "\uff8f\055\uff8f\001\002\000\006\051\uff91\055\uff91\001\002" +
    "\000\004\140\u017b\001\002\000\006\051\uff8c\055\uff8c\001" +
    "\002\000\006\051\uff90\055\uff90\001\002\000\004\140\u0176" +
    "\001\002\000\006\051\uff8b\055\uff8b\001\002\000\004\141" +
    "\u0177\001\002\000\004\126\u0178\001\002\000\004\141\u0179" +
    "\001\002\000\004\052\u017a\001\002\000\006\051\uff8a\055" +
    "\uff8a\001\002\000\004\141\u017c\001\002\000\004\126\u017d" +
    "\001\002\000\004\141\u017e\001\002\000\004\052\u017f\001" +
    "\002\000\006\051\uff89\055\uff89\001\002\000\010\054\uff95" +
    "\056\uff95\150\uff95\001\002\000\016\027\155\030\162\031" +
    "\150\033\011\035\u0171\036\u0174\001\002\000\006\051\uff92" +
    "\055\uff92\001\002\000\004\055\u0184\001\002\000\004\056" +
    "\u0186\001\002\000\006\054\uff86\056\uff86\001\002\000\004" +
    "\015\u018c\001\002\000\006\054\u0189\056\u0186\001\002\000" +
    "\006\054\uff87\056\uff87\001\002\000\004\014\u018a\001\002" +
    "\000\004\055\u018b\001\002\000\010\054\uff88\056\uff88\150" +
    "\uff88\001\002\000\004\055\u018d\001\002\000\006\105\233" +
    "\126\232\001\002\000\004\054\u018f\001\002\000\004\015" +
    "\u0190\001\002\000\004\055\u0191\001\002\000\006\054\uff85" +
    "\056\uff85\001\002\000\004\055\u0193\001\002\000\006\105" +
    "\233\126\232\001\002\000\004\054\u0195\001\002\000\004" +
    "\011\u0196\001\002\000\004\055\u0197\001\002\000\010\054" +
    "\uff98\056\uff98\150\uff98\001\002\000\020\025\102\026\146" +
    "\027\155\030\162\031\150\033\011\044\u019c\001\002\000" +
    "\004\055\u01aa\001\002\000\006\051\u019b\055\uffe2\001\002" +
    "\000\020\025\102\026\146\027\155\030\162\031\150\033" +
    "\011\044\u019c\001\002\000\004\140\u01a5\001\002\000\006" +
    "\051\uffdc\055\uffdc\001\002\000\006\051\uffe1\055\uffe1\001" +
    "\002\000\006\051\uffdd\055\uffdd\001\002\000\006\051\uffdb" +
    "\055\uffdb\001\002\000\006\051\uffde\055\uffde\001\002\000" +
    "\006\051\uffda\055\uffda\001\002\000\006\051\uffd9\055\uffd9" +
    "\001\002\000\006\051\uffdf\055\uffdf\001\002\000\004\141" +
    "\u01a6\001\002\000\004\136\u01a7\001\002\000\004\141\u01a8" +
    "\001\002\000\004\052\u01a9\001\002\000\006\051\uffd8\055" +
    "\uffd8\001\002\000\006\105\233\126\232\001\002\000\004" +
    "\054\u01ac\001\002\000\004\021\u01ad\001\002\000\004\055" +
    "\u01ae\001\002\000\010\054\uff9a\056\uff9a\150\uff9a\001\002" +
    "\000\006\051\uffe0\055\uffe0\001\002\000\006\051\u01d6\055" +
    "\uffc7\001\002\000\014\033\011\040\u01bb\041\u01bc\042\u01ba" +
    "\043\u01b4\001\002\000\004\055\u01b3\001\002\000\010\054" +
    "\uff9c\056\uff9c\150\uff9c\001\002\000\004\140\u01d1\001\002" +
    "\000\006\051\uffbb\055\uffbb\001\002\000\006\051\uffb7\055" +
    "\uffb7\001\002\000\006\051\uffba\055\uffba\001\002\000\006" +
    "\051\uffb8\055\uffb8\001\002\000\006\051\uffc5\055\uffc5\001" +
    "\002\000\004\140\u01cc\001\002\000\004\140\u01c5\001\002" +
    "\000\004\140\u01be\001\002\000\006\051\uffb9\055\uffb9\001" +
    "\002\000\004\141\u01bf\001\002\000\006\127\u01c2\130\u01c0" +
    "\001\002\000\004\141\uffa8\001\002\000\004\141\u01c3\001" +
    "\002\000\004\141\uffa9\001\002\000\004\052\u01c4\001\002" +
    "\000\006\051\uffa7\055\uffa7\001\002\000\004\141\u01c6\001" +
    "\002\000\006\105\u01c9\137\u01c8\001\002\000\004\141\u01ca" +
    "\001\002\000\004\141\uffab\001\002\000\004\141\uffaa\001" +
    "\002\000\004\052\u01cb\001\002\000\006\051\uffac\055\uffac" +
    "\001\002\000\004\141\u01cd\001\002\000\006\127\u01c2\130" +
    "\u01c0\001\002\000\004\141\u01cf\001\002\000\004\052\u01d0" +
    "\001\002\000\006\051\uffa6\055\uffa6\001\002\000\004\141" +
    "\u01d2\001\002\000\006\105\233\126\232\001\002\000\004" +
    "\141\u01d4\001\002\000\004\052\u01d5\001\002\000\006\051" +
    "\uffa5\055\uffa5\001\002\000\014\033\011\040\u01bb\041\u01bc" +
    "\042\u01ba\043\u01b4\001\002\000\006\051\uffc6\055\uffc6\001" +
    "\002\000\004\055\u01e9\001\002\000\014\027\155\030\162" +
    "\031\150\032\u01e0\033\011\001\002\000\006\051\u01db\055" +
    "\uffc3\001\002\000\014\027\155\030\162\031\150\032\u01e0" +
    "\033\011\001\002\000\006\051\uffbc\055\uffbc\001\002\000" +
    "\006\051\uffc2\055\uffc2\001\002\000\006\051\uffbd\055\uffbd" +
    "\001\002\000\006\051\uffbe\055\uffbe\001\002\000\004\140" +
    "\u01e3\001\002\000\006\051\uffc0\055\uffc0\001\002\000\006" +
    "\051\uffbf\055\uffbf\001\002\000\004\141\u01e4\001\002\000" +
    "\004\134\u01e5\001\002\000\004\141\u01e6\001\002\000\004" +
    "\052\u01e7\001\002\000\006\051\uffad\055\uffad\001\002\000" +
    "\006\051\uffc1\055\uffc1\001\002\000\010\054\uff96\056\uff96" +
    "\150\uff96\001\002\000\004\010\u01eb\001\002\000\004\055" +
    "\u01ec\001\002\000\006\054\ufffd\056\ufffd\001\002\000\004" +
    "\010\031\001\002\000\004\054\uffff\001\002\000\004\005" +
    "\033\001\002\000\004\054\ufffe\001\002\000\004\033\011" +
    "\001\002\000\004\055\uffca\001\002\000\004\141\u01f4\001" +
    "\002\000\004\143\u01f5\001\002\000\004\141\u01f6\001\002" +
    "\000\004\052\u01f7\001\002\000\006\051\uffa3\055\uffa3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f5\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\012\106\014\107\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\031\005\027\006\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\130\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\036\012\037" +
    "\127\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\043\001\001\000\002\001\001\000\004\126\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\061\112\064" +
    "\113\001\001\000\004\064\166\001\001\000\002\001\001" +
    "\000\032\044\125\045\131\046\141\047\132\050\134\051" +
    "\130\052\143\053\140\054\115\055\137\057\133\063\142" +
    "\001\001\000\002\001\001\000\006\073\u01d7\075\u01d9\001" +
    "\001\000\006\071\u01b1\072\u01af\001\001\000\006\065\u0199" +
    "\066\u0198\001\001\000\006\076\u0191\077\226\001\001\000" +
    "\006\076\u0182\077\226\001\001\000\006\101\u016a\102\u0169" +
    "\001\001\000\006\076\u0163\077\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\076\227\077\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\067\163\070\157" +
    "\104\155\105\156\106\146\110\160\111\153\112\150\113" +
    "\152\123\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\165\064\113\001\001\000\004\064" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\104\155\105\156" +
    "\106\146\110\160\111\153\112\150\113\152\123\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\106\240\110\244\111\243\112\241\113" +
    "\242\133\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\106\240\110\244\111\243\112" +
    "\241\113\242\133\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\251" +
    "\016\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\013\303\020\270" +
    "\021\275\022\273\024\277\025\274\026\300\027\263\142" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\u013d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\020\347\021\275\022\273\024" +
    "\277\025\274\026\300\027\263\142\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\327\042\330\001\001" +
    "\000\002\001\001\000\006\041\327\042\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\327\042\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\327" +
    "\042\354\001\001\000\006\041\327\042\353\001\001\000" +
    "\024\017\343\020\342\021\275\022\273\024\277\025\274" +
    "\026\300\027\263\142\272\001\001\000\006\041\327\042" +
    "\340\001\001\000\006\041\327\042\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\346" +
    "\020\270\021\275\022\273\024\277\025\274\026\300\027" +
    "\263\142\272\001\001\000\022\020\347\021\275\022\273" +
    "\024\277\025\274\026\300\027\263\142\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\041\327\042\373\043\u0101\060\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\327\042\373\043\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\144\u0105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\327\042\373\043\u0119\001\001\000\010\041\327" +
    "\042\373\043\u0118\001\001\000\010\041\327\042\373\043" +
    "\u0117\001\001\000\010\041\327\042\373\043\u0116\001\001" +
    "\000\010\041\327\042\373\043\u0115\001\001\000\010\041" +
    "\327\042\373\043\u0114\001\001\000\010\041\327\042\373" +
    "\043\u0113\001\001\000\010\041\327\042\373\043\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\144\u012a\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\074\u012f" +
    "\134\u012e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\u0134\001\001\000\002\001\001" +
    "\000\032\044\125\045\131\046\141\047\132\050\134\051" +
    "\130\052\143\053\140\054\115\055\137\057\133\063\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\u013e\001\001\000\004" +
    "\040\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\327\042\373\043\u0101\060\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\327\042\373\043\u0147\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\017\u014a\020\342\021" +
    "\275\022\273\024\277\025\274\026\300\027\263\142\272" +
    "\001\001\000\004\030\u014c\001\001\000\002\001\001\000" +
    "\004\031\u014e\001\001\000\024\017\u014f\020\342\021\275" +
    "\022\273\024\277\025\274\026\300\027\263\142\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\327\042\373\043\u0152\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\u0155\020\342\021\275" +
    "\022\273\024\277\025\274\026\300\027\263\142\272\001" +
    "\001\000\004\030\u0156\001\001\000\002\001\001\000\010" +
    "\041\327\042\373\043\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\u015b\020\342\021\275\022\273" +
    "\024\277\025\274\026\300\027\263\142\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\u0160\020\u015f\021\275\022\273\024\277\025\274\026" +
    "\300\027\263\142\272\001\001\000\002\001\001\000\022" +
    "\020\u0162\021\275\022\273\024\277\025\274\026\300\027" +
    "\263\142\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\125\u0165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\106\u016c\110" +
    "\u0172\111\u016e\112\u016d\137\u0174\140\u0171\141\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\106\u016c\110\u0172\111\u016e\112\u016d\137" +
    "\u0174\140\u0171\141\u0181\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\u0184\062\u0186\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u0187\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\u018d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\u0193\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\104\u01a1\106\u019c\110\u01a3\111\u01a0\112\u019e" +
    "\113\u019f\114\u01a2\122\u01ae\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\104\u01a1\106\u019c\110\u01a3\111\u01a0" +
    "\112\u019e\113\u019f\114\u01a2\122\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\125\u01aa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\106\u01b5\116\u01b4\120\u01b6" +
    "\121\u01bc\124\u01b7\131\u01b8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\u01c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\143\u01c6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\u01cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u01d2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\106\u01b5\116\u01b4\120\u01b6\121" +
    "\u01bc\124\u01b7\131\u01d6\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\106\u01db\110\u01e1\111\u01de\112\u01dd\115" +
    "\u01e0\132\u01e7\001\001\000\002\001\001\000\016\106\u01db" +
    "\110\u01e1\111\u01de\112\u01dd\115\u01e0\132\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u01ed\001\001\000\002\001\001\000" +
    "\004\005\u01ef\001\001\000\002\001\001\000\004\106\u01f1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    public Tabla tab = new Tabla();
    public Html retorno = new Html();
    public html html = new html();
    public Script funciones = new Script("");
    public String escribir = "";
    public ArrayList<Variable> globales = new ArrayList<>();
    public ArrayList<Variable> todas = new ArrayList<>();
    public ArrayList<Variable> locales = new ArrayList<>();
    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }

    public Variable existe(String id){
        for (int i = 0; i < globales.size(); i++){
            if (globales.get(i).getId().equals(id)){
                return globales.get(i);
            }
        }
        for (int i = 0; i < locales.size(); i++){
            if (locales.get(i).getId().equals(id)){
                return locales.get(i);
            }
        }
        return null;
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MENORQ GCIC CORCHETEA parametros_gcic MAYORQ MENORQ bloque_global FINETIQUETA GCIC MAYORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque_global ::= head MENORQ body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_global ::= body MENORQ head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= BODY parametros_body MAYORQ bloque_etiquetas FINETIQUETA BODY MAYORQ 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Body temp = new Body(); temp.appendChild(e1); imp(new String(temp.write().getBytes(), "UTF-8")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // head ::= HEAD MAYORQ MENORQ bloque_head FINETIQUETA HEAD MAYORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_head ::= link MENORQ title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_head",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_head ::= title MENORQ link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_head",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_etiquetas ::= bloque_etiquetas etiqueta 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_etiquetas ::= etiqueta 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiqueta ::= MENORQ tipo_etiqueta 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_etiqueta ::= h1 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		H1 e1 = (H1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_etiqueta ::= br 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Br e1 = (Br)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_etiqueta ::= spam 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Span e1 = (Span)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_etiqueta ::= script 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Div e1 = (Div)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_etiqueta ::= input 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Input e1 = (Input)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_etiqueta ::= textarea 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Textarea e1 = (Textarea)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_etiqueta ::= select 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Select e1 = (Select)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_etiqueta ::= div 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Div e1 = (Div)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_etiqueta ::= img 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Img e1 = (Img)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_etiqueta ::= button 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Button e1 = (Button)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_etiqueta ::= p 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		P e1 = (P)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // link ::= LINK CORCHETEA HREF IGUAL COMILLAS URL COMILLAS CORCHETEC MAYORQ FINETIQUETA LINK MAYORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // title ::= TITLE MAYORQ tipo_string FINETIQUETA TITLE MAYORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = "title="+e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_string ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_string",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_string ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_string",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // colors ::= COLORES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colors ::= HEX 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_body ::= 
            {
              String RESULT =null;
		 RESULT = "background-color: white;"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_body",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_body ::= CORCHETEA bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_body",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_button ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_button",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_button ::= lista_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_button",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_button ::= lista_button CORCHETEA tipo_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_button",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_button ::= CORCHETEA tipo_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_button",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_button ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_button ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_button ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_button ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_button ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_button ::= bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_button ::= onc 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // onc ::= ONC IGUAL COMILLAS PROCESS COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "onclick="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onc",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_div ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_div ::= lista_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_div ::= lista_div CORCHETEA tipo_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_div",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_div ::= tipo_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_div",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_div ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_div ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_div ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_div ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_div ::= class2 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_div ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_div ::= bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bg ::= BG IGUAL COMILLAS colors COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "background-color: "+e1+";"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bg",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // class2 ::= CLASS IGUAL COMILLAS CLASE COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "class="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class2",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_gcic ::= name CORCHETEA id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_gcic ::= id CORCHETEA name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_img ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_img ::= lista_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_img ::= lista_img CORCHETEA tipo_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_img",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_img ::= CORCHETEA tipo_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_img",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_input ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_input",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_input ::= lista_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_input",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_input ::= lista_input CORCHETEA tipo_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_input",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_input ::= CORCHETEA tipo_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_input",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_input ::= type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_input ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_input ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_input ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_input ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_img ::= src 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_img ::= width 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_img ::= height 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_img ::= alt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_img ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_h1 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_h1 ::= lista_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_h1 ::= lista_h1 CORCHETEA tipo_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_h1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_h1 ::= CORCHETEA tipo_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_h1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_h1 ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_h1 ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_h1 ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_h1 ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_h1 ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= TYPE IGUAL COMILLAS TIPOS COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "type="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // src ::= SRC IGUAL COMILLAS tipo_url COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "src="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("src",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_url ::= URL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_url",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_url ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_url",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // numerico ::= PIXELS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerico",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // numerico ::= PORC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerico",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // width ::= WIDTH IGUAL COMILLAS numerico COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "width="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("width",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // height ::= HEIGHT IGUAL COMILLAS numerico COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "height="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("height",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // alt ::= ALT IGUAL COMILLAS string COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "alt="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alt",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // name ::= NAME IGUAL COMILLAS STRING COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "name="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // id ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "id="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fts ::= FTS IGUAL COMILLAS PIXELS COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "font-size:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fts",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ftf ::= FTF IGUAL COMILLAS FUENTES COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "font-family:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftf",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // txta ::= TXTA IGUAL COMILLAS ALIGN COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "text-align:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("txta",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // color ::= COLOR IGUAL COMILLAS colors COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "color:"+e1+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // h1 ::= H1 parametros_h1 MAYORQ string FINETIQUETA H1 MAYORQ 
            {
              H1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 H1 temp = html.parametros_h1(new H1(),e1,e2); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // br ::= BR MAYORQ 
            {
              Br RESULT =null;
		 RESULT = new Br(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("br",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // img ::= IMG parametros_img MAYORQ 
            {
              Img RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = html.parametros_img(new Img("",""), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("img",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // div ::= DIV parametros_div MAYORQ bloque_etiquetas FINETIQUETA DIV MAYORQ 
            {
              Div RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e2 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_div(new Div(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("div",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // button ::= BUTTON parametros_button MAYORQ string FINETIQUETA BUTTON MAYORQ 
            {
              Button RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_button(new Button(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("button",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // p ::= P parametros_h1 MAYORQ string FINETIQUETA P MAYORQ 
            {
              P RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_p(new P(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // spam ::= SPAM parametros_h1 MAYORQ string FINETIQUETA SPAM MAYORQ 
            {
              Span RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_spam(new Span(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spam",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // script ::= SCRIPT MAYORQ lista_metodos FINETIQUETA SCRIPT MAYORQ 
            {
              Div RESULT =null;
		 RESULT = new Div(); RESULT.appendText(escribir); escribir = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("script",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // input ::= INPUT parametros_input MAYORQ 
            {
              Input RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = html.parametros_input(new Input(), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // textarea ::= TEXTAREA parametros_textarea MAYORQ 
            {
              Textarea RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = html.parametros_textarea(new Textarea("",""), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textarea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_textarea ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametros_textarea ::= lista_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_textarea ::= lista_textarea CORCHETEA tipo_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_textarea",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_textarea ::= CORCHETEA tipo_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_textarea",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo_textarea ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo_textarea ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo_textarea ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo_textarea ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo_textarea ::= cols 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo_textarea ::= rows 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // rows ::= ROWS IGUAL COMILLAS NUMERO COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "rows="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rows",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cols ::= COLS IGUAL COMILLAS NUMERO COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "cols="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cols",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // select ::= SELECT parametros_h1 MAYORQ bloque_opciones FINETIQUETA SELECT MAYORQ 
            {
              Select RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e2 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_select(new Select(),e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bloque_opciones ::= bloque_opciones opcion 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Option e2 = (Option)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // bloque_opciones ::= opcion 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Option e1 = (Option)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // opcion ::= MENORQ OPTION MAYORQ string FINETIQUETA OPTION MAYORQ 
            {
              Option RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Option temp = new Option(); temp.appendText(e1); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_metodos ::= lista_metodos metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista_metodos ::= metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // metodo ::= ONLOAD PARENTESISA PARENTESISC CORCHETEA bloque_codigo CORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // metodo ::= IDENTIFICADOR PARENTESISA PARENTESISC CORCHETEA bloque_codigo2 CORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // string ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // string ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // bloque_codigo ::= bloque_codigo instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // bloque_codigo ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bloque_codigo2 ::= bloque_codigo2 instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bloque_codigo2 ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // instruccion2 ::= llamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // instruccion ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instruccion ::= repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instruccion ::= insert 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // if ::= IF PARENTESISA valor_boolean PARENTESISC THEN bloque_instrucciones elseif else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elseif ::= ELSE IF PARENTESISA valor_boolean PARENTESISC THEN bloque_instrucciones elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // else ::= ELSE bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // repeat ::= REPEAT PARENTESISA condicion PARENTESISC HUNTIL PARENTESISA expr PARENTESISC bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // condicion ::= IDENTIFICADOR IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condicion ::= INT IDENTIFICADOR IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // while ::= WHILE PARENTESISA valor_boolean PARENTESISC THENW bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bloque_instrucciones ::= INIT LLAVEA DOSP bloque_codigo DOSP LLAVEC END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bloque_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // insert ::= INSERT PARENTESISA lista_tokens PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insert",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // lista_tokens ::= lista_tokens COMA token 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; escribir += e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tokens",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // lista_tokens ::= token 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<String> temp = new ArrayList<>(); temp.add(e1); RESULT = temp; escribir += e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tokens",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // token ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("token",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // token ::= APOS tipo_token APOS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("token",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_token ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_token ::= OCHAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_token ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipo_token ::= MENORQ tipo_etiqueta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1.write();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // llamada ::= ALERT PARENTESISA IDENTIFICADOR PARENTESISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // llamada ::= EXIT PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declaracion ::= tipo_dato global bloque_ids asignar PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e3 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // asignacion ::= IDENTIFICADOR IGUAL valor_asignar PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable e2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()==1){ RESULT = (String) var.getValor(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // asignar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // asignar ::= IGUAL valor_asignar 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 imp(e1.getValor().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // valor_asignar ::= valor_boolean 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = new Variable(); var.setTipo((int)e1.get("tipo")); var.setValor(e1.get("valor")); RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // valor_asignar ::= ASC PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.asc(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // valor_asignar ::= DESC PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.desc(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // valor_asignar ::= FPAR PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.letpar_num(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // valor_asignar ::= FIMPAR PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.letimpar_num(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // valor_asignar ::= REVERSE PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.reverse(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // valor_asignar ::= FCARACTER PARENTESISA PARENTESISC 
            {
              Variable RESULT =null;
		 RESULT = new Variable(); RESULT.char_aleatorio(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // valor_asignar ::= FNUM PARENTESISA PARENTESISC 
            {
              Variable RESULT =null;
		 RESULT = new Variable(); RESULT.num_aleatorio(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // entre ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()==1){ RESULT = (String) var.getValor(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entre",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // entre ::= COMILLAS STRING COMILLAS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entre",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipo_dato ::= INT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "0"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipo_dato ::= STRINGD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "1"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipo_dato ::= DECIMALD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "2"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // tipo_dato ::= CHAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "3"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipo_dato ::= BOOLEAND 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "4"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // valor_boolean ::= valor_boolean OR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_or(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // valor_boolean ::= valor_boolean AND valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_and(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // valor_boolean ::= NOT valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_not(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // valor_boolean ::= valor_boolean COMP_IGUAL valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_ii(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // valor_boolean ::= valor_boolean COMP_DIF valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_dif(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // valor_boolean ::= valor_boolean COMP_MENOR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mayor(e2,e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // valor_boolean ::= valor_boolean COMP_MAYOR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_menor(e2,e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // valor_boolean ::= valor_boolean MENORQ valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_menor(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // valor_boolean ::= valor_boolean MAYORQ valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mayor(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // valor_boolean ::= expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr ::= expr MAS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_suma(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr ::= expr MENOS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_resta(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr ::= expr POR expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mult(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr ::= expr ENTRE expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_div(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr ::= MENOS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_cambio(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr ::= dato 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr ::= PARENTESISA expr PARENTESISC 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // dato ::= COMILLAS STRING COMILLAS 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",1); temp.put("valor",e1.toString()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // dato ::= APOS OCHAR APOS 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",3); temp.put("valor",e1.toString().charAt(0)); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // dato ::= DECIMAL 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",2); temp.put("valor",Double.parseDouble(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // dato ::= NUMERO 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",0); temp.put("valor",Integer.parseInt(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // dato ::= BOOLEAN 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",4); boolean agregar = e1.toString().equalsIgnoreCase("true");  temp.put("valor",agregar); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // dato ::= IDENTIFICADOR 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = existe(e1.toString()); if (var!=null) {HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",var.getTipo()); temp.put("valor",var.getValor()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; } else { RESULT = new HashMap<>(); RESULT.put("tipo",5); RESULT.put("valor","no se ha declarado la variable en la posicion "+e1left+","+e1right); }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bloque_ids ::= bloque_ids COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2.toString()); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_ids",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // bloque_ids ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_ids",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // global ::= 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // global ::= MODO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
