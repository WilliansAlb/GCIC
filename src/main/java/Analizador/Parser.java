
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import Generador.html;
import com.hp.gagawa.java.Node;
import com.hp.gagawa.java.elements.Body;
import com.hp.gagawa.java.elements.Br;
import com.hp.gagawa.java.elements.Button;
import com.hp.gagawa.java.elements.Div;
import com.hp.gagawa.java.elements.H1;
import com.hp.gagawa.java.elements.Head;
import com.hp.gagawa.java.elements.Html;
import com.hp.gagawa.java.elements.Img;
import com.hp.gagawa.java.elements.Input;
import com.hp.gagawa.java.elements.Link;
import com.hp.gagawa.java.elements.P;
import com.hp.gagawa.java.elements.Span;
import com.hp.gagawa.java.elements.Textarea;
import com.hp.gagawa.java.elements.Title;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import Controladores.Tabla;
import POJOS.*;
import com.hp.gagawa.java.elements.Option;
import com.hp.gagawa.java.elements.Script;
import com.hp.gagawa.java.elements.Select;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\340\000\002\002\004\000\002\002\014\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\006\011\000\002\006\003\000\002\005\011\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\061\004\000\002\061\003\000\002\064\004\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\012\016\000\002\127" +
    "\010\000\002\126\003\000\002\126\003\000\002\103\003" +
    "\000\002\103\003\000\002\130\002\000\002\130\004\000" +
    "\002\066\002\000\002\066\003\000\002\065\005\000\002" +
    "\065\004\000\002\122\003\000\002\122\003\000\002\122" +
    "\003\000\002\122\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\114\012\000" +
    "\002\067\002\000\002\067\003\000\002\070\005\000\002" +
    "\070\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\123\003\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\104\010\000" +
    "\002\105\010\000\002\004\005\000\002\004\005\000\002" +
    "\071\002\000\002\071\003\000\002\072\005\000\002\072" +
    "\004\000\002\073\002\000\002\073\003\000\002\075\005" +
    "\000\002\075\004\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\076\002\000\002\076\003\000\002\077\005\000" +
    "\002\077\004\000\002\133\003\000\002\133\003\000\002" +
    "\133\003\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\115\010\000\002\116\010\000\002\143\003" +
    "\000\002\143\003\000\002\117\003\000\002\117\003\000" +
    "\002\120\010\000\002\121\010\000\002\124\010\000\002" +
    "\107\010\000\002\106\010\000\002\110\010\000\002\111" +
    "\010\000\002\112\010\000\002\113\010\000\002\043\011" +
    "\000\002\052\007\000\002\051\010\000\002\044\011\000" +
    "\002\053\011\000\002\056\011\000\002\054\011\000\002" +
    "\045\010\000\002\050\010\000\002\046\010\000\002\101" +
    "\002\000\002\101\003\000\002\102\005\000\002\102\004" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\141\003\000\002\141\003\000\002\141\003\000\002" +
    "\141\003\000\002\137\010\000\002\140\010\000\002\047" +
    "\011\000\002\062\004\000\002\062\003\000\002\055\011" +
    "\000\002\016\004\000\002\016\003\000\002\010\010\000" +
    "\002\010\010\000\002\125\003\000\002\125\003\000\002" +
    "\013\004\000\002\013\003\000\002\014\004\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\024\011\000\002\031" +
    "\002\000\002\031\004\000\002\025\013\000\002\032\005" +
    "\000\002\032\006\000\002\026\010\000\002\017\011\000" +
    "\002\017\003\000\002\027\007\000\002\074\005\000\002" +
    "\074\003\000\002\134\003\000\002\134\005\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\135\004" +
    "\000\002\023\006\000\002\023\005\000\002\021\007\000" +
    "\002\022\006\000\002\060\002\000\002\060\004\000\002" +
    "\057\003\000\002\057\006\000\002\057\006\000\002\057" +
    "\006\000\002\057\006\000\002\057\006\000\002\057\005" +
    "\000\002\057\005\000\002\057\003\000\002\144\003\000" +
    "\002\144\005\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\004\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\004\000\002\041\003\000\002\041\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\100\005\000\002\100\003\000\002\136\002\000\002\136" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0212\000\006\003\005\056\004\001\002\000\004\004" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\051\011\001" +
    "\002\000\006\033\012\034\015\001\002\000\004\140\u0210" +
    "\001\002\000\004\051\u020e\001\002\000\004\055\026\001" +
    "\002\000\004\140\021\001\002\000\004\051\017\001\002" +
    "\000\004\034\015\001\002\000\004\055\uffc2\001\002\000" +
    "\004\141\022\001\002\000\004\105\023\001\002\000\004" +
    "\141\024\001\002\000\004\052\025\001\002\000\006\051" +
    "\uff9a\055\uff9a\001\002\000\004\056\027\001\002\000\010" +
    "\003\031\005\035\010\033\001\002\000\004\056\u020c\001" +
    "\002\000\006\054\ufffc\056\ufffa\001\002\000\004\056\u0209" +
    "\001\002\000\006\051\103\055\uffe0\001\002\000\004\054" +
    "\077\001\002\000\004\055\036\001\002\000\004\056\037" +
    "\001\002\000\010\003\042\006\044\007\040\001\002\000" +
    "\004\051\064\001\002\000\004\054\061\001\002\000\004" +
    "\054\ufff6\001\002\000\004\056\057\001\002\000\004\055" +
    "\050\001\002\000\004\056\046\001\002\000\004\007\040" +
    "\001\002\000\004\054\ufff7\001\002\000\006\105\051\143" +
    "\052\001\002\000\004\054\uffe3\001\002\000\004\054\uffe4" +
    "\001\002\000\004\054\054\001\002\000\004\006\055\001" +
    "\002\000\004\055\056\001\002\000\006\054\uffe5\056\uffe5" +
    "\001\002\000\004\006\044\001\002\000\004\054\ufff8\001" +
    "\002\000\004\005\062\001\002\000\004\055\063\001\002" +
    "\000\006\054\ufff9\056\ufff9\001\002\000\004\024\065\001" +
    "\002\000\004\140\066\001\002\000\004\141\067\001\002" +
    "\000\004\137\070\001\002\000\004\141\071\001\002\000" +
    "\004\052\072\001\002\000\004\055\073\001\002\000\004" +
    "\054\074\001\002\000\004\007\075\001\002\000\004\055" +
    "\076\001\002\000\006\054\uffe6\056\uffe6\001\002\000\004" +
    "\004\100\001\002\000\004\055\101\001\002\000\004\002" +
    "\000\001\002\000\004\055\115\001\002\000\004\025\105" +
    "\001\002\000\004\055\uffdf\001\002\000\004\140\106\001" +
    "\002\000\004\141\107\001\002\000\006\125\112\131\111" +
    "\001\002\000\004\141\113\001\002\000\004\141\uffe2\001" +
    "\002\000\004\141\uffe1\001\002\000\004\052\114\001\002" +
    "\000\006\051\uffc5\055\uffc5\001\002\000\004\056\120\001" +
    "\002\000\006\054\u0206\056\120\001\002\000\006\054\ufff4" +
    "\056\ufff4\001\002\000\032\003\142\011\125\012\122\013" +
    "\127\014\126\016\141\017\123\020\143\021\124\022\133" +
    "\023\130\142\132\001\002\000\010\054\uffe9\056\uffe9\150" +
    "\uffe9\001\002\000\006\051\u01f1\055\uffbd\001\002\000\006" +
    "\051\u01c5\055\uffc1\001\002\000\006\051\u01a9\055\uffde\001" +
    "\002\000\006\051\236\055\uffad\001\002\000\006\051\236" +
    "\055\uffad\001\002\000\006\051\u0179\055\uff8a\001\002\000" +
    "\006\051\236\055\uffad\001\002\000\010\054\ufff2\056\ufff2" +
    "\150\ufff2\001\002\000\004\055\261\001\002\000\006\051" +
    "\236\055\uffad\001\002\000\010\054\uffee\056\uffee\150\uffee" +
    "\001\002\000\010\054\uffeb\056\uffeb\150\uffeb\001\002\000" +
    "\010\054\uffed\056\uffed\150\uffed\001\002\000\010\054\uffe8" +
    "\056\uffe8\150\uffe8\001\002\000\010\054\uffec\056\uffec\150" +
    "\uffec\001\002\000\024\003\170\025\105\026\163\027\166" +
    "\030\173\031\164\033\012\037\157\055\uffd1\001\002\000" +
    "\010\054\uffe7\056\uffe7\150\uffe7\001\002\000\004\055\151" +
    "\001\002\000\010\054\ufff0\056\ufff0\150\ufff0\001\002\000" +
    "\010\054\ufff1\056\ufff1\150\ufff1\001\002\000\010\054\uffef" +
    "\056\uffef\150\uffef\001\002\000\006\054\ufff3\056\ufff3\001" +
    "\002\000\010\054\uffea\056\uffea\150\uffea\001\002\000\004" +
    "\054\152\001\002\000\004\020\153\001\002\000\004\055" +
    "\154\001\002\000\010\054\uff93\056\uff93\150\uff93\001\002" +
    "\000\006\051\uffce\055\uffce\001\002\000\006\051\uffcb\055" +
    "\uffcb\001\002\000\004\140\231\001\002\000\006\051\uffc7" +
    "\055\uffc7\001\002\000\004\055\223\001\002\000\006\051" +
    "\221\055\uffd0\001\002\000\004\140\214\001\002\000\004" +
    "\140\207\001\002\000\006\051\uffcd\055\uffcd\001\002\000" +
    "\004\140\202\001\002\000\006\051\uffca\055\uffca\001\002" +
    "\000\006\051\uffc6\055\uffc6\001\002\000\006\051\uffc8\055" +
    "\uffc8\001\002\000\006\051\uffcc\055\uffcc\001\002\000\004" +
    "\140\175\001\002\000\006\051\uffc9\055\uffc9\001\002\000" +
    "\004\141\176\001\002\000\004\132\177\001\002\000\004" +
    "\141\200\001\002\000\004\052\201\001\002\000\006\051" +
    "\uff97\055\uff97\001\002\000\004\141\203\001\002\000\004" +
    "\127\204\001\002\000\004\141\205\001\002\000\004\052" +
    "\206\001\002\000\006\051\uff98\055\uff98\001\002\000\004" +
    "\141\210\001\002\000\004\133\211\001\002\000\004\141" +
    "\212\001\002\000\004\052\213\001\002\000\006\051\uff96" +
    "\055\uff96\001\002\000\004\141\215\001\002\000\006\125" +
    "\112\131\111\001\002\000\004\141\217\001\002\000\004" +
    "\052\220\001\002\000\006\051\uff95\055\uff95\001\002\000" +
    "\022\003\170\025\105\026\163\027\166\030\173\031\164" +
    "\033\012\037\157\001\002\000\006\051\uffcf\055\uffcf\001" +
    "\002\000\004\056\120\001\002\000\006\054\226\056\120" +
    "\001\002\000\006\054\ufff5\056\ufff5\001\002\000\004\016" +
    "\227\001\002\000\004\055\230\001\002\000\010\054\uff91" +
    "\056\uff91\150\uff91\001\002\000\004\141\232\001\002\000" +
    "\004\135\233\001\002\000\004\141\234\001\002\000\004" +
    "\052\235\001\002\000\006\051\uffc4\055\uffc4\001\002\000" +
    "\016\003\255\026\163\027\166\030\173\031\164\033\012" +
    "\001\002\000\006\051\250\055\uffac\001\002\000\004\055" +
    "\241\001\002\000\006\105\243\126\242\001\002\000\006" +
    "\054\uff74\141\uff74\001\002\000\006\054\uff75\141\uff75\001" +
    "\002\000\004\054\245\001\002\000\004\022\246\001\002" +
    "\000\004\055\247\001\002\000\010\054\uff94\056\uff94\150" +
    "\uff94\001\002\000\016\003\255\026\163\027\166\030\173" +
    "\031\164\033\012\001\002\000\006\051\uffa6\055\uffa6\001" +
    "\002\000\006\051\uffa7\055\uffa7\001\002\000\006\051\uffa5" +
    "\055\uffa5\001\002\000\006\051\uffa8\055\uffa8\001\002\000" +
    "\006\051\uffa4\055\uffa4\001\002\000\006\051\uffab\055\uffab" +
    "\001\002\000\006\051\uffa9\055\uffa9\001\002\000\006\051" +
    "\uffaa\055\uffaa\001\002\000\006\136\263\144\264\001\002" +
    "\000\010\054\uff78\136\uff78\144\uff78\001\002\000\004\045" +
    "\u016a\001\002\000\004\045\272\001\002\000\010\054\267" +
    "\136\263\144\264\001\002\000\010\054\uff79\136\uff79\144" +
    "\uff79\001\002\000\004\142\270\001\002\000\004\055\271" +
    "\001\002\000\010\054\uff8d\056\uff8d\150\uff8d\001\002\000" +
    "\004\046\273\001\002\000\004\051\274\001\002\000\026" +
    "\103\276\107\317\110\301\115\303\117\316\121\300\124" +
    "\310\143\314\146\277\151\313\001\002\000\032\052\uff65" +
    "\103\uff65\107\uff65\110\uff65\114\uff65\115\uff65\117\uff65\121" +
    "\uff65\124\uff65\143\uff65\146\uff65\151\uff65\001\002\000\006" +
    "\053\uff41\143\uff41\001\002\000\006\053\uff40\143\uff40\001" +
    "\002\000\004\045\u0165\001\002\000\006\053\uff3e\143\uff3e" +
    "\001\002\000\032\052\uff72\103\uff72\107\uff72\110\uff72\114" +
    "\uff72\115\uff72\117\uff72\121\uff72\124\uff72\143\uff72\146\uff72" +
    "\151\uff72\001\002\000\004\045\u015d\001\002\000\006\053" +
    "\u0153\143\uff23\001\002\000\032\052\uff69\103\uff69\107\uff69" +
    "\110\uff69\114\uff69\115\uff69\117\uff69\121\uff69\124\uff69\143" +
    "\uff69\146\uff69\151\uff69\001\002\000\032\052\uff67\103\uff67" +
    "\107\uff67\110\uff67\114\uff67\115\uff67\117\uff67\121\uff67\124" +
    "\uff67\143\uff67\146\uff67\151\uff67\001\002\000\032\052\uff6a" +
    "\103\uff6a\107\uff6a\110\uff6a\114\uff6a\115\uff6a\117\uff6a\121" +
    "\uff6a\124\uff6a\143\uff6a\146\uff6a\151\uff6a\001\002\000\004" +
    "\045\u0143\001\002\000\032\052\uff68\103\uff68\107\uff68\110" +
    "\uff68\114\uff68\115\uff68\117\uff68\121\uff68\124\uff68\143\uff68" +
    "\146\uff68\151\uff68\001\002\000\032\052\uff66\103\uff66\107" +
    "\uff66\110\uff66\114\uff66\115\uff66\117\uff66\121\uff66\124\uff66" +
    "\143\uff66\146\uff66\151\uff66\001\002\000\006\053\uff3d\143" +
    "\uff3d\001\002\000\004\140\u010d\001\002\000\030\052\u010c" +
    "\103\276\107\317\110\301\115\303\117\316\121\300\124" +
    "\310\143\314\146\277\151\313\001\002\000\004\045\320" +
    "\001\002\000\006\053\uff3f\143\uff3f\001\002\000\006\103" +
    "\323\143\321\001\002\000\004\140\u010a\001\002\000\004" +
    "\046\327\001\002\000\004\143\324\001\002\000\004\140" +
    "\325\001\002\000\004\126\326\001\002\000\004\046\uff5f" +
    "\001\002\000\004\120\330\001\002\000\004\045\331\001" +
    "\002\000\022\045\336\067\333\104\335\106\332\126\337" +
    "\141\340\143\343\150\334\001\002\000\036\046\uff29\055" +
    "\uff29\056\uff29\057\uff29\060\uff29\061\uff29\062\uff29\063\uff29" +
    "\064\uff29\066\uff29\067\uff29\070\uff29\071\uff29\112\uff29\001" +
    "\002\000\022\045\336\067\333\104\335\106\332\126\337" +
    "\141\340\143\343\150\334\001\002\000\004\155\u0107\001" +
    "\002\000\036\046\uff27\055\uff27\056\uff27\057\uff27\060\uff27" +
    "\061\uff27\062\uff27\063\uff27\064\uff27\066\uff27\067\uff27\070" +
    "\uff27\071\uff27\112\uff27\001\002\000\022\045\336\067\333" +
    "\104\335\106\332\126\337\141\340\143\343\150\334\001" +
    "\002\000\036\046\uff28\055\uff28\056\uff28\057\uff28\060\uff28" +
    "\061\uff28\062\uff28\063\uff28\064\uff28\066\uff28\067\uff28\070" +
    "\uff28\071\uff28\112\uff28\001\002\000\004\105\u0103\001\002" +
    "\000\014\046\346\066\344\067\347\070\350\071\345\001" +
    "\002\000\036\046\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d" +
    "\061\uff2d\062\uff2d\063\uff2d\064\uff2d\066\uff2d\067\uff2d\070" +
    "\uff2d\071\uff2d\112\uff2d\001\002\000\036\046\uff26\055\uff26" +
    "\056\uff26\057\uff26\060\uff26\061\uff26\062\uff26\063\uff26\064" +
    "\uff26\066\uff26\067\uff26\070\uff26\071\uff26\112\uff26\001\002" +
    "\000\022\045\336\067\333\104\335\106\332\126\337\141" +
    "\340\143\343\150\334\001\002\000\022\045\336\067\333" +
    "\104\335\106\332\126\337\141\340\143\343\150\334\001" +
    "\002\000\030\101\362\102\353\103\276\107\317\110\301" +
    "\113\354\117\316\121\300\143\314\146\277\151\313\001" +
    "\002\000\022\045\336\067\333\104\335\106\332\126\337" +
    "\141\340\143\343\150\334\001\002\000\022\045\336\067" +
    "\333\104\335\106\332\126\337\141\340\143\343\150\334" +
    "\001\002\000\036\046\uff30\055\uff30\056\uff30\057\uff30\060" +
    "\uff30\061\uff30\062\uff30\063\uff30\064\uff30\066\uff30\067\uff30" +
    "\070\uff30\071\uff30\112\uff30\001\002\000\036\046\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062\uff31\063\uff31" +
    "\064\uff31\066\uff31\067\uff31\070\350\071\345\112\uff31\001" +
    "\002\000\004\045\377\001\002\000\004\047\370\001\002" +
    "\000\040\052\uff6d\101\uff6d\102\uff6d\103\uff6d\107\uff6d\110" +
    "\uff6d\114\uff6d\115\uff6d\116\uff6d\117\uff6d\121\uff6d\124\uff6d" +
    "\143\uff6d\146\uff6d\151\uff6d\001\002\000\040\052\uff6c\101" +
    "\uff6c\102\uff6c\103\uff6c\107\uff6c\110\uff6c\114\uff6c\115\uff6c" +
    "\116\uff6c\117\uff6c\121\uff6c\124\uff6c\143\uff6c\146\uff6c\151" +
    "\uff6c\001\002\000\040\052\uff6f\101\uff6f\102\uff6f\103\uff6f" +
    "\107\uff6f\110\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\121" +
    "\uff6f\124\uff6f\143\uff6f\146\uff6f\151\uff6f\001\002\000\040" +
    "\052\uff6e\101\uff6e\102\uff6e\103\uff6e\107\uff6e\110\uff6e\114" +
    "\uff6e\115\uff6e\116\uff6e\117\uff6e\121\uff6e\124\uff6e\143\uff6e" +
    "\146\uff6e\151\uff6e\001\002\000\040\052\uff6b\101\uff6b\102" +
    "\uff6b\103\uff6b\107\uff6b\110\uff6b\114\uff6b\115\uff6b\116\uff6b" +
    "\117\uff6b\121\uff6b\124\uff6b\143\uff6b\146\uff6b\151\uff6b\001" +
    "\002\000\004\045\365\001\002\000\040\052\uff61\101\uff61" +
    "\102\uff61\103\uff61\107\uff61\110\uff61\114\uff61\115\uff61\116" +
    "\uff61\117\uff61\121\uff61\124\uff61\143\uff61\146\uff61\151\uff61" +
    "\001\002\000\040\052\uff5c\101\uff5c\102\uff5c\103\uff5c\107" +
    "\uff5c\110\uff5c\114\uff5c\115\uff5c\116\uff5c\117\uff5c\121\uff5c" +
    "\124\uff5c\143\uff5c\146\uff5c\151\uff5c\001\002\000\004\143" +
    "\366\001\002\000\004\046\367\001\002\000\040\052\uff52" +
    "\101\uff52\102\uff52\103\uff52\107\uff52\110\uff52\114\uff52\115" +
    "\uff52\116\uff52\117\uff52\121\uff52\124\uff52\143\uff52\146\uff52" +
    "\151\uff52\001\002\000\004\114\371\001\002\000\026\103" +
    "\276\107\317\110\301\115\303\117\316\121\300\124\310" +
    "\143\314\146\277\151\313\001\002\000\030\103\276\107" +
    "\317\110\301\114\374\115\303\117\316\121\300\124\310" +
    "\143\314\146\277\151\313\001\002\000\032\052\uff73\103" +
    "\uff73\107\uff73\110\uff73\114\uff73\115\uff73\117\uff73\121\uff73" +
    "\124\uff73\143\uff73\146\uff73\151\uff73\001\002\000\004\050" +
    "\375\001\002\000\004\154\376\001\002\000\040\052\uff5d" +
    "\101\uff5d\102\uff5d\103\uff5d\107\uff5d\110\uff5d\114\uff5d\115" +
    "\uff5d\116\uff5d\117\uff5d\121\uff5d\124\uff5d\143\uff5d\146\uff5d" +
    "\151\uff5d\001\002\000\004\046\u0100\001\002\000\040\052" +
    "\uff51\101\uff51\102\uff51\103\uff51\107\uff51\110\uff51\114\uff51" +
    "\115\uff51\116\uff51\117\uff51\121\uff51\124\uff51\143\uff51\146" +
    "\uff51\151\uff51\001\002\000\036\046\uff2f\055\uff2f\056\uff2f" +
    "\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\066" +
    "\uff2f\067\uff2f\070\uff2f\071\uff2f\112\uff2f\001\002\000\036" +
    "\046\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062" +
    "\uff32\063\uff32\064\uff32\066\uff32\067\uff32\070\350\071\345" +
    "\112\uff32\001\002\000\004\141\u0104\001\002\000\036\046" +
    "\uff2b\055\uff2b\056\uff2b\057\uff2b\060\uff2b\061\uff2b\062\uff2b" +
    "\063\uff2b\064\uff2b\066\uff2b\067\uff2b\070\uff2b\071\uff2b\112" +
    "\uff2b\001\002\000\014\046\u0106\066\344\067\347\070\350" +
    "\071\345\001\002\000\036\046\uff2c\055\uff2c\056\uff2c\057" +
    "\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\066\uff2c" +
    "\067\uff2c\070\uff2c\071\uff2c\112\uff2c\001\002\000\004\150" +
    "\u0108\001\002\000\036\046\uff2a\055\uff2a\056\uff2a\057\uff2a" +
    "\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\066\uff2a\067" +
    "\uff2a\070\uff2a\071\uff2a\112\uff2a\001\002\000\036\046\uff2e" +
    "\055\uff2e\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\063" +
    "\uff2e\064\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\112\uff2e" +
    "\001\002\000\004\126\u010b\001\002\000\004\046\uff60\001" +
    "\002\000\010\054\uff77\136\uff77\144\uff77\001\002\000\044" +
    "\003\u0115\045\336\065\u0112\067\333\072\u0116\073\u0110\074" +
    "\u010e\075\u010f\076\u0119\077\u0114\100\u0117\104\335\106\332" +
    "\126\337\141\340\143\343\150\334\001\002\000\004\045" +
    "\u0140\001\002\000\004\045\u013d\001\002\000\004\045\u013a" +
    "\001\002\000\036\046\uff33\055\uff33\056\uff33\057\uff33\060" +
    "\uff33\061\uff33\062\uff33\063\uff33\064\uff33\066\344\067\347" +
    "\070\350\071\345\112\uff33\001\002\000\024\045\336\065" +
    "\u0112\067\333\104\335\106\332\126\337\141\340\143\343" +
    "\150\334\001\002\000\004\112\u0138\001\002\000\004\045" +
    "\u0136\001\002\000\004\112\uff44\001\002\000\004\045\u0133" +
    "\001\002\000\004\045\u0131\001\002\000\024\055\u0122\056" +
    "\u0124\057\u0128\060\u0121\061\u0123\062\u0125\063\u0127\064\u0126" +
    "\112\uff4c\001\002\000\004\045\u011a\001\002\000\006\141" +
    "\u011d\143\u011b\001\002\000\004\046\uff43\001\002\000\004" +
    "\046\u0120\001\002\000\004\105\u011e\001\002\000\004\141" +
    "\u011f\001\002\000\004\046\uff42\001\002\000\004\112\uff47" +
    "\001\002\000\024\045\336\065\u0112\067\333\104\335\106" +
    "\332\126\337\141\340\143\343\150\334\001\002\000\024" +
    "\045\336\065\u0112\067\333\104\335\106\332\126\337\141" +
    "\340\143\343\150\334\001\002\000\024\045\336\065\u0112" +
    "\067\333\104\335\106\332\126\337\141\340\143\343\150" +
    "\334\001\002\000\024\045\336\065\u0112\067\333\104\335" +
    "\106\332\126\337\141\340\143\343\150\334\001\002\000" +
    "\024\045\336\065\u0112\067\333\104\335\106\332\126\337" +
    "\141\340\143\343\150\334\001\002\000\024\045\336\065" +
    "\u0112\067\333\104\335\106\332\126\337\141\340\143\343" +
    "\150\334\001\002\000\024\045\336\065\u0112\067\333\104" +
    "\335\106\332\126\337\141\340\143\343\150\334\001\002" +
    "\000\024\045\336\065\u0112\067\333\104\335\106\332\126" +
    "\337\141\340\143\343\150\334\001\002\000\026\046\uff39" +
    "\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063" +
    "\uff39\064\uff39\112\uff39\001\002\000\026\046\uff3c\055\u0122" +
    "\056\u0124\057\u0128\060\u0121\061\u0123\062\u0125\063\uff3c\064" +
    "\u0126\112\uff3c\001\002\000\026\046\uff3b\055\u0122\056\u0124" +
    "\057\u0128\060\u0121\061\u0123\062\u0125\063\uff3b\064\uff3b\112" +
    "\uff3b\001\002\000\026\046\uff36\055\uff36\056\uff36\057\uff36" +
    "\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\112\uff36\001" +
    "\002\000\026\046\uff35\055\uff35\056\uff35\057\uff35\060\uff35" +
    "\061\uff35\062\uff35\063\uff35\064\uff35\112\uff35\001\002\000" +
    "\026\046\uff37\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37" +
    "\062\uff37\063\uff37\064\uff37\112\uff37\001\002\000\026\046" +
    "\uff34\055\uff34\056\uff34\057\uff34\060\uff34\061\uff34\062\uff34" +
    "\063\uff34\064\uff34\112\uff34\001\002\000\026\046\uff38\055" +
    "\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38" +
    "\064\uff38\112\uff38\001\002\000\004\046\u0132\001\002\000" +
    "\004\112\uff45\001\002\000\006\141\u011d\143\u011b\001\002" +
    "\000\004\046\u0135\001\002\000\004\112\uff4b\001\002\000" +
    "\004\046\u0137\001\002\000\004\112\uff46\001\002\000\040" +
    "\052\uff4f\101\uff4f\102\uff4f\103\uff4f\107\uff4f\110\uff4f\114" +
    "\uff4f\115\uff4f\116\uff4f\117\uff4f\121\uff4f\124\uff4f\143\uff4f" +
    "\146\uff4f\151\uff4f\001\002\000\026\046\uff3a\055\uff3a\056" +
    "\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a" +
    "\112\uff3a\001\002\000\006\141\u011d\143\u011b\001\002\000" +
    "\004\046\u013c\001\002\000\004\112\uff4a\001\002\000\006" +
    "\141\u011d\143\u011b\001\002\000\004\046\u013f\001\002\000" +
    "\004\112\uff48\001\002\000\006\141\u011d\143\u011b\001\002" +
    "\000\004\046\u0142\001\002\000\004\112\uff49\001\002\000" +
    "\006\143\u0145\150\u0147\001\002\000\006\046\uff59\147\uff59" +
    "\001\002\000\006\046\uff58\147\uff58\001\002\000\006\046" +
    "\u0150\147\u014f\001\002\000\012\056\u0149\105\u0148\143\u014a" +
    "\155\u014c\001\002\000\004\150\uff56\001\002\000\032\003" +
    "\142\011\125\012\122\013\127\014\126\016\141\017\123" +
    "\020\143\021\124\022\133\023\130\142\132\001\002\000" +
    "\004\150\uff54\001\002\000\004\150\u014d\001\002\000\004" +
    "\150\uff55\001\002\000\006\046\uff57\147\uff57\001\002\000" +
    "\004\150\uff53\001\002\000\006\143\u0145\150\u0147\001\002" +
    "\000\004\112\u0151\001\002\000\032\052\uff5b\103\uff5b\107" +
    "\uff5b\110\uff5b\114\uff5b\115\uff5b\117\uff5b\121\uff5b\124\uff5b" +
    "\143\uff5b\146\uff5b\151\uff5b\001\002\000\006\046\uff5a\147" +
    "\uff5a\001\002\000\004\143\uff22\001\002\000\004\143\u0156" +
    "\001\002\000\010\112\uff4e\140\u0159\147\u0157\001\002\000" +
    "\010\112\uff24\140\uff24\147\uff24\001\002\000\004\143\u015c" +
    "\001\002\000\004\112\u015b\001\002\000\044\003\u0115\045" +
    "\336\065\u0112\067\333\072\u0116\073\u0110\074\u010e\075\u010f" +
    "\076\u0119\077\u0114\100\u0117\104\335\106\332\126\337\141" +
    "\340\143\343\150\334\001\002\000\004\112\uff4d\001\002" +
    "\000\040\052\uff50\101\uff50\102\uff50\103\uff50\107\uff50\110" +
    "\uff50\114\uff50\115\uff50\116\uff50\117\uff50\121\uff50\124\uff50" +
    "\143\uff50\146\uff50\151\uff50\001\002\000\010\112\uff25\140" +
    "\uff25\147\uff25\001\002\000\024\045\336\065\u0112\067\333" +
    "\104\335\106\332\126\337\141\340\143\343\150\334\001" +
    "\002\000\024\046\u015f\055\u0122\056\u0124\057\u0128\060\u0121" +
    "\061\u0123\062\u0125\063\u0127\064\u0126\001\002\000\004\123" +
    "\u0160\001\002\000\030\101\362\102\353\103\276\107\317" +
    "\110\301\113\354\117\316\121\300\143\314\146\277\151" +
    "\313\001\002\000\034\052\uff63\103\uff63\107\uff63\110\uff63" +
    "\114\uff63\115\uff63\116\u0162\117\uff63\121\uff63\124\uff63\143" +
    "\uff63\146\uff63\151\uff63\001\002\000\030\101\362\102\353" +
    "\103\276\107\317\110\301\113\354\117\316\121\300\143" +
    "\314\146\277\151\313\001\002\000\032\052\uff64\103\uff64" +
    "\107\uff64\110\uff64\114\uff64\115\uff64\117\uff64\121\uff64\124" +
    "\uff64\143\uff64\146\uff64\151\uff64\001\002\000\032\052\uff62" +
    "\103\uff62\107\uff62\110\uff62\114\uff62\115\uff62\117\uff62\121" +
    "\uff62\124\uff62\143\uff62\146\uff62\151\uff62\001\002\000\024" +
    "\045\336\065\u0112\067\333\104\335\106\332\126\337\141" +
    "\340\143\343\150\334\001\002\000\024\046\u0167\055\u0122" +
    "\056\u0124\057\u0128\060\u0121\061\u0123\062\u0125\063\u0127\064" +
    "\u0126\001\002\000\004\122\u0168\001\002\000\030\101\362" +
    "\102\353\103\276\107\317\110\301\113\354\117\316\121" +
    "\300\143\314\146\277\151\313\001\002\000\040\052\uff5e" +
    "\101\uff5e\102\uff5e\103\uff5e\107\uff5e\110\uff5e\114\uff5e\115" +
    "\uff5e\116\uff5e\117\uff5e\121\uff5e\124\uff5e\143\uff5e\146\uff5e" +
    "\151\uff5e\001\002\000\004\046\u016b\001\002\000\004\051" +
    "\u016c\001\002\000\026\101\362\102\353\103\276\107\317" +
    "\110\301\117\316\121\300\143\314\146\277\151\313\001" +
    "\002\000\030\052\u016f\101\362\102\353\103\276\107\317" +
    "\110\301\117\316\121\300\143\314\146\277\151\313\001" +
    "\002\000\030\052\uff70\101\uff70\102\uff70\103\uff70\107\uff70" +
    "\110\uff70\117\uff70\121\uff70\143\uff70\146\uff70\151\uff70\001" +
    "\002\000\010\054\uff76\136\uff76\144\uff76\001\002\000\030" +
    "\052\uff71\101\uff71\102\uff71\103\uff71\107\uff71\110\uff71\117" +
    "\uff71\121\uff71\143\uff71\146\uff71\151\uff71\001\002\000\004" +
    "\055\u0172\001\002\000\006\105\243\126\242\001\002\000" +
    "\004\054\u0174\001\002\000\004\023\u0175\001\002\000\004" +
    "\055\u0176\001\002\000\010\054\uff8f\056\uff8f\150\uff8f\001" +
    "\002\000\006\051\u0192\055\uff89\001\002\000\004\055\u018e" +
    "\001\002\000\020\003\u017f\027\166\030\173\031\164\033" +
    "\012\035\u017e\036\u0182\001\002\000\006\051\uff83\055\uff83" +
    "\001\002\000\006\051\uff84\055\uff84\001\002\000\006\051" +
    "\uff85\055\uff85\001\002\000\006\051\uff87\055\uff87\001\002" +
    "\000\004\140\u0189\001\002\000\006\051\uff80\055\uff80\001" +
    "\002\000\006\051\uff82\055\uff82\001\002\000\006\051\uff86" +
    "\055\uff86\001\002\000\004\140\u0184\001\002\000\006\051" +
    "\uff81\055\uff81\001\002\000\004\141\u0185\001\002\000\004" +
    "\126\u0186\001\002\000\004\141\u0187\001\002\000\004\052" +
    "\u0188\001\002\000\006\051\uff7f\055\uff7f\001\002\000\004" +
    "\141\u018a\001\002\000\004\126\u018b\001\002\000\004\141" +
    "\u018c\001\002\000\004\052\u018d\001\002\000\006\051\uff7e" +
    "\055\uff7e\001\002\000\004\054\u018f\001\002\000\004\013" +
    "\u0190\001\002\000\004\055\u0191\001\002\000\010\054\uff8b" +
    "\056\uff8b\150\uff8b\001\002\000\020\003\u017f\027\166\030" +
    "\173\031\164\033\012\035\u017e\036\u0182\001\002\000\006" +
    "\051\uff88\055\uff88\001\002\000\004\055\u0195\001\002\000" +
    "\004\056\u0197\001\002\000\006\054\uff7b\056\uff7b\001\002" +
    "\000\004\015\u019d\001\002\000\006\054\u019a\056\u0197\001" +
    "\002\000\006\054\uff7c\056\uff7c\001\002\000\004\014\u019b" +
    "\001\002\000\004\055\u019c\001\002\000\010\054\uff7d\056" +
    "\uff7d\150\uff7d\001\002\000\004\055\u019e\001\002\000\006" +
    "\105\243\126\242\001\002\000\004\054\u01a0\001\002\000" +
    "\004\015\u01a1\001\002\000\004\055\u01a2\001\002\000\006" +
    "\054\uff7a\056\uff7a\001\002\000\004\055\u01a4\001\002\000" +
    "\006\105\243\126\242\001\002\000\004\054\u01a6\001\002" +
    "\000\004\011\u01a7\001\002\000\004\055\u01a8\001\002\000" +
    "\010\054\uff8e\056\uff8e\150\uff8e\001\002\000\022\003\u01b5" +
    "\025\105\026\163\027\166\030\173\031\164\033\012\044" +
    "\u01ad\001\002\000\004\055\u01be\001\002\000\006\051\u01ac" +
    "\055\uffdd\001\002\000\022\003\u01b5\025\105\026\163\027" +
    "\166\030\173\031\164\033\012\044\u01ad\001\002\000\004" +
    "\140\u01b7\001\002\000\006\051\uffd7\055\uffd7\001\002\000" +
    "\006\051\uffdc\055\uffdc\001\002\000\006\051\uffd8\055\uffd8" +
    "\001\002\000\006\051\uffd6\055\uffd6\001\002\000\006\051" +
    "\uffd9\055\uffd9\001\002\000\006\051\uffd5\055\uffd5\001\002" +
    "\000\006\051\uffd4\055\uffd4\001\002\000\006\051\uffd3\055" +
    "\uffd3\001\002\000\006\051\uffda\055\uffda\001\002\000\004" +
    "\141\u01b8\001\002\000\004\136\u01b9\001\002\000\004\045" +
    "\u01ba\001\002\000\004\046\u01bb\001\002\000\004\141\u01bc" +
    "\001\002\000\004\052\u01bd\001\002\000\006\051\uffd2\055" +
    "\uffd2\001\002\000\006\105\243\126\242\001\002\000\004" +
    "\054\u01c0\001\002\000\004\021\u01c1\001\002\000\004\055" +
    "\u01c2\001\002\000\010\054\uff90\056\uff90\150\uff90\001\002" +
    "\000\006\051\uffdb\055\uffdb\001\002\000\006\051\u01ee\055" +
    "\uffc0\001\002\000\016\003\u01d3\033\012\040\u01d0\041\u01d4" +
    "\042\u01d1\043\u01cc\001\002\000\004\055\u01c7\001\002\000" +
    "\004\054\u01c8\001\002\000\004\017\u01c9\001\002\000\004" +
    "\055\u01ca\001\002\000\010\054\uff92\056\uff92\150\uff92\001" +
    "\002\000\006\051\uffb3\055\uffb3\001\002\000\004\140\u01e9" +
    "\001\002\000\006\051\uffaf\055\uffaf\001\002\000\006\051" +
    "\uffb2\055\uffb2\001\002\000\006\051\uffb0\055\uffb0\001\002" +
    "\000\004\140\u01e2\001\002\000\004\140\u01dd\001\002\000" +
    "\006\051\uffbe\055\uffbe\001\002\000\006\051\uffae\055\uffae" +
    "\001\002\000\004\140\u01d6\001\002\000\006\051\uffb1\055" +
    "\uffb1\001\002\000\004\141\u01d7\001\002\000\006\127\u01da" +
    "\130\u01d8\001\002\000\004\141\uff9e\001\002\000\004\141" +
    "\u01db\001\002\000\004\141\uff9f\001\002\000\004\052\u01dc" +
    "\001\002\000\006\051\uff9d\055\uff9d\001\002\000\004\141" +
    "\u01de\001\002\000\006\127\u01da\130\u01d8\001\002\000\004" +
    "\141\u01e0\001\002\000\004\052\u01e1\001\002\000\006\051" +
    "\uff9c\055\uff9c\001\002\000\004\141\u01e3\001\002\000\006" +
    "\105\u01e6\137\u01e5\001\002\000\004\141\u01e7\001\002\000" +
    "\004\141\uffa1\001\002\000\004\141\uffa0\001\002\000\004" +
    "\052\u01e8\001\002\000\006\051\uffa2\055\uffa2\001\002\000" +
    "\004\141\u01ea\001\002\000\006\105\243\126\242\001\002" +
    "\000\004\141\u01ec\001\002\000\004\052\u01ed\001\002\000" +
    "\006\051\uff9b\055\uff9b\001\002\000\016\003\u01d3\033\012" +
    "\040\u01d0\041\u01d4\042\u01d1\043\u01cc\001\002\000\006\051" +
    "\uffbf\055\uffbf\001\002\000\004\055\u0202\001\002\000\016" +
    "\003\u01fa\027\166\030\173\031\164\032\u01f8\033\012\001" +
    "\002\000\006\051\u01f3\055\uffbc\001\002\000\016\003\u01fa" +
    "\027\166\030\173\031\164\032\u01f8\033\012\001\002\000" +
    "\006\051\uffb5\055\uffb5\001\002\000\006\051\uffbb\055\uffbb" +
    "\001\002\000\006\051\uffb6\055\uffb6\001\002\000\006\051" +
    "\uffb7\055\uffb7\001\002\000\004\140\u01fc\001\002\000\006" +
    "\051\uffb9\055\uffb9\001\002\000\006\051\uffb4\055\uffb4\001" +
    "\002\000\006\051\uffb8\055\uffb8\001\002\000\004\141\u01fd" +
    "\001\002\000\004\134\u01fe\001\002\000\004\141\u01ff\001" +
    "\002\000\004\052\u0200\001\002\000\006\051\uffa3\055\uffa3" +
    "\001\002\000\006\051\uffba\055\uffba\001\002\000\004\054" +
    "\u0203\001\002\000\004\012\u0204\001\002\000\004\055\u0205" +
    "\001\002\000\010\054\uff8c\056\uff8c\150\uff8c\001\002\000" +
    "\004\010\u0207\001\002\000\004\055\u0208\001\002\000\006" +
    "\054\ufffb\056\ufffb\001\002\000\006\003\u020b\010\033\001" +
    "\002\000\004\054\ufffe\001\002\000\004\054\ufffa\001\002" +
    "\000\004\005\035\001\002\000\004\054\ufffd\001\002\000" +
    "\004\033\012\001\002\000\004\055\uffc3\001\002\000\004" +
    "\141\u0211\001\002\000\004\143\u0212\001\002\000\004\141" +
    "\u0213\001\002\000\004\052\u0214\001\002\000\006\051\uff99" +
    "\055\uff99\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0212\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\013\106\015\107\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\033\005\031\006\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\040\012\042\127\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\046\001\001\000\002\001\001\000\004\126\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\115\064\116" +
    "\001\001\000\004\064\224\001\001\000\002\001\001\000" +
    "\032\043\130\044\134\045\145\046\135\047\137\050\133" +
    "\051\147\052\144\053\120\054\143\056\136\063\146\001" +
    "\001\000\002\001\001\000\006\073\u01ef\075\u01f1\001\001" +
    "\000\006\071\u01c5\072\u01c3\001\001\000\006\065\u01aa\066" +
    "\u01a9\001\001\000\006\076\u01a2\077\236\001\001\000\006" +
    "\076\u0193\077\236\001\001\000\006\101\u0177\102\u0176\001" +
    "\001\000\006\076\u0170\077\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\076\237\077\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\067\160\070\161\104" +
    "\157\105\173\106\166\110\164\111\171\112\155\113\170" +
    "\123\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\104\157\105\173\106\166\110\164\111\171\112\155" +
    "\113\170\123\221\001\001\000\002\001\001\000\006\061" +
    "\223\064\116\001\001\000\004\064\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\106\250\110" +
    "\256\111\253\112\251\113\252\133\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\106" +
    "\250\110\256\111\253\112\251\113\252\133\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\261\016\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\314\020\301\021\306\022" +
    "\304\024\310\025\305\026\311\027\274\142\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\020\372\021\306\022\304\024\310\025\305" +
    "\026\311\027\274\142\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\341\041\340\001\001\000\002\001" +
    "\001\000\006\040\341\041\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\341\041\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\341\041\u0101\001" +
    "\001\000\006\040\341\041\u0100\001\001\000\022\015\363" +
    "\017\362\021\357\022\354\023\356\025\355\026\360\142" +
    "\303\001\001\000\006\040\341\041\351\001\001\000\006" +
    "\040\341\041\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\371\020\301\021\306" +
    "\022\304\024\310\025\305\026\311\027\274\142\303\001" +
    "\001\000\022\020\372\021\306\022\304\024\310\025\305" +
    "\026\311\027\274\142\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\040\341\041\u0110\042\u0117\057\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\341\041\u0110\042\u0138\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\341\041\u0110" +
    "\042\u012f\001\001\000\010\040\341\041\u0110\042\u012e\001" +
    "\001\000\010\040\341\041\u0110\042\u012d\001\001\000\010" +
    "\040\341\041\u0110\042\u012c\001\001\000\010\040\341\041" +
    "\u0110\042\u012b\001\001\000\010\040\341\041\u0110\042\u012a" +
    "\001\001\000\010\040\341\041\u0110\042\u0129\001\001\000" +
    "\010\040\341\041\u0110\042\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\144" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\144\u013a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\u013d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\074\u0145\134\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\u014a\001\001\000\002\001\001\000\032\043\130\044" +
    "\134\045\145\046\135\047\137\050\133\051\147\052\144" +
    "\053\120\054\143\056\136\063\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u0154\001\001\000\004\060\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\341\041\u0110\042\u0117\057\u0159\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\341" +
    "\041\u0110\042\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\363\017\u0160\021\357\022\354\023\356" +
    "\025\355\026\360\142\303\001\001\000\004\031\u0162\001" +
    "\001\000\022\015\363\017\u0163\021\357\022\354\023\356" +
    "\025\355\026\360\142\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\341\041\u0110\042\u0165\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\363\017" +
    "\u0168\021\357\022\354\023\356\025\355\026\360\142\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\u016c\015\u016d\021\357\022\354\023\356" +
    "\025\355\026\360\142\303\001\001\000\020\015\u016f\021" +
    "\357\022\354\023\356\025\355\026\360\142\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\106\u0179\110\u0180" +
    "\111\u017b\112\u017a\137\u0182\140\u017f\141\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\106\u0179\110\u0180\111\u017b\112" +
    "\u017a\137\u0182\140\u017f\141\u0192\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\u0195\062\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\u019e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\u01a4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\104\u01b2\106\u01ad\110\u01b5\111\u01b1" +
    "\112\u01af\113\u01b0\114\u01b3\122\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\104\u01b2\106\u01ad\110\u01b5" +
    "\111\u01b1\112\u01af\113\u01b0\114\u01b3\122\u01ae\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\125\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\106\u01cc\116\u01ca\120" +
    "\u01cd\121\u01d4\124\u01ce\131\u01d1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\117\u01d8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\u01de\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\143\u01e3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u01ea\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\106\u01cc\116" +
    "\u01ca\120\u01cd\121\u01d4\124\u01ce\131\u01ee\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\106\u01f3\110\u01fa\111" +
    "\u01f6\112\u01f5\115\u01f8\132\u0200\001\001\000\002\001\001" +
    "\000\016\106\u01f3\110\u01fa\111\u01f6\112\u01f5\115\u01f8\132" +
    "\u01f4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0209" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u020c\001\001\000\002\001\001\000\004\106\u020e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    public Tabla tab = new Tabla();
    public Html retorno = new Html();
    public Body cuerpo = new Body();
    public html html = new html();
    public Script funciones = new Script("");
    public String escribir = "";
    public ArrayList<Errores> errores = new ArrayList<>();
    public ArrayList<Cambio> cambios = new ArrayList<>();
    public ArrayList<Variable> globales = new ArrayList<>();
    public ArrayList<Variable> todas = new ArrayList<>();
    public ArrayList<Variable> locales = new ArrayList<>();
    public String id_cap = "";
    public String nombre_cap = "";
    public String url_cap = "";
    public String titulo_cap = "";
    public int no_eje = -1;

    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }

    public Variable existe(String id){
        for (int i = 0; i < globales.size(); i++){
            if (globales.get(i).getId().equals(id)){
                return globales.get(i);
            }
        }
        for (int i = 0; i < locales.size(); i++){
            if (locales.get(i).getId().equals(id)){
                return locales.get(i);
            }
        }
        return null;
    }
    
    public void analizar_asignacion(String id, Variable var, int linea, int col){
        col ++;
        linea++;
        if (existe(id)!=null){
            Variable temporal = existe(id);
            if (temporal.getTipo()==var.getTipo()){
                Object antiguo = temporal.getValor();
                temporal.setValor(var.getValor());
                cambios.add(new Cambio(id,no_eje+1,antiguo,var.getValor()));
            } else {
                errores.add(new Errores("-","Semantico",col,linea,"La variable "+id+" es de tipo "+compatibilidad(temporal.getTipo())+" y se le intenta asignar un "+compatibilidad(var.getTipo()),"Verifica al asignar que los datos sean compatibles"));
            }
        } else {
            errores.add(new Errores("-","Semantico",col,linea,"No existe la variable que intentas crear","Crear primero la variable "+id));
        }
    }

    public void analizar_declaracion(String tipo2, String modo, ArrayList<String> ids, Variable var, int linea, int col){
        int tipo = Integer.parseInt(tipo2);
        col ++;
        linea++;
            if (var==null){
                for(int i = 0; i < ids.size(); i++){
                    if (existe(ids.get(i))!=null){
                        errores.add(new Errores("-","Semantico",col,linea,"Declaración de variable ya existente","Realiza el cambio del id de la variable"));
                    } else {
                        var.setId(ids.get(i));
                        var.setEjecucion(no_eje+1);
                        var.setTipo(tipo);
                        var.setValorNull(tipo);
                        if (modo.equalsIgnoreCase("-")){
                            var.setModo("-");
                            locales.add(var);
                        } else {
                            var.setModo("@global");
                            globales.add(var);
                        }
                    }
                }
            } else {
                for(int i = 0; i < ids.size(); i++){
                    if (existe(ids.get(i))!=null){
                        errores.add(new Errores("-","Semantico",col,linea,"Declaración de variable ya existente","Realiza el cambio del id de la variable"));
                    } else {
                        if (tipo==var.getTipo()){
                            var.setId(ids.get(i));
                            var.setEjecucion(no_eje+1);
                            if (modo.equalsIgnoreCase("-")){
                                var.setModo("-");
                                locales.add(var);
                            } else {
                                var.setModo("@global");
                                globales.add(var);
                            }
                        } else {
                            if (var.toString().contains("error")){
                                errores.add(new Errores("-","Semantico",col,linea,"La variable "+ids.get(i)+" es "+compatibilidad(tipo)+" y se le intento declarar un "+compatibilidad(var.getTipo()),"Verifica los valores ingresados"));
                            } else {
                                errores.add(new Errores("-","Semantico",col,linea,var.getValor().toString(),"Realiza el cambio del id de la variable"));
                            }
                        }
                    }
                }
            }
    }

    public String compatibilidad(int c){
        switch(c){
            case 0:
                return "integer";
            case 1:
                return "string";
            case 2:
                return "decimal";
            case 3:
                return "char";
            case 4:
                return "boolean";
            default:
                return "integer";
        }
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        String explicacion = "";
        String solucion = "";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
            explicacion = "Se esperaban alguno de los siguientes "+esperados;
            solucion = "Considera la posibilidad de reescribir la produccion que genera problema";
        } else {
            explicacion = "No es reconocido ese token en el ambito donde se encuentra";
            solucion = "Verifica que los tokens que ingreses sean permitidos en el ambito donde deseas";
        }
        errores.add(new Errores(cur_token.value.toString(),tip,cur_token.right-1,cur_token.left-1,explicacion,solucion));
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MENORQ GCIC CORCHETEA parametros_gcic MAYORQ MENORQ bloque_global FINETIQUETA GCIC MAYORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_global ::= head MENORQ body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_global ::= body MENORQ head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_global ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= BODY parametros_body MAYORQ bloque_etiquetas FINETIQUETA BODY MAYORQ 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Body temp = html.parametros_body(new Body(),e2); temp.appendChild(e1); imp(new String(temp.write().getBytes(), "UTF-8")); cuerpo = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // head ::= HEAD MAYORQ MENORQ bloque_head FINETIQUETA HEAD MAYORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_head ::= link MENORQ title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_head",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_head ::= title MENORQ link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_head",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_head ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_head",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque_etiquetas ::= bloque_etiquetas etiqueta 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_etiquetas ::= etiqueta 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta ::= MENORQ tipo_etiqueta 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("etiqueta",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_etiqueta ::= h1 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		H1 e1 = (H1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_etiqueta ::= br 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Br e1 = (Br)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_etiqueta ::= spam 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Span e1 = (Span)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_etiqueta ::= script 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Div e1 = (Div)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_etiqueta ::= input 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Input e1 = (Input)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_etiqueta ::= textarea 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Textarea e1 = (Textarea)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_etiqueta ::= select 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Select e1 = (Select)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_etiqueta ::= div 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Div e1 = (Div)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_etiqueta ::= img 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Img e1 = (Img)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_etiqueta ::= button 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Button e1 = (Button)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_etiqueta ::= p 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		P e1 = (P)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_etiqueta ::= error 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_etiqueta",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // link ::= LINK CORCHETEA HREF IGUAL COMILLAS URL COMILLAS CORCHETEC MAYORQ FINETIQUETA LINK MAYORQ 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 url_cap = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // title ::= TITLE MAYORQ tipo_string FINETIQUETA TITLE MAYORQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = "title="+e1; titulo_cap = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_string ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_string",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_string ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_string",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // colors ::= COLORES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // colors ::= HEX 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_body ::= 
            {
              String RESULT =null;
		 RESULT = "background-color: white;"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_body",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_body ::= CORCHETEA bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_body",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_button ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_button",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_button ::= lista_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_button",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_button ::= lista_button CORCHETEA tipo_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_button",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_button ::= CORCHETEA tipo_button 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_button",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_button ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_button ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_button ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_button ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_button ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_button ::= bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_button ::= onc 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_button ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_button",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // onc ::= ONC IGUAL COMILLAS PROCESS PARENTESISA PARENTESISC COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = "onclick="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onc",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_div ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_div ::= lista_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_div ::= lista_div CORCHETEA tipo_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_div",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_div ::= tipo_div 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_div",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_div ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_div ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_div ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_div ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_div ::= class2 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_div ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_div ::= bg 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_div ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_div",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bg ::= BG IGUAL COMILLAS colors COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "background-color: "+e1+";"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bg",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // class2 ::= CLASS IGUAL COMILLAS CLASE COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "class="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class2",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_gcic ::= name CORCHETEA id 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nombre_cap = e1.toString().substring(5, e1.toString().length()); id_cap = e2.toString().substring(3, e2.toString().length()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_gcic ::= id CORCHETEA name 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nombre_cap = e1.toString().substring(5, e1.toString().length()); id_cap = e2.toString().substring(3, e2.toString().length()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_img ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_img ::= lista_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_img ::= lista_img CORCHETEA tipo_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_img",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_img ::= CORCHETEA tipo_img 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_img",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_input ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_input",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_input ::= lista_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_input",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_input ::= lista_input CORCHETEA tipo_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_input",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_input ::= CORCHETEA tipo_input 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_input",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_input ::= type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_input ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_input ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_input ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_input ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_input ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_input",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_img ::= src 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_img ::= width 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_img ::= height 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_img ::= alt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_img ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_img ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_img",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_h1 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_h1 ::= lista_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_h1 ::= lista_h1 CORCHETEA tipo_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_h1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_h1 ::= CORCHETEA tipo_h1 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_h1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_h1 ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_h1 ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_h1 ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_h1 ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_h1 ::= color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_h1 ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_h1",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type ::= TYPE IGUAL COMILLAS TIPOS COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "type="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // src ::= SRC IGUAL COMILLAS tipo_url COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "src="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("src",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo_url ::= URL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_url",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipo_url ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_url",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // numerico ::= PIXELS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerico",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // numerico ::= PORC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerico",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // width ::= WIDTH IGUAL COMILLAS numerico COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "width="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("width",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // height ::= HEIGHT IGUAL COMILLAS numerico COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "height="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("height",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alt ::= ALT IGUAL COMILLAS string COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "alt="+e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alt",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // name ::= NAME IGUAL COMILLAS STRING COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "name="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // id ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "id="+e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // fts ::= FTS IGUAL COMILLAS PIXELS COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "font-size:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fts",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ftf ::= FTF IGUAL COMILLAS FUENTES COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "font-family:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftf",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // txta ::= TXTA IGUAL COMILLAS ALIGN COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "text-align:"+e1.toString()+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("txta",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color ::= COLOR IGUAL COMILLAS colors COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "color:"+e1+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // h1 ::= H1 parametros_h1 MAYORQ string FINETIQUETA H1 MAYORQ 
            {
              H1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 H1 temp = html.parametros_h1(new H1(),e1,e2); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // br ::= BR MAYORQ FINETIQUETA BR MAYORQ 
            {
              Br RESULT =null;
		 RESULT = new Br(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("br",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // img ::= IMG parametros_img MAYORQ FINETIQUETA IMG MAYORQ 
            {
              Img RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = html.parametros_img(new Img("",""), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("img",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // div ::= DIV parametros_div MAYORQ bloque_etiquetas FINETIQUETA DIV MAYORQ 
            {
              Div RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e2 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_div(new Div(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("div",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // button ::= BUTTON parametros_button MAYORQ string FINETIQUETA BUTTON MAYORQ 
            {
              Button RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_button(new Button(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("button",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // p ::= P parametros_h1 MAYORQ string FINETIQUETA P MAYORQ 
            {
              P RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_p(new P(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // spam ::= SPAM parametros_h1 MAYORQ string FINETIQUETA SPAM MAYORQ 
            {
              Span RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_spam(new Span(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spam",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // script ::= SCRIPT MAYORQ lista_metodos FINETIQUETA SCRIPT MAYORQ 
            {
              Div RESULT =null;
		 RESULT = new Div(); RESULT.appendText(escribir); escribir = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("script",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // input ::= INPUT parametros_input MAYORQ FINETIQUETA INPUT MAYORQ 
            {
              Input RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = html.parametros_input(new Input(), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // textarea ::= TEXTAREA parametros_textarea MAYORQ FINETIQUETA TEXTAREA MAYORQ 
            {
              Textarea RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = html.parametros_textarea(new Textarea("",""), e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textarea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_textarea ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_textarea ::= lista_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista_textarea ::= lista_textarea CORCHETEA tipo_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_textarea",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lista_textarea ::= CORCHETEA tipo_textarea 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_textarea",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo_textarea ::= fts 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo_textarea ::= ftf 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_textarea ::= txta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_textarea ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_textarea ::= cols 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo_textarea ::= rows 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo_textarea ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_textarea",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // rows ::= ROWS IGUAL COMILLAS NUMERO COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "rows="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rows",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cols ::= COLS IGUAL COMILLAS NUMERO COMILLAS CORCHETEC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "cols="+e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cols",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // select ::= SELECT parametros_h1 MAYORQ bloque_opciones FINETIQUETA SELECT MAYORQ 
            {
              Select RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> e2 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = html.parametros_select(new Select(),e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bloque_opciones ::= bloque_opciones opcion 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> e1 = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Option e2 = (Option)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bloque_opciones ::= opcion 
            {
              List<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Option e1 = (Option)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_opciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // opcion ::= MENORQ OPTION MAYORQ string FINETIQUETA OPTION MAYORQ 
            {
              Option RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Option temp = new Option(); temp.appendText(e1); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lista_metodos ::= lista_metodos metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lista_metodos ::= metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_metodos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // metodo ::= ONLOAD PARENTESISA PARENTESISC CORCHETEA bloque_codigo CORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // metodo ::= PROCESS PARENTESISA PARENTESISC CORCHETEA bloque_codigo2 CORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // string ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // string ::= NUMERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // bloque_codigo ::= bloque_codigo instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bloque_codigo ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // bloque_codigo2 ::= bloque_codigo2 instruccion2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bloque_codigo2 ::= instruccion2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instruccion2 ::= llamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instruccion2 ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instruccion2 ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instruccion2 ::= repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instruccion2 ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instruccion ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instruccion ::= repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instruccion ::= insert 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // if ::= IF PARENTESISA valor_boolean PARENTESISC THEN bloque_instrucciones else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // else ::= ELSE bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // repeat ::= REPEAT PARENTESISA condicion PARENTESISC HUNTIL PARENTESISA expr PARENTESISC bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condicion ::= IDENTIFICADOR IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // condicion ::= INT IDENTIFICADOR IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // while ::= WHILE PARENTESISA valor_boolean PARENTESISC THENW bloque_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bloque_instrucciones ::= INIT LLAVEA DOSP bloque_codigo DOSP LLAVEC END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // bloque_instrucciones ::= instruccion2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // insert ::= INSERT PARENTESISA lista_tokens PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insert",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // lista_tokens ::= lista_tokens COMA token 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; escribir += e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tokens",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // lista_tokens ::= token 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<String> temp = new ArrayList<>(); temp.add(e1); RESULT = temp; escribir += e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tokens",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // token ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()<5){ RESULT = var.getValor().toString(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("token",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // token ::= APOS tipo_token APOS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("token",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tipo_token ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tipo_token ::= OCHAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // tipo_token ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipo_token ::= MENORQ tipo_etiqueta 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1.write();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_token",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // llamada ::= ALERT PARENTESISA IDENTIFICADOR PARENTESISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // llamada ::= EXIT PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // declaracion ::= tipo_dato global bloque_ids asignar PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e3 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable e4 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 analizar_declaracion(e1,e2,e3,e4,e5left,e5right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // asignacion ::= IDENTIFICADOR IGUAL valor_asignar PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable e2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 analizar_asignacion(e1.toString(),e2,e3left,e3right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // asignar ::= 
            {
              Variable RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // asignar ::= IGUAL valor_asignar 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 imp(e1.getValor().toString()); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignar",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // valor_asignar ::= valor_boolean 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = new Variable(); var.setTipo((int)e1.get("tipo")); var.setValor(e1.get("valor")); RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // valor_asignar ::= ASC PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.asc(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // valor_asignar ::= DESC PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.desc(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // valor_asignar ::= FPAR PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.letpar_num(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // valor_asignar ::= FIMPAR PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.letimpar_num(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // valor_asignar ::= REVERSE PARENTESISA entre PARENTESISC 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(); RESULT.reverse(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // valor_asignar ::= FCARACTER PARENTESISA PARENTESISC 
            {
              Variable RESULT =null;
		 RESULT = new Variable(); RESULT.char_aleatorio(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // valor_asignar ::= FNUM PARENTESISA PARENTESISC 
            {
              Variable RESULT =null;
		 RESULT = new Variable(); RESULT.num_aleatorio(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // valor_asignar ::= error 
            {
              Variable RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_asignar",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // entre ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()==1){ RESULT = (String) var.getValor(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entre",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // entre ::= COMILLAS STRING COMILLAS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entre",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tipo_dato ::= INT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "0"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tipo_dato ::= STRINGD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "1"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tipo_dato ::= DECIMALD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "2"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tipo_dato ::= CHAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "3"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tipo_dato ::= BOOLEAND 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "4"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // valor_boolean ::= valor_boolean OR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_or(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // valor_boolean ::= valor_boolean AND valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_and(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // valor_boolean ::= NOT valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_not(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // valor_boolean ::= valor_boolean COMP_IGUAL valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_ii(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // valor_boolean ::= valor_boolean COMP_DIF valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_dif(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // valor_boolean ::= valor_boolean COMP_MENOR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mayor(e2,e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // valor_boolean ::= valor_boolean COMP_MAYOR valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_menor(e2,e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // valor_boolean ::= valor_boolean MENORQ valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_menor(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valor_boolean ::= valor_boolean MAYORQ valor_boolean 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mayor(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // valor_boolean ::= expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr ::= expr MAS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_suma(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr ::= expr MENOS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_resta(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr ::= expr POR expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_mult(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr ::= expr ENTRE expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e2 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_div(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr ::= MENOS expr 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tab.resultado_cambio(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr ::= dato 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr ::= PARENTESISA expr PARENTESISC 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Object> e1 = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // dato ::= COMILLAS STRING COMILLAS 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",1); temp.put("valor",e1.toString()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // dato ::= APOS OCHAR APOS 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",3); temp.put("valor",e1.toString().charAt(0)); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // dato ::= DECIMAL 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",2); temp.put("valor",Double.parseDouble(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // dato ::= NUMERO 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",0); temp.put("valor",Integer.parseInt(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // dato ::= BOOLEAN 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",4); boolean agregar = e1.toString().equalsIgnoreCase("true");  temp.put("valor",agregar); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // dato ::= IDENTIFICADOR 
            {
              HashMap<String,Object> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = existe(e1.toString()); if (var!=null) {HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",var.getTipo()); temp.put("valor",var.getValor()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; } else { RESULT = new HashMap<>(); RESULT.put("tipo",5); RESULT.put("valor","no se ha declarado la variable en la posicion "+e1left+","+e1right); }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // bloque_ids ::= bloque_ids COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.add(e2.toString()); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_ids",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // bloque_ids ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_ids",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // global ::= 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // global ::= MODO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
