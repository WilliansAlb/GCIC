// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/Analizador/Lexer.flex

package Analizador;

import java_cup.runtime.Symbol;
import org.apache.commons.lang3.StringUtils;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENT_LINE = 4;
  public static final int MULTI_COMENT = 6;
  public static final int COMENT_LINE2 = 8;
  public static final int MULTI_COMENT2 = 10;
  public static final int COMENT_LINE3 = 12;
  public static final int MULTI_COMENT3 = 14;
  public static final int TEXTO = 16;
  public static final int ETIQUETA = 18;
  public static final int CARACTER = 20;
  public static final int SCRIPTING = 22;
  public static final int PARAMETROS = 24;
  public static final int PARAMETROS2 = 26;
  public static final int TEXTO2 = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\10\25\1\26\1\27\1\30\1\31\1\32\1\7\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\45\1\64\1\0\1\65\1\0\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\7\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\15\1\1\22\1\23\16\1\1\24"+
    "\1\2\1\25\1\26\1\27\2\30\1\31\1\30\1\1"+
    "\1\32\1\1\2\30\1\33\1\30\1\1\1\34\1\1"+
    "\1\35\1\36\1\37\1\1\1\20\1\40\5\1\1\26"+
    "\1\2\1\41\1\42\1\4\1\43\1\44\1\45\1\1"+
    "\1\46\1\17\1\20\1\47\25\50\1\51\3\26\1\46"+
    "\26\50\3\26\1\52\3\26\1\46\26\50\1\34\1\41"+
    "\1\53\1\54\1\55\1\0\1\56\1\57\1\60\1\61"+
    "\11\0\1\62\22\0\1\63\11\0\1\64\3\0\1\65"+
    "\1\0\1\66\1\0\1\50\1\67\2\0\10\50\1\62"+
    "\17\50\1\26\1\46\1\26\1\70\3\26\36\50\2\0"+
    "\1\46\1\0\1\70\2\0\35\50\1\71\3\0\1\72"+
    "\10\0\1\73\20\0\1\74\16\0\1\75\4\0\1\31"+
    "\1\32\1\33\5\0\1\76\1\0\1\50\1\72\27\50"+
    "\2\26\1\46\1\77\1\100\1\26\25\50\1\101\1\50"+
    "\1\102\6\50\2\0\1\46\1\77\1\0\25\50\1\101"+
    "\1\50\1\102\6\50\1\103\4\0\1\104\3\0\1\105"+
    "\12\0\1\106\1\107\1\110\1\0\1\111\10\0\1\112"+
    "\3\0\1\113\2\0\1\114\4\0\1\115\1\0\1\116"+
    "\1\0\1\117\2\0\1\120\1\0\1\121\1\0\1\76"+
    "\1\122\3\50\1\106\1\107\1\110\1\50\1\111\7\50"+
    "\1\112\2\50\1\113\4\50\1\123\1\124\1\26\1\46"+
    "\1\26\14\50\1\125\6\50\1\126\1\50\1\124\1\0"+
    "\1\46\1\0\14\50\1\125\6\50\1\126\1\50\5\0"+
    "\1\127\2\0\1\130\22\0\1\131\2\0\1\132\1\133"+
    "\10\0\1\134\1\0\1\76\14\50\1\131\5\50\2\26"+
    "\1\46\1\135\1\136\11\50\1\26\2\50\2\0\1\46"+
    "\1\135\1\136\11\50\1\0\2\50\3\0\1\137\1\0"+
    "\1\140\1\141\1\0\1\142\3\0\1\143\2\0\1\144"+
    "\1\145\5\0\1\146\10\0\1\147\2\0\1\150\1\0"+
    "\1\76\3\50\1\144\1\145\4\50\1\146\6\50\1\150"+
    "\1\26\1\46\1\135\2\50\1\26\1\50\1\26\1\0"+
    "\1\46\1\135\2\50\1\0\1\50\1\0\1\151\3\0"+
    "\1\152\4\0\1\153\3\0\1\154\1\0\1\155\2\0"+
    "\1\123\1\156\3\0\1\157\1\160\1\0\6\50\1\154"+
    "\1\155\1\50\1\161\1\156\1\50\1\157\1\124\1\50"+
    "\2\26\1\124\1\50\4\0\1\162\1\163\1\0\1\164"+
    "\4\0\1\165\6\0\10\50\2\26\11\0\1\166\2\0"+
    "\1\167\2\0\6\50\1\166\1\50\2\26\2\0\1\170"+
    "\2\0\1\171\1\0\1\172\1\0\1\173\2\0\1\174"+
    "\1\170\3\50\1\172\2\50\2\136\1\0\1\175\2\0"+
    "\1\176\1\0\1\50\1\177\3\50\1\0\1\200\2\0"+
    "\1\50\1\200\2\50\1\0\1\201\1\0\1\50\1\201"+
    "\1\50\1\0\1\202\1\50\1\202\1\0\1\50\1\0"+
    "\1\50\1\0\1\50\2\203";

  private static int [] zzUnpackAction() {
    int [] result = new int[951];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498\0\u04ec"+
    "\0\u0540\0\u0594\0\u05e8\0\u04ec\0\u063c\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u0690\0\u06e4"+
    "\0\u04ec\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930"+
    "\0\u0984\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u04ec\0\u04ec"+
    "\0\u0b7c\0\u0bd0\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8"+
    "\0\u0e1c\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u04ec\0\u1014"+
    "\0\u04ec\0\u1068\0\u04ec\0\u04ec\0\u0540\0\u0540\0\u0594\0\u10bc"+
    "\0\u0540\0\u1110\0\u1164\0\u11b8\0\u0540\0\u120c\0\u1260\0\u12b4"+
    "\0\u1308\0\u135c\0\u04ec\0\u04ec\0\u13b0\0\u04ec\0\u04ec\0\u1404"+
    "\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u04ec\0\u1650"+
    "\0\u16a4\0\u04ec\0\u04ec\0\u04ec\0\u16f8\0\u174c\0\u17a0\0\u17f4"+
    "\0\u1848\0\u189c\0\u18f0\0\u1944\0\u1998\0\u19ec\0\u1a40\0\u1a94"+
    "\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34"+
    "\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c\0\u04ec\0\u1f80"+
    "\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124\0\u2178\0\u21cc\0\u2220"+
    "\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0"+
    "\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760"+
    "\0\u27b4\0\u04ec\0\u0540\0\u0594\0\u04ec\0\u2808\0\u285c\0\u28b0"+
    "\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50"+
    "\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0"+
    "\0\u2e44\0\u2e98\0\u2eec\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090"+
    "\0\u30e4\0\u04ec\0\u04ec\0\u04ec\0\u3138\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u318c\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384"+
    "\0\u33d8\0\u342c\0\u04ec\0\u3480\0\u34d4\0\u3528\0\u357c\0\u35d0"+
    "\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870"+
    "\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u04ec\0\u3a68\0\u3abc"+
    "\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08\0\u0540"+
    "\0\u3d5c\0\u3db0\0\u3e04\0\u04ec\0\u3e58\0\u04ec\0\u3eac\0\u1650"+
    "\0\u04ec\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8"+
    "\0\u414c\0\u41a0\0\u41f4\0\u18f0\0\u4248\0\u429c\0\u42f0\0\u4344"+
    "\0\u4398\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u1068\0\u4830"+
    "\0\u4884\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0"+
    "\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\u4d70"+
    "\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010"+
    "\0\u5064\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c\0\u52b0"+
    "\0\u5304\0\u28b0\0\u5358\0\u53ac\0\u04ec\0\u5400\0\u5454\0\u54a8"+
    "\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748"+
    "\0\u579c\0\u57f0\0\u5844\0\u5898\0\u58ec\0\u5940\0\u5994\0\u59e8"+
    "\0\u5a3c\0\u5a90\0\u5ae4\0\u5b38\0\u5b8c\0\u5be0\0\u5c34\0\u5c88"+
    "\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u04ec\0\u5e2c\0\u5e80\0\u5ed4"+
    "\0\u04ec\0\u5f28\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc\0\u6120"+
    "\0\u6174\0\u04ec\0\u61c8\0\u621c\0\u6270\0\u62c4\0\u6318\0\u636c"+
    "\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c"+
    "\0\u6660\0\u66b4\0\u04ec\0\u6708\0\u675c\0\u67b0\0\u6804\0\u6858"+
    "\0\u68ac\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50\0\u6aa4\0\u6af8"+
    "\0\u6b4c\0\u04ec\0\u6ba0\0\u6bf4\0\u6c48\0\u6c9c\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u6cf0\0\u6d44\0\u6d98\0\u6dec\0\u6e40\0\u6e40\0\u6e94"+
    "\0\u6ee8\0\u18f0\0\u6f3c\0\u6f90\0\u6fe4\0\u7038\0\u708c\0\u70e0"+
    "\0\u7134\0\u7188\0\u71dc\0\u7230\0\u7284\0\u72d8\0\u732c\0\u7380"+
    "\0\u73d4\0\u7428\0\u747c\0\u74d0\0\u7524\0\u7578\0\u75cc\0\u7620"+
    "\0\u7674\0\u76c8\0\u771c\0\u771c\0\u1068\0\u1068\0\u7770\0\u77c4"+
    "\0\u7818\0\u786c\0\u78c0\0\u7914\0\u7968\0\u79bc\0\u7a10\0\u7a64"+
    "\0\u7ab8\0\u7b0c\0\u7b60\0\u7bb4\0\u7c08\0\u7c5c\0\u7cb0\0\u7d04"+
    "\0\u7d58\0\u7dac\0\u7e00\0\u7e54\0\u2124\0\u7ea8\0\u2124\0\u7efc"+
    "\0\u7f50\0\u7fa4\0\u7ff8\0\u804c\0\u80a0\0\u80f4\0\u8148\0\u8148"+
    "\0\u04ec\0\u819c\0\u81f0\0\u8244\0\u8298\0\u82ec\0\u8340\0\u8394"+
    "\0\u83e8\0\u843c\0\u8490\0\u84e4\0\u8538\0\u858c\0\u85e0\0\u8634"+
    "\0\u8688\0\u86dc\0\u8730\0\u8784\0\u87d8\0\u882c\0\u8880\0\u29ac"+
    "\0\u88d4\0\u29ac\0\u8928\0\u897c\0\u89d0\0\u8a24\0\u8a78\0\u8acc"+
    "\0\u04ec\0\u8b20\0\u8b74\0\u8bc8\0\u8c1c\0\u04ec\0\u8c70\0\u8cc4"+
    "\0\u8d18\0\u04ec\0\u8d6c\0\u8dc0\0\u8e14\0\u8e68\0\u8ebc\0\u8f10"+
    "\0\u8f64\0\u8fb8\0\u900c\0\u9060\0\u04ec\0\u04ec\0\u04ec\0\u90b4"+
    "\0\u04ec\0\u9108\0\u915c\0\u91b0\0\u9204\0\u9258\0\u92ac\0\u9300"+
    "\0\u9354\0\u93a8\0\u93fc\0\u9450\0\u94a4\0\u04ec\0\u94f8\0\u954c"+
    "\0\u04ec\0\u95a0\0\u95f4\0\u9648\0\u969c\0\u04ec\0\u96f0\0\u04ec"+
    "\0\u9744\0\u04ec\0\u9798\0\u97ec\0\u04ec\0\u9840\0\u04ec\0\u9894"+
    "\0\u9894\0\u04ec\0\u98e8\0\u993c\0\u9990\0\u18f0\0\u18f0\0\u18f0"+
    "\0\u99e4\0\u18f0\0\u9a38\0\u9a8c\0\u9ae0\0\u9b34\0\u9b88\0\u9bdc"+
    "\0\u9c30\0\u9c84\0\u9cd8\0\u9d2c\0\u18f0\0\u9d80\0\u9dd4\0\u9e28"+
    "\0\u9e7c\0\u18f0\0\u9ed0\0\u9f24\0\u9f24\0\u9f78\0\u9fcc\0\ua020"+
    "\0\ua074\0\ua0c8\0\ua11c\0\ua170\0\ua1c4\0\ua218\0\ua26c\0\ua2c0"+
    "\0\ua314\0\ua368\0\u2124\0\ua3bc\0\ua410\0\ua464\0\ua4b8\0\ua50c"+
    "\0\ua560\0\u2124\0\ua5b4\0\ua608\0\ua65c\0\ua65c\0\ua6b0\0\ua704"+
    "\0\ua758\0\ua7ac\0\ua800\0\ua854\0\ua8a8\0\ua8fc\0\ua950\0\ua9a4"+
    "\0\ua9f8\0\uaa4c\0\uaaa0\0\u29ac\0\uaaf4\0\uab48\0\uab9c\0\uabf0"+
    "\0\uac44\0\uac98\0\u29ac\0\uacec\0\uad40\0\uad94\0\uade8\0\uae3c"+
    "\0\uae90\0\u04ec\0\uaee4\0\uaf38\0\u04ec\0\uaf8c\0\uafe0\0\ub034"+
    "\0\ub088\0\ub0dc\0\ub130\0\ub184\0\ub1d8\0\ub22c\0\ub280\0\ub2d4"+
    "\0\ub328\0\ub37c\0\ub3d0\0\ub424\0\ub478\0\ub4cc\0\ub520\0\u04ec"+
    "\0\ub574\0\ub5c8\0\u04ec\0\u04ec\0\ub61c\0\ub670\0\ub6c4\0\ub718"+
    "\0\ub76c\0\ub7c0\0\ub814\0\ub868\0\u04ec\0\ub8bc\0\ub8bc\0\ub910"+
    "\0\ub964\0\ub9b8\0\uba0c\0\uba60\0\ubab4\0\ubb08\0\ubb5c\0\ubbb0"+
    "\0\ubc04\0\ubc58\0\ubcac\0\u18f0\0\ubd00\0\ubd54\0\ubda8\0\ubdfc"+
    "\0\ube50\0\ubea4\0\ubef8\0\ubef8\0\ubf4c\0\u2124\0\ubfa0\0\ubff4"+
    "\0\uc048\0\uc09c\0\uc0f0\0\uc144\0\uc198\0\uc1ec\0\uc240\0\uc294"+
    "\0\uc2e8\0\uc33c\0\uc390\0\uc3e4\0\uc3e4\0\uc438\0\u29ac\0\uc48c"+
    "\0\uc4e0\0\uc534\0\uc588\0\uc5dc\0\uc630\0\uc684\0\uc6d8\0\uc72c"+
    "\0\uc780\0\uc7d4\0\uc828\0\uc87c\0\uc8d0\0\uc924\0\u04ec\0\uc978"+
    "\0\u04ec\0\u04ec\0\uc9cc\0\u04ec\0\uca20\0\uca74\0\ucac8\0\u04ec"+
    "\0\ucb1c\0\ucb70\0\u04ec\0\u04ec\0\ucbc4\0\ucc18\0\ucc6c\0\uccc0"+
    "\0\ucd14\0\u04ec\0\ucd68\0\ucdbc\0\uce10\0\uce64\0\uceb8\0\ucf0c"+
    "\0\ucf60\0\ucfb4\0\u04ec\0\ud008\0\ud05c\0\u04ec\0\ud0b0\0\u04ec"+
    "\0\ud104\0\ud158\0\ud1ac\0\u18f0\0\u18f0\0\ud200\0\ud254\0\ud2a8"+
    "\0\ud2fc\0\u18f0\0\ud350\0\ud3a4\0\ud3f8\0\ud44c\0\ud4a0\0\ud4f4"+
    "\0\u18f0\0\ud548\0\u1068\0\ud59c\0\ud5f0\0\ud644\0\ud698\0\ud6ec"+
    "\0\ud740\0\ud794\0\u04ec\0\ud7e8\0\ud83c\0\ud890\0\ud8e4\0\ud938"+
    "\0\ud98c\0\u04ec\0\ud9e0\0\uda34\0\uda88\0\u04ec\0\udadc\0\udb30"+
    "\0\udb84\0\udbd8\0\u04ec\0\udc2c\0\udc80\0\udcd4\0\u04ec\0\udd28"+
    "\0\u04ec\0\udd7c\0\uddd0\0\u04ec\0\u04ec\0\ude24\0\ude78\0\udecc"+
    "\0\u04ec\0\u04ec\0\udf20\0\udf74\0\udfc8\0\ue01c\0\ue070\0\ue0c4"+
    "\0\ue118\0\u18f0\0\u18f0\0\ue16c\0\u18f0\0\u18f0\0\ue1c0\0\u18f0"+
    "\0\u1068\0\ue214\0\ue268\0\ue2bc\0\u04ec\0\ue310\0\ue364\0\ue3b8"+
    "\0\ue40c\0\ue460\0\u04ec\0\u04ec\0\ue4b4\0\u04ec\0\ue508\0\ue55c"+
    "\0\ue5b0\0\ue604\0\u04ec\0\ue658\0\ue6ac\0\ue700\0\ue754\0\ue7a8"+
    "\0\ue7fc\0\ue850\0\ue8a4\0\ue8f8\0\ue94c\0\ue9a0\0\ue9f4\0\uea48"+
    "\0\uea9c\0\ueaf0\0\ueb44\0\ueb98\0\uebec\0\uec40\0\uec94\0\uece8"+
    "\0\ued3c\0\ued90\0\uede4\0\uee38\0\u04ec\0\uee8c\0\ueee0\0\u04ec"+
    "\0\uef34\0\uef88\0\uefdc\0\uf030\0\uf084\0\uf0d8\0\uf12c\0\uf180"+
    "\0\u18f0\0\uf1d4\0\uf228\0\uf27c\0\uf2d0\0\uf324\0\u04ec\0\uf378"+
    "\0\uf3cc\0\u04ec\0\uf420\0\u04ec\0\uf474\0\u04ec\0\uf4c8\0\uf51c"+
    "\0\u04ec\0\u18f0\0\uf570\0\uf5c4\0\uf618\0\u18f0\0\uf66c\0\uf6c0"+
    "\0\u1068\0\u04ec\0\uf714\0\u04ec\0\uf768\0\uf7bc\0\u04ec\0\uf810"+
    "\0\uf864\0\u18f0\0\uf8b8\0\uf90c\0\uf960\0\uf9b4\0\u04ec\0\ufa08"+
    "\0\ufa5c\0\ufab0\0\u18f0\0\ufb04\0\ufb58\0\ufbac\0\u04ec\0\ufc00"+
    "\0\ufc54\0\u18f0\0\ufca8\0\ufcfc\0\u04ec\0\ufd50\0\u18f0\0\ufda4"+
    "\0\ufdf8\0\ufe4c\0\ufea0\0\ufef4\0\uff48\0\u04ec\0\u18f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[951];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\2\21\1\22\1\23\1\24\3\20\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\20\1\33\1\20\1\34"+
    "\3\20\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\20\1\44\1\45\1\46\2\20\1\47\1\50\2\20"+
    "\1\51\1\20\1\52\1\53\1\20\1\54\1\20\1\55"+
    "\2\20\1\56\2\20\1\57\1\60\1\20\1\61\1\62"+
    "\1\63\1\64\1\20\1\65\1\66\1\67\1\70\4\20"+
    "\1\71\1\72\2\20\1\73\1\74\1\75\2\20\1\76"+
    "\3\20\1\77\1\100\1\101\5\102\1\103\116\102\1\104"+
    "\1\105\1\106\1\107\116\104\1\105\2\104\2\105\1\107"+
    "\14\104\1\110\11\104\1\20\67\104\1\105\2\104\1\105"+
    "\1\111\1\107\116\104\1\105\2\104\2\105\1\107\14\104"+
    "\1\112\11\104\1\20\67\104\1\105\1\104\1\113\1\114"+
    "\1\115\117\113\1\114\1\113\20\116\1\117\11\116\1\20"+
    "\71\116\4\120\1\121\15\120\1\20\5\120\1\122\73\120"+
    "\1\20\2\21\1\22\1\20\1\123\4\20\1\124\15\20"+
    "\1\125\1\126\1\127\3\20\1\130\25\20\1\57\1\60"+
    "\1\20\1\61\1\131\1\132\2\20\1\65\1\20\1\67"+
    "\1\133\4\20\1\71\1\72\2\20\1\73\1\134\1\75"+
    "\2\20\1\76\4\20\1\21\1\20\1\135\2\136\7\135"+
    "\1\124\15\135\1\137\3\135\30\140\3\135\32\140\1\135"+
    "\1\136\1\135\1\20\2\21\1\22\1\141\1\142\3\20"+
    "\1\25\1\143\1\27\1\30\1\31\1\32\1\144\1\33"+
    "\1\20\1\34\1\145\2\146\1\35\1\36\1\147\1\150"+
    "\1\151\1\20\1\152\1\153\1\154\1\155\1\156\2\153"+
    "\1\157\1\160\2\153\1\161\1\153\1\162\1\163\1\153"+
    "\1\164\1\153\1\165\2\153\1\166\2\153\1\57\1\60"+
    "\1\20\1\153\1\167\1\170\1\171\1\153\1\172\1\173"+
    "\1\153\1\174\11\153\1\175\1\176\6\153\1\77\1\100"+
    "\1\101\5\102\1\177\1\200\11\102\1\201\2\102\1\202"+
    "\2\203\6\102\1\204\1\205\1\206\3\205\1\207\15\205"+
    "\1\210\3\205\3\102\1\211\1\212\1\213\2\205\1\214"+
    "\1\215\1\216\1\205\1\217\1\205\1\220\1\221\1\222"+
    "\1\223\1\224\1\205\1\225\1\226\1\227\2\205\1\230"+
    "\1\205\1\231\1\205\3\102\1\232\2\233\1\234\1\232"+
    "\1\235\1\236\11\232\1\237\2\232\1\240\2\241\6\232"+
    "\1\242\1\243\1\244\3\243\1\245\15\243\1\246\3\243"+
    "\3\232\1\247\1\250\1\251\2\243\1\252\1\253\1\254"+
    "\1\243\1\255\1\243\1\256\1\257\1\260\1\261\1\262"+
    "\1\243\1\263\1\264\1\265\2\243\1\266\1\243\1\267"+
    "\1\243\1\232\1\233\1\232\12\270\1\124\7\270\1\20"+
    "\5\270\1\271\73\270\125\0\2\21\117\0\1\21\4\0"+
    "\1\22\124\0\1\272\24\0\1\273\103\0\1\274\116\0"+
    "\1\275\15\0\1\276\6\0\1\277\123\0\1\300\1\301"+
    "\166\0\1\302\75\0\1\303\5\0\1\304\102\0\1\305"+
    "\31\0\1\306\75\0\1\307\132\0\1\310\12\0\1\311"+
    "\120\0\1\312\105\0\1\313\7\0\1\314\112\0\1\315"+
    "\142\0\1\316\115\0\1\317\112\0\1\320\126\0\1\321"+
    "\123\0\1\322\162\0\1\323\110\0\1\324\15\0\1\325"+
    "\114\0\1\326\3\0\1\327\2\0\1\330\111\0\1\331"+
    "\135\0\1\332\111\0\1\333\123\0\1\334\14\0\1\335"+
    "\105\0\1\336\11\0\1\337\106\0\1\340\140\0\1\341"+
    "\124\0\1\342\126\0\1\343\1\0\1\344\104\0\1\345"+
    "\23\0\1\346\103\0\1\347\25\0\2\21\117\0\1\350"+
    "\1\0\5\102\1\0\116\102\20\0\1\351\123\0\1\352"+
    "\103\0\2\113\1\0\122\113\1\114\1\21\117\113\1\114"+
    "\1\113\20\116\1\0\11\116\1\0\71\116\20\0\1\353"+
    "\103\0\4\120\1\0\15\120\1\0\5\120\1\0\73\120"+
    "\4\0\1\354\123\0\1\355\15\0\1\356\123\0\1\276"+
    "\167\0\1\357\124\0\1\324\136\0\1\327\2\0\1\330"+
    "\110\0\1\336\141\0\1\343\13\0\12\135\1\0\15\135"+
    "\1\0\74\135\2\136\7\135\1\0\15\135\1\0\71\135"+
    "\1\136\13\135\1\0\10\135\3\360\2\135\1\0\3\135"+
    "\30\360\2\135\33\360\3\135\4\0\1\361\24\0\1\273"+
    "\113\0\1\362\123\0\1\362\1\0\3\146\102\0\1\363"+
    "\15\0\1\276\6\0\1\277\123\0\1\300\123\0\1\301"+
    "\115\0\3\153\6\0\13\153\1\364\5\153\1\365\6\153"+
    "\2\0\33\153\26\0\3\153\6\0\30\153\2\0\33\153"+
    "\26\0\3\153\6\0\1\366\27\153\2\0\1\367\32\153"+
    "\26\0\3\153\6\0\4\153\1\370\23\153\2\0\33\153"+
    "\26\0\3\153\6\0\13\153\1\371\12\153\1\372\1\153"+
    "\2\0\33\153\26\0\3\153\6\0\23\153\1\373\4\153"+
    "\2\0\33\153\26\0\3\153\6\0\5\153\1\374\7\153"+
    "\1\375\12\153\2\0\33\153\26\0\3\153\6\0\4\153"+
    "\1\376\23\153\2\0\33\153\26\0\3\153\6\0\23\153"+
    "\1\377\4\153\2\0\33\153\26\0\3\153\6\0\15\153"+
    "\1\u0100\12\153\2\0\33\153\26\0\3\153\6\0\4\153"+
    "\1\u0101\23\153\2\0\33\153\26\0\3\153\6\0\7\153"+
    "\1\u0102\20\153\2\0\33\153\26\0\3\153\6\0\7\153"+
    "\1\u0103\20\153\2\0\33\153\26\0\3\153\6\0\30\153"+
    "\2\0\17\153\1\u0104\13\153\26\0\3\153\6\0\30\153"+
    "\2\0\10\153\1\u0105\22\153\26\0\3\153\6\0\30\153"+
    "\2\0\5\153\1\u0106\25\153\26\0\3\153\6\0\30\153"+
    "\2\0\1\153\1\u0107\31\153\26\0\3\153\6\0\30\153"+
    "\2\0\5\153\1\u0108\25\153\26\0\3\153\6\0\30\153"+
    "\2\0\16\153\1\u0109\14\153\26\0\3\153\6\0\30\153"+
    "\2\0\24\153\1\u010a\6\153\26\0\3\153\6\0\30\153"+
    "\2\0\22\153\1\u010b\10\153\3\0\5\102\1\0\15\102"+
    "\3\u010c\6\102\6\u010c\25\102\6\u010c\34\102\1\0\15\102"+
    "\1\202\2\u010d\103\102\1\0\13\102\1\u010e\107\102\1\0"+
    "\2\102\1\u010f\10\102\1\u010e\1\102\3\203\60\102\1\u0110"+
    "\22\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\21\205\1\u0114\10\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\32\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\16\205\1\u0115\13\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\4\205"+
    "\1\u0116\25\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\4\205\1\u0117"+
    "\25\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\20\205\1\u0118\11\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\13\205\1\u0119\16\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\4\205\1\u011a\2\205\1\u011b\6\205"+
    "\1\u011c\13\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\24\205\1\u011d"+
    "\5\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\21\205\1\u011e\10\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\23\205\1\u011f\6\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\24\205\1\u0120\5\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\4\205\1\u0121\3\205\1\u0122\21\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\1\u0123\31\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\1\u0124\23\205\1\u0125\5\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\13\205\1\u0126\16\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\24\205\1\u0127\5\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\1\u0128"+
    "\3\205\1\u0129\3\205\1\u012a\5\205\1\u012b\13\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\1\u012c\7\205\1\u012d\21\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\4\205\1\u012e\25\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\7\205\1\u012f\22\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\4\205\1\u0130\25\205\3\102\23\0\3\u0131\6\0"+
    "\6\u0131\25\0\6\u0131\52\0\1\u0132\2\u0133\117\0\1\u0134"+
    "\112\0\1\u0135\10\0\1\u0134\1\0\3\241\60\0\1\u0136"+
    "\36\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\21\243\1\u0138\10\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\32\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\16\243\1\u0139\13\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\4\243"+
    "\1\u013a\25\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\4\243\1\u013b\25\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\20\243\1\u013c\11\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\13\243\1\u013d\16\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\4\243\1\u013e\2\243\1\u013f\6\243"+
    "\1\u0140\13\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\24\243\1\u0141\5\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\21\243\1\u0142\10\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\23\243\1\u0143\6\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\24\243\1\u0144\5\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\4\243\1\u0145"+
    "\3\243\1\u0146\21\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\1\u0147\31\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\1\u0148\23\243\1\u0149"+
    "\5\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\13\243\1\u014a\16\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\24\243\1\u014b\5\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\1\u014c"+
    "\3\243\1\u014d\3\243\1\u014e\5\243\1\u014f\13\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\1\u0150"+
    "\7\243\1\u0151\21\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\4\243\1\u0152\25\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\7\243\1\u0153"+
    "\22\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\4\243\1\u0154\25\243\3\0\12\270\1\0\7\270"+
    "\1\0\5\270\1\0\73\270\22\0\1\u0155\121\0\1\u0156"+
    "\205\0\1\u0157\61\0\1\u0158\121\0\1\u0159\141\0\1\u015a"+
    "\104\0\1\u015b\1\0\1\u015c\2\0\1\u015d\1\u015e\1\u015f"+
    "\2\0\1\u0160\2\0\1\u0161\1\u0162\1\0\1\u0163\1\u0164"+
    "\122\0\1\u0165\123\0\1\u0166\112\0\1\u0167\130\0\1\u0168"+
    "\116\0\1\u0169\10\0\1\u016a\124\0\1\u016b\115\0\1\u016c"+
    "\141\0\1\u016d\74\0\1\u016e\13\0\1\u016f\4\0\1\u0170"+
    "\103\0\1\u0171\127\0\1\u0172\171\0\1\u0173\102\0\1\u0174"+
    "\137\0\1\u0175\105\0\1\u0176\123\0\1\u0177\136\0\1\u0178"+
    "\112\0\1\u0179\136\0\1\u017a\131\0\1\u017b\110\0\1\u017c"+
    "\117\0\1\u017d\142\0\1\u017e\114\0\1\u017f\111\0\1\u0180"+
    "\147\0\1\u0181\77\0\1\u0182\142\0\1\u0183\131\0\1\u0184"+
    "\113\0\1\u0185\107\0\1\u0186\63\0\1\u0187\123\0\1\u0188"+
    "\123\0\1\u0189\111\0\1\u018a\140\0\1\u018b\1\0\1\u015c"+
    "\3\0\1\u018c\1\u015f\2\0\1\u0160\2\0\1\u0161\1\u0162"+
    "\1\0\1\u018d\1\u0164\70\0\1\u018e\2\u018f\116\0\1\u0190"+
    "\126\0\3\153\6\0\4\153\1\u0191\23\153\2\0\33\153"+
    "\26\0\3\153\6\0\2\153\1\u0192\25\153\2\0\33\153"+
    "\26\0\3\153\6\0\20\153\1\u0193\7\153\2\0\33\153"+
    "\26\0\3\153\6\0\21\153\1\u0194\6\153\2\0\33\153"+
    "\26\0\3\153\6\0\21\153\1\u0195\6\153\2\0\33\153"+
    "\26\0\3\153\6\0\21\153\1\u0196\6\153\2\0\33\153"+
    "\26\0\3\153\6\0\10\153\1\u0197\17\153\2\0\33\153"+
    "\26\0\3\153\6\0\15\153\1\u0198\12\153\2\0\33\153"+
    "\26\0\3\153\6\0\10\153\1\u0199\10\153\1\u019a\6\153"+
    "\2\0\33\153\26\0\3\153\6\0\22\153\1\u019b\5\153"+
    "\2\0\33\153\26\0\3\153\6\0\14\153\1\u019c\13\153"+
    "\2\0\33\153\26\0\3\153\6\0\30\153\2\0\1\u019d"+
    "\32\153\26\0\3\153\6\0\17\153\1\u019e\4\153\1\u019f"+
    "\3\153\2\0\33\153\26\0\3\153\6\0\4\153\1\u01a0"+
    "\23\153\2\0\33\153\26\0\3\153\6\0\10\153\1\u01a1"+
    "\17\153\2\0\33\153\26\0\3\153\6\0\30\153\2\0"+
    "\17\153\1\u01a2\13\153\26\0\3\153\6\0\30\153\2\0"+
    "\1\153\1\u01a3\31\153\26\0\3\153\6\0\30\153\2\0"+
    "\3\153\1\u01a4\27\153\26\0\3\153\6\0\30\153\2\0"+
    "\14\153\1\u01a5\16\153\26\0\3\153\6\0\30\153\2\0"+
    "\24\153\1\u01a6\6\153\26\0\3\153\6\0\30\153\2\0"+
    "\24\153\1\u01a7\6\153\26\0\3\153\6\0\30\153\2\0"+
    "\22\153\1\u01a8\10\153\26\0\3\153\6\0\30\153\2\0"+
    "\25\153\1\u01a9\5\153\3\0\5\102\1\0\15\102\3\u01aa"+
    "\6\102\6\u01aa\25\102\6\u01aa\34\102\1\0\13\102\1\u010e"+
    "\1\102\3\u010d\103\102\1\0\15\102\1\u01ab\2\u01ac\103\102"+
    "\1\0\110\102\1\u01ad\12\102\1\0\6\102\1\u01ae\114\102"+
    "\1\0\26\102\30\u01af\3\102\32\u01af\10\102\1\0\5\102"+
    "\1\u0111\7\102\3\u0113\6\102\30\u0113\2\102\33\u0113\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\10\205\1\u01b0\21\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\24\205\1\u01b1\5\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\15\205\1\u01b2\14\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\21\205\1\u01b3\10\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\24\205"+
    "\1\u01b4\5\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\1\u01b5\23\205"+
    "\1\u01b6\5\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\15\205\1\u01b7"+
    "\14\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\4\205\1\u01b8\25\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\13\205\1\u01b9\16\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\2\205\1\u01ba\27\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\1\u01bb\3\205\1\u01bc\25\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\23\205\1\u01bd\6\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\22\205\1\u01be\7\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\5\205\1\u01bf\24\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\14\205"+
    "\1\u01b6\15\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\21\205\1\u01c0"+
    "\10\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\25\205\1\u01bb\4\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\14\205\1\u01c1\15\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\10\205\1\u01c2\21\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\21\205\1\u01c3\10\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\3\205\1\u01c4\26\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\3\205\1\u01c5\26\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\6\205"+
    "\1\u01c6\23\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\26\205\1\u01c7"+
    "\3\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\15\205\1\u01c8\14\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\13\205\1\u01c9\16\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\1\u01ca\26\205\1\u01cb\2\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\10\205\1\u01cc\21\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\13\205\1\u01cd\16\205\3\102\23\0\3\u01ce"+
    "\6\0\6\u01ce\25\0\6\u01ce\50\0\1\u0134\1\0\3\u0133"+
    "\121\0\1\u01cf\2\u01d0\214\0\1\u01d1\41\0\30\u01d2\3\0"+
    "\32\u01d2\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\10\243\1\u01d3\21\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\24\243\1\u01d4\5\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\15\243"+
    "\1\u01d5\14\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\21\243\1\u01d6\10\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\24\243\1\u01d7\5\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\1\u01d8\23\243\1\u01d9\5\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\15\243\1\u01da\14\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\4\243"+
    "\1\u01db\25\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\13\243\1\u01dc\16\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\2\243\1\u01dd\27\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\1\u01de\3\243\1\u01df\25\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\23\243\1\u01e0\6\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\22\243"+
    "\1\u01e1\7\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\5\243\1\u01e2\24\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\14\243\1\u01d9\15\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\21\243\1\u01e3\10\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\25\243\1\u01de\4\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\14\243\1\u01e4"+
    "\15\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\10\243\1\u01e5\21\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\21\243\1\u01e6\10\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\3\243"+
    "\1\u01e7\26\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\3\243\1\u01e8\26\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\6\243\1\u01e9\23\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\26\243\1\u01ea\3\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\15\243\1\u01eb\14\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\13\243\1\u01ec"+
    "\16\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\1\u01ed\26\243\1\u01ee\2\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\10\243\1\u01ef\21\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\13\243\1\u01f0\16\243\23\0\1\u01f1\210\0\1\u01f2\72\0"+
    "\1\u01f3\103\0\1\u01f4\141\0\1\u01f5\1\0\1\u01f6\2\0"+
    "\1\u01f7\110\0\1\u01f8\115\0\1\u01f9\111\0\1\u01fa\13\0"+
    "\1\u01fb\133\0\1\u01fc\1\u01fd\116\0\1\u01fe\132\0\1\u01ff"+
    "\106\0\1\u0200\1\0\1\u0201\12\0\1\u0202\110\0\1\u0203"+
    "\3\0\1\u0204\115\0\1\u0205\125\0\1\u0206\141\0\1\u0207"+
    "\123\0\1\u0208\123\0\1\u0209\105\0\1\u020a\127\0\1\u020b"+
    "\6\0\1\u020c\136\0\1\u020d\104\0\1\u020e\120\0\1\u020f"+
    "\117\0\1\u0210\123\0\1\u0211\134\0\1\u0212\121\0\1\u0213"+
    "\155\0\1\u0214\124\0\1\u0215\131\0\1\u0216\124\0\1\u0217"+
    "\117\0\1\u0218\3\0\1\u0219\111\0\1\u021a\136\0\1\u021b"+
    "\51\0\1\u021c\160\0\1\u021d\122\0\1\u021e\122\0\1\u021f"+
    "\123\0\1\u0220\132\0\1\u0221\132\0\1\u0222\111\0\1\u0223"+
    "\136\0\1\u0224\104\0\1\u0225\142\0\1\u0226\31\0\1\u0227"+
    "\157\0\1\u01f6\2\0\1\u01f7\70\0\1\u01fa\137\0\1\u0201"+
    "\12\0\1\u0202\73\0\1\u0228\2\u0229\116\0\1\u022a\126\0"+
    "\3\153\6\0\20\153\1\u022b\7\153\2\0\33\153\26\0"+
    "\3\153\6\0\1\u022c\27\153\2\0\33\153\26\0\3\153"+
    "\6\0\2\153\1\u022d\25\153\2\0\33\153\26\0\3\153"+
    "\6\0\2\153\1\u022e\25\153\2\0\33\153\26\0\3\153"+
    "\6\0\4\153\1\u022f\23\153\2\0\33\153\26\0\3\153"+
    "\6\0\22\153\1\u0230\5\153\2\0\33\153\26\0\3\153"+
    "\6\0\22\153\1\u0231\5\153\2\0\33\153\26\0\3\153"+
    "\6\0\22\153\1\u0232\5\153\2\0\33\153\26\0\3\153"+
    "\6\0\4\153\1\u0233\23\153\2\0\33\153\26\0\3\153"+
    "\6\0\10\153\1\u0234\6\153\1\u0235\10\153\2\0\33\153"+
    "\26\0\3\153\6\0\30\153\2\0\1\u0236\32\153\26\0"+
    "\3\153\6\0\13\153\1\u0237\14\153\2\0\33\153\26\0"+
    "\3\153\6\0\4\153\1\u0238\23\153\2\0\33\153\26\0"+
    "\3\153\6\0\4\153\1\u0239\23\153\2\0\33\153\26\0"+
    "\3\153\6\0\15\153\1\u023a\12\153\2\0\33\153\26\0"+
    "\3\153\6\0\13\153\1\u023b\14\153\2\0\33\153\26\0"+
    "\3\153\6\0\30\153\2\0\14\153\1\u023c\16\153\26\0"+
    "\3\153\6\0\30\153\2\0\22\153\1\u023d\10\153\26\0"+
    "\3\153\6\0\30\153\2\0\11\153\1\u023e\21\153\26\0"+
    "\3\153\6\0\30\153\2\0\23\153\1\u01a9\7\153\26\0"+
    "\3\153\6\0\4\153\1\u023f\23\153\2\0\33\153\26\0"+
    "\3\153\6\0\30\153\2\0\5\153\1\u0240\25\153\26\0"+
    "\3\153\6\0\30\153\2\0\11\153\1\u0241\21\153\26\0"+
    "\3\153\6\0\30\153\2\0\5\153\1\u0242\25\153\3\0"+
    "\5\102\1\0\15\102\3\u0243\6\102\6\u0243\25\102\6\u0243"+
    "\34\102\1\0\15\102\1\u0244\2\u0245\103\102\1\0\13\102"+
    "\1\u0246\12\102\30\u01af\3\102\32\u01af\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\1\u0247\31\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\21\205"+
    "\1\u0248\10\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\4\205\1\u0249"+
    "\25\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\3\205\1\u024a\26\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\1\u01c5\31\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\2\205\1\u024b\27\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\4\205\1\u01c5\25\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\23\205\1\u024c\6\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\2\205"+
    "\1\u024d\27\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\24\205\1\u024e"+
    "\5\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\22\205\1\u024f\7\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\30\205\1\u01c5\1\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\4\205\1\u0250\25\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\17\205\1\u0251\12\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\23\205\1\u0252\6\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\23\205\1\u0253\6\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\16\205"+
    "\1\u0254\13\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\1\205\1\u0255"+
    "\30\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\25\205\1\u01b6\4\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\17\205\1\u0256\12\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\10\205\1\u0257\21\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\7\205\1\u01bf\22\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\22\205\1\u0258\7\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\25\205\1\u0259\4\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\13\205"+
    "\1\u01c5\16\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\23\205\1\u025a"+
    "\6\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\23\205\1\u01b6\6\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\13\205\1\u025b\16\205\3\102"+
    "\23\0\3\u025c\6\0\6\u025c\25\0\6\u025c\52\0\1\u025d"+
    "\2\u025e\117\0\1\u025f\12\0\30\u01d2\3\0\32\u01d2\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\1\u0260"+
    "\31\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\21\243\1\u0261\10\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\4\243\1\u0262\25\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\3\243"+
    "\1\u0263\26\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\1\u01e8\31\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\2\243\1\u0264\27\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\4\243"+
    "\1\u01e8\25\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\23\243\1\u0265\6\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\2\243\1\u0266\27\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\24\243\1\u0267\5\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\22\243\1\u0268\7\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\30\243\1\u01e8"+
    "\1\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\4\243\1\u0269\25\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\17\243\1\u026a\12\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\23\243"+
    "\1\u026b\6\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\23\243\1\u026c\6\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\16\243\1\u026d\13\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\1\243\1\u026e\30\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\25\243\1\u01d9\4\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\17\243\1\u026f"+
    "\12\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\10\243\1\u0270\21\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\7\243\1\u01e2\22\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\22\243"+
    "\1\u0271\7\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\25\243\1\u0272\4\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\13\243\1\u01e8\16\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\23\243\1\u0273\6\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\23\243\1\u01d9\6\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\13\243\1\u0274"+
    "\16\243\73\0\1\u0275\111\0\1\u0276\103\0\1\u0277\124\0"+
    "\1\u0278\142\0\1\u0279\125\0\1\u027a\107\0\1\u027b\113\0"+
    "\1\u027c\131\0\1\u027d\134\0\1\u027e\121\0\1\u027f\130\0"+
    "\1\u0280\121\0\1\u0281\116\0\1\u0282\110\0\1\u0283\151\0"+
    "\1\u0284\117\0\1\u0285\111\0\1\u0286\133\0\1\u0287\117\0"+
    "\1\u0288\107\0\1\u0289\123\0\1\u028a\141\0\1\u028b\125\0"+
    "\1\u028c\103\0\1\u028d\143\0\1\u028e\130\0\1\u028f\102\0"+
    "\1\u0290\160\0\1\u0291\121\0\1\u0292\141\0\1\u0293\122\0"+
    "\1\u0294\116\0\1\u0295\40\0\1\u0296\205\0\1\u0297\117\0"+
    "\1\u0298\122\0\1\u0299\125\0\1\u029a\130\0\1\u029b\37\0"+
    "\1\u029c\201\0\1\u029d\50\0\1\u029e\2\u029f\121\0\3\153"+
    "\6\0\22\153\1\u02a0\5\153\2\0\33\153\26\0\3\153"+
    "\6\0\2\153\1\u02a1\25\153\2\0\33\153\26\0\3\153"+
    "\6\0\20\153\1\u02a2\7\153\2\0\33\153\26\0\3\153"+
    "\6\0\10\153\1\u02a3\17\153\2\0\33\153\26\0\3\153"+
    "\6\0\20\153\1\u02a4\7\153\2\0\33\153\26\0\3\153"+
    "\6\0\14\153\1\u02a5\13\153\2\0\33\153\26\0\3\153"+
    "\6\0\1\u02a6\27\153\2\0\33\153\26\0\3\153\6\0"+
    "\1\u02a7\27\153\2\0\33\153\26\0\3\153\6\0\16\153"+
    "\1\u02a8\11\153\2\0\33\153\26\0\3\153\6\0\1\u02a9"+
    "\27\153\2\0\33\153\26\0\3\153\6\0\20\153\1\u02aa"+
    "\7\153\2\0\33\153\26\0\3\153\6\0\25\153\1\u02ab"+
    "\2\153\2\0\33\153\26\0\3\153\6\0\4\153\1\u02ac"+
    "\23\153\2\0\33\153\26\0\3\153\6\0\30\153\2\0"+
    "\5\153\1\u02ad\25\153\26\0\3\153\6\0\30\153\2\0"+
    "\15\153\1\u02ae\15\153\26\0\3\153\6\0\30\153\2\0"+
    "\14\153\1\u02af\16\153\26\0\3\153\6\0\30\153\2\0"+
    "\7\153\1\u02b0\23\153\26\0\3\153\6\0\30\153\2\0"+
    "\16\153\1\u02b1\14\153\3\0\5\102\1\0\15\102\3\u02b2"+
    "\6\102\6\u02b2\25\102\6\u02b2\34\102\1\0\15\102\1\u02b3"+
    "\2\u02b4\103\102\1\0\26\102\30\u02b5\3\102\32\u02b5\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\13\205\1\u02b6\16\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\10\205\1\u02b7\21\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\25\205\1\u02b8\4\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\1\u02b9\31\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\12\205\1\u01c5"+
    "\17\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\4\205\1\u02ba\25\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\12\205\1\u02bb\17\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\14\205\1\u02bc\15\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\10\205\1\u01b4\21\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\15\205\1\u01c5\14\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\22\205\1\u02bd\7\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\10\205"+
    "\1\u02be\21\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\16\205\1\u0250"+
    "\13\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\4\205\1\u02bf\25\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\13\205\1\u01b6\16\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\16\205\1\u025a\13\205\10\102\1\0"+
    "\5\102\1\u0111\4\102\1\u02c0\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\32\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\4\205\1\u02c1\25\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\16\205"+
    "\1\u02c2\13\205\3\102\23\0\3\u02c3\6\0\6\u02c3\25\0"+
    "\6\u02c3\52\0\1\u02c4\2\u02c5\132\0\30\u02c6\3\0\32\u02c6"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\13\243\1\u02c7\16\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\10\243\1\u02c8\21\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\25\243\1\u02c9"+
    "\4\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\1\u02ca\31\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\12\243\1\u01e8\17\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\4\243\1\u02cb"+
    "\25\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\12\243\1\u02cc\17\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\14\243\1\u02cd\15\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\10\243"+
    "\1\u01d7\21\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\15\243\1\u01e8\14\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\22\243\1\u02ce\7\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\10\243\1\u02cf\21\243\24\0\1\u0137\1\0\3\153\6\0"+
    "\30\243\2\0\1\153\16\243\1\u0269\13\243\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\4\243\1\u02d0"+
    "\25\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\13\243\1\u01d9\16\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\16\243\1\u0273\13\243\23\0"+
    "\1\u02d1\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\32\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\4\243\1\u02d2\25\243\24\0\1\u0137\1\0\3\153"+
    "\6\0\30\243\2\0\1\153\16\243\1\u02d3\13\243\72\0"+
    "\1\u02d4\122\0\1\u02d5\113\0\1\u02d6\130\0\1\u02d7\116\0"+
    "\1\u02d8\103\0\1\u02d9\124\0\1\u02da\143\0\1\u02db\112\0"+
    "\1\u02dc\121\0\1\u02dd\123\0\1\u02de\117\0\1\u02df\133\0"+
    "\1\u02e0\131\0\1\u02e1\114\0\1\u02e2\123\0\1\u02e3\132\0"+
    "\1\u02e4\120\0\1\u02e5\124\0\1\u02e6\116\0\1\u02e7\110\0"+
    "\1\u02e8\127\0\1\u02e9\141\0\1\u02ea\122\0\1\u02eb\111\0"+
    "\1\u02ec\170\0\1\u02ed\102\0\1\u02ee\123\0\1\u02ef\130\0"+
    "\1\u02f0\14\0\1\u02f1\105\0\1\u02f2\142\0\1\u02f3\104\0"+
    "\1\u02f4\121\0\1\u02f5\127\0\1\u02f6\115\0\1\u02f7\60\0"+
    "\2\u02f8\121\0\3\153\6\0\30\153\2\0\1\u02f9\32\153"+
    "\26\0\3\153\6\0\22\153\1\u02fa\5\153\2\0\33\153"+
    "\26\0\3\153\6\0\10\153\1\u02fb\17\153\2\0\33\153"+
    "\26\0\3\153\6\0\13\153\1\u02fc\14\153\2\0\33\153"+
    "\26\0\3\153\6\0\22\153\1\u02fd\5\153\2\0\33\153"+
    "\26\0\3\153\6\0\17\153\1\u02fe\10\153\2\0\33\153"+
    "\26\0\3\153\6\0\20\153\1\u02ff\7\153\2\0\33\153"+
    "\26\0\3\153\6\0\13\153\1\u0300\14\153\2\0\33\153"+
    "\26\0\3\153\6\0\1\u0301\27\153\2\0\33\153\26\0"+
    "\3\153\6\0\22\153\1\u0302\5\153\2\0\33\153\26\0"+
    "\3\153\6\0\21\153\1\u0303\6\153\2\0\33\153\26\0"+
    "\3\153\6\0\7\153\1\u0304\20\153\2\0\33\153\26\0"+
    "\3\153\6\0\30\153\2\0\1\153\1\u0305\31\153\26\0"+
    "\3\153\6\0\30\153\2\0\1\153\1\u0306\31\153\26\0"+
    "\3\153\6\0\30\153\2\0\5\153\1\u0307\25\153\26\0"+
    "\3\153\6\0\30\153\2\0\5\153\1\u0308\25\153\26\0"+
    "\3\153\6\0\30\153\2\0\7\153\1\u0309\23\153\3\0"+
    "\5\102\1\0\15\102\3\u030a\6\102\6\u030a\25\102\6\u030a"+
    "\34\102\1\0\16\102\2\u030b\102\102\1\u02b5\1\0\15\u02b5"+
    "\1\102\2\u030c\2\u02b5\1\102\1\u02b5\1\102\66\u02b5\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\4\205\1\u030d\25\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\1\u02b6\31\205\10\102\1\0\5\102\1\u0111"+
    "\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113"+
    "\15\205\1\u02b8\14\205\10\102\1\0\5\102\1\u0111\5\102"+
    "\1\u0112\1\102\3\u0113\6\102\30\205\2\102\1\u0113\21\205"+
    "\1\u0253\10\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\1\205\1\u030e"+
    "\30\205\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102"+
    "\3\u0113\6\102\30\205\2\102\1\u0113\15\205\1\u01c7\14\205"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\1\u030f\5\102\30\205\2\102\1\u0113\32\205\10\102\1\0"+
    "\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205"+
    "\2\102\1\u0113\5\205\1\u0310\24\205\10\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\21\205\1\u025a\10\205\10\102\1\0\103\102\1\u0311"+
    "\17\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\21\205\1\u01c5\10\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\26\205\1\u01c5\3\205\3\102\23\0"+
    "\3\u0312\6\0\6\u0312\25\0\6\u0312\53\0\2\u0313\102\0"+
    "\1\u02c6\1\0\15\u02c6\1\0\2\u0314\2\u02c6\1\0\1\u02c6"+
    "\1\0\66\u02c6\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\4\243\1\u0315\25\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\1\u02c7\31\243\24\0"+
    "\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153\15\243"+
    "\1\u02c9\14\243\24\0\1\u0137\1\0\3\153\6\0\30\243"+
    "\2\0\1\153\21\243\1\u026c\10\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\1\243\1\u0316\30\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\15\243\1\u01ea\14\243\24\0\1\u0137\1\0\3\153\1\u0317"+
    "\5\0\30\243\2\0\1\153\32\243\24\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\5\243\1\u0318\24\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\21\243\1\u0273\10\243\114\0\1\u0319\33\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\21\243\1\u01e8\10\243"+
    "\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0\1\153"+
    "\26\243\1\u01e8\3\243\105\0\1\u031a\65\0\1\u031b\117\0"+
    "\1\u031c\135\0\1\u031d\127\0\1\u031e\117\0\1\u031f\124\0"+
    "\1\u0320\106\0\1\u0321\121\0\1\u0322\127\0\1\u0323\117\0"+
    "\1\u0324\155\0\1\u0325\75\0\1\u0326\122\0\1\u0327\122\0"+
    "\1\u0328\125\0\1\u0329\127\0\1\u032a\164\0\1\u032b\122\0"+
    "\1\u032c\121\0\1\u032d\110\0\1\u032e\133\0\1\u032f\127\0"+
    "\1\u0330\130\0\1\u0331\114\0\1\u0332\124\0\1\u0333\44\0"+
    "\3\153\6\0\10\153\1\u0334\17\153\2\0\33\153\26\0"+
    "\3\153\6\0\4\153\1\u0335\23\153\2\0\33\153\26\0"+
    "\3\153\6\0\17\153\1\u0336\10\153\2\0\33\153\26\0"+
    "\3\153\6\0\1\u0337\27\153\2\0\33\153\26\0\3\153"+
    "\6\0\30\153\2\0\1\u0338\32\153\26\0\3\153\6\0"+
    "\4\153\1\u0339\23\153\2\0\33\153\26\0\3\153\6\0"+
    "\3\153\1\u033a\24\153\2\0\33\153\26\0\3\153\6\0"+
    "\4\153\1\u033b\23\153\2\0\33\153\26\0\3\153\6\0"+
    "\10\153\1\u033c\17\153\2\0\33\153\26\0\3\153\6\0"+
    "\30\153\2\0\16\153\1\u033d\14\153\26\0\3\153\6\0"+
    "\30\153\2\0\14\153\1\u033e\16\153\26\0\3\153\6\0"+
    "\30\153\2\0\15\153\1\u033f\15\153\26\0\3\153\6\0"+
    "\30\153\2\0\22\153\1\u0340\10\153\3\0\5\102\1\0"+
    "\15\102\3\u0341\6\102\6\u0341\25\102\6\u0341\33\102\1\u02b5"+
    "\1\0\15\u02b5\3\u030c\2\u02b5\1\102\1\u02b5\1\102\66\u02b5"+
    "\10\102\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113"+
    "\6\102\30\205\2\102\1\u0113\21\205\1\u02b6\10\205\10\102"+
    "\1\0\5\102\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102"+
    "\30\205\2\102\1\u0113\16\205\1\u0342\13\205\10\102\1\0"+
    "\14\102\1\u0343\106\102\1\0\5\102\1\u0111\5\102\1\u0112"+
    "\1\102\3\u0113\6\102\30\205\2\102\1\u0113\30\205\1\u0253"+
    "\1\205\10\102\1\0\65\102\1\u0344\30\102\23\0\3\u0345"+
    "\6\0\6\u0345\25\0\6\u0345\33\0\1\u02c6\1\0\15\u02c6"+
    "\3\u0314\2\u02c6\1\0\1\u02c6\1\0\66\u02c6\24\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\21\243\1\u02c7"+
    "\10\243\24\0\1\u0137\1\0\3\153\6\0\30\243\2\0"+
    "\1\153\16\243\1\u0346\13\243\25\0\1\u0347\122\0\1\u0137"+
    "\1\0\3\153\6\0\30\243\2\0\1\153\30\243\1\u026c"+
    "\1\243\76\0\1\u0348\101\0\1\u0349\126\0\1\u034a\120\0"+
    "\1\u034b\123\0\1\u034c\130\0\1\u034d\123\0\1\u034e\121\0"+
    "\1\u034f\123\0\1\u0350\120\0\1\u0351\106\0\1\u0352\145\0"+
    "\1\u0353\114\0\1\u0354\167\0\1\u0355\113\0\1\u0356\140\0"+
    "\1\u0357\76\0\1\u0358\127\0\1\u0359\47\0\3\153\6\0"+
    "\15\153\1\u035a\12\153\2\0\33\153\26\0\3\153\6\0"+
    "\20\153\1\u035b\7\153\2\0\33\153\26\0\3\153\6\0"+
    "\22\153\1\u035c\5\153\2\0\33\153\26\0\3\153\6\0"+
    "\20\153\1\u035d\7\153\2\0\33\153\26\0\3\153\6\0"+
    "\15\153\1\u035e\12\153\2\0\33\153\26\0\3\153\6\0"+
    "\1\u035f\27\153\2\0\33\153\26\0\3\153\6\0\13\153"+
    "\1\u0360\14\153\2\0\33\153\26\0\3\153\6\0\30\153"+
    "\2\0\5\153\1\u0361\25\153\3\0\5\102\1\0\5\102"+
    "\1\u0111\5\102\1\u0112\1\102\3\u0113\6\102\30\205\2\102"+
    "\1\u0113\27\205\1\u025a\2\205\10\102\1\0\14\102\1\u0362"+
    "\106\102\1\0\102\102\1\u0363\13\102\21\0\1\u0137\1\0"+
    "\3\153\6\0\30\243\2\0\1\153\27\243\1\u0273\2\243"+
    "\25\0\1\u0364\211\0\1\u0365\54\0\1\u0366\150\0\1\u0367"+
    "\101\0\1\u0368\117\0\1\u0369\151\0\1\u036a\114\0\1\u036b"+
    "\122\0\1\u036c\105\0\1\u036d\167\0\1\u036e\116\0\1\u036f"+
    "\117\0\1\u0370\134\0\1\u0371\114\0\1\u0372\51\0\3\153"+
    "\6\0\5\153\1\u0373\22\153\2\0\33\153\26\0\3\153"+
    "\6\0\30\153\2\0\1\u0374\32\153\26\0\3\153\6\0"+
    "\10\153\1\u0375\17\153\2\0\33\153\26\0\3\153\6\0"+
    "\30\153\2\0\1\u0376\32\153\26\0\3\153\6\0\23\153"+
    "\1\u0377\4\153\2\0\33\153\26\0\3\153\6\0\22\153"+
    "\1\u0378\5\153\2\0\33\153\26\0\3\153\6\0\4\153"+
    "\1\u0379\23\153\2\0\33\153\26\0\3\153\6\0\30\153"+
    "\2\0\16\153\1\u037a\14\153\3\0\5\102\1\0\26\102"+
    "\30\u037b\3\102\32\u037b\10\102\1\0\71\102\1\u037c\24\102"+
    "\34\0\30\u037d\3\0\32\u037d\102\0\1\u037e\76\0\1\u037f"+
    "\105\0\1\u0380\140\0\1\u0381\106\0\1\u0382\140\0\1\u0383"+
    "\122\0\1\u0384\125\0\1\u0385\143\0\1\u0386\133\0\1\u0387"+
    "\133\0\1\u0388\115\0\1\u0389\42\0\3\153\6\0\16\153"+
    "\1\u038a\11\153\2\0\33\153\26\0\3\153\6\0\1\u038b"+
    "\27\153\2\0\33\153\26\0\3\153\6\0\15\153\1\u038c"+
    "\12\153\2\0\33\153\26\0\3\153\6\0\15\153\1\u038d"+
    "\12\153\2\0\33\153\26\0\3\153\6\0\14\153\1\u038e"+
    "\13\153\2\0\33\153\26\0\3\153\6\0\16\153\1\u038f"+
    "\11\153\2\0\33\153\26\0\3\153\6\0\30\153\2\0"+
    "\24\153\1\u0390\6\153\3\0\5\102\1\0\13\102\1\u0112"+
    "\12\102\30\u037b\3\102\32\u037b\10\102\1\0\66\102\1\u0391"+
    "\27\102\21\0\1\u0137\12\0\30\u037d\3\0\32\u037d\77\0"+
    "\1\u0392\76\0\1\u0393\116\0\1\u0394\140\0\1\u0395\120\0"+
    "\1\u0396\166\0\1\u0397\41\0\1\u0398\111\0\3\153\6\0"+
    "\13\153\1\u0399\14\153\2\0\33\153\26\0\3\153\6\0"+
    "\6\153\1\u039a\21\153\2\0\33\153\26\0\3\153\6\0"+
    "\23\153\1\u039b\4\153\2\0\33\153\26\0\3\153\6\0"+
    "\20\153\1\u039c\7\153\2\0\33\153\26\0\3\153\6\0"+
    "\1\153\1\u039d\26\153\2\0\33\153\43\0\1\u039e\133\0"+
    "\1\u039f\117\0\1\u03a0\176\0\1\u03a1\27\0\3\153\6\0"+
    "\4\153\1\u03a2\23\153\2\0\33\153\26\0\3\153\6\0"+
    "\14\153\1\u03a3\13\153\2\0\33\153\26\0\3\153\6\0"+
    "\10\153\1\u03a4\17\153\2\0\33\153\26\0\3\153\6\0"+
    "\30\153\2\0\31\153\1\u03a5\1\153\37\0\1\u03a6\141\0"+
    "\1\u03a7\115\0\1\u03a8\102\0\3\153\6\0\1\u03a9\27\153"+
    "\2\0\33\153\26\0\3\153\6\0\16\153\1\u03aa\11\153"+
    "\2\0\33\153\26\0\3\153\6\0\10\153\1\u03ab\17\153"+
    "\2\0\33\153\61\0\1\u03ac\137\0\1\u03ad\54\0\3\153"+
    "\6\0\22\153\1\u03ae\5\153\2\0\33\153\26\0\3\153"+
    "\6\0\30\153\2\0\4\153\1\u03af\26\153\55\0\1\u03b0"+
    "\74\0\3\153\6\0\16\153\1\u03b1\11\153\2\0\33\153"+
    "\57\0\1\u03b2\72\0\3\153\6\0\20\153\1\u03b3\7\153"+
    "\2\0\33\153\47\0\1\u03b4\102\0\3\153\6\0\10\153"+
    "\1\u03b5\17\153\2\0\33\153\55\0\1\u03b6\74\0\3\153"+
    "\6\0\16\153\1\u03b7\11\153\2\0\33\153\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65436];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\3\1\1\11\1\1\11\11\2\1\1\11"+
    "\15\1\2\11\16\1\1\11\1\1\1\11\1\1\2\11"+
    "\16\1\2\11\1\1\2\11\7\1\1\11\2\1\3\11"+
    "\32\1\1\11\32\1\1\11\2\1\1\11\34\1\3\11"+
    "\1\0\4\11\11\0\1\11\22\0\1\11\11\0\1\1"+
    "\3\0\1\11\1\0\1\11\1\0\1\1\1\11\2\0"+
    "\75\1\2\0\1\1\1\0\1\11\2\0\35\1\1\11"+
    "\3\0\1\11\10\0\1\11\20\0\1\11\16\0\1\11"+
    "\4\0\3\11\5\0\1\1\1\0\75\1\2\0\1\1"+
    "\1\11\1\0\36\1\1\11\4\0\1\11\3\0\1\11"+
    "\12\0\3\11\1\0\1\11\10\0\1\1\3\0\1\11"+
    "\2\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\1\1\11\62\1"+
    "\1\0\1\1\1\0\25\1\5\0\1\11\2\0\1\11"+
    "\22\0\1\11\2\0\2\11\10\0\1\11\1\0\44\1"+
    "\2\0\14\1\1\0\2\1\3\0\1\11\1\0\2\11"+
    "\1\0\1\11\3\0\1\11\2\0\2\11\5\0\1\11"+
    "\10\0\1\11\2\0\1\11\1\0\1\11\31\1\1\0"+
    "\1\11\3\1\1\0\1\1\1\0\1\11\3\0\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\1\11\2\0\2\11"+
    "\3\0\2\11\1\0\21\1\1\11\1\1\4\0\2\11"+
    "\1\0\1\11\4\0\1\11\6\0\12\1\11\0\1\11"+
    "\2\0\1\11\2\0\12\1\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\10\1\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\5\1\1\0\1\11"+
    "\2\0\4\1\1\0\1\11\1\0\3\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[951];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERRORLEX,yycolumn,yyline,yytext());
            }
            // fall through
          case 132: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 133: break;
          case 3:
            { /*ignore*/
            }
            // fall through
          case 134: break;
          case 4:
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 5:
            { yybegin(PARAMETROS); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 136: break;
          case 6:
            { return new Symbol(sym.APOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 137: break;
          case 7:
            { return new Symbol(sym.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 138: break;
          case 8:
            { return new Symbol(sym.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 139: break;
          case 9:
            { return new Symbol(sym.POR, yycolumn, yyline, yytext());
            }
            // fall through
          case 140: break;
          case 10:
            { return new Symbol(sym.MAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 141: break;
          case 11:
            { return new Symbol(sym.MENOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 142: break;
          case 12:
            { return new Symbol(sym.ENTRE, yycolumn, yyline, yytext());
            }
            // fall through
          case 143: break;
          case 13:
            { return new Symbol(sym.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 144: break;
          case 14:
            { return new Symbol(sym.PUNTOC, yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 15:
            { return new Symbol(sym.MENORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 146: break;
          case 16:
            { return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 147: break;
          case 17:
            { yybegin(TEXTO); return new Symbol(sym.MAYORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 148: break;
          case 18:
            { return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 149: break;
          case 19:
            { return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 150: break;
          case 20:
            { return new Symbol(sym.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 21:
            { return new Symbol(sym.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 152: break;
          case 22:
            { return new Symbol(sym.STRING, yycolumn, yyline, yytext());
            }
            // fall through
          case 153: break;
          case 23:
            { yybegin(SCRIPTING); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 154: break;
          case 24:
            { 
            }
            // fall through
          case 155: break;
          case 25:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 156: break;
          case 26:
            { yybegin(SCRIPTING);
            }
            // fall through
          case 157: break;
          case 27:
            { yybegin(TEXTO);
            }
            // fall through
          case 158: break;
          case 28:
            { if (!StringUtils.isBlank(yytext())) return new Symbol(sym.STRING, yycolumn, yyline, yytext());
            }
            // fall through
          case 159: break;
          case 29:
            { yybegin(YYINITIAL); return new Symbol(sym.MENORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 30:
            { yybegin(PARAMETROS2); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 31:
            { yybegin(SCRIPTING); return new Symbol(sym.APOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 162: break;
          case 32:
            { yybegin(TEXTO2);return new Symbol(sym.MAYORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 163: break;
          case 33:
            { yybegin(ETIQUETA); return new Symbol(sym.MENORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 164: break;
          case 34:
            { return new Symbol(sym.OCHAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 165: break;
          case 35:
            { yybegin(STRING); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 166: break;
          case 36:
            { yybegin(CARACTER); return new Symbol(sym.APOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 167: break;
          case 37:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 168: break;
          case 38:
            { return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 169: break;
          case 39:
            { return new Symbol(sym.MAYORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 170: break;
          case 40:
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 171: break;
          case 41:
            { yybegin(YYINITIAL); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 172: break;
          case 42:
            { yybegin(ETIQUETA); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 173: break;
          case 43:
            { yybegin(COMENT_LINE);
            }
            // fall through
          case 174: break;
          case 44:
            { return new Symbol(sym.COMP_DIF, yycolumn, yyline, yytext());
            }
            // fall through
          case 175: break;
          case 45:
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
            // fall through
          case 176: break;
          case 46:
            { return new Symbol(sym.FINETIQUETA, yycolumn, yyline, yytext());
            }
            // fall through
          case 177: break;
          case 47:
            { return new Symbol(sym.COMP_MENOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 178: break;
          case 48:
            { return new Symbol(sym.COMP_IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 179: break;
          case 49:
            { return new Symbol(sym.COMP_MAYOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 180: break;
          case 50:
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
            // fall through
          case 181: break;
          case 51:
            { return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
            // fall through
          case 182: break;
          case 52:
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
            // fall through
          case 183: break;
          case 53:
            { yybegin(COMENT_LINE3);
            }
            // fall through
          case 184: break;
          case 54:
            { yybegin(YYINITIAL); return new Symbol(sym.FINETIQUETA, yycolumn, yyline, yytext());
            }
            // fall through
          case 185: break;
          case 55:
            { yybegin(COMENT_LINE2);
            }
            // fall through
          case 186: break;
          case 56:
            { return new Symbol(sym.PORC, yycolumn, yyline, yytext());
            }
            // fall through
          case 187: break;
          case 57:
            { yybegin(ETIQUETA); return new Symbol(sym.FINETIQUETA, yycolumn, yyline, yytext());
            }
            // fall through
          case 188: break;
          case 58:
            { return new Symbol(sym.ASC, yycolumn, yyline, yytext());
            }
            // fall through
          case 189: break;
          case 59:
            { return new Symbol(sym.P, yycolumn, yyline, yytext());
            }
            // fall through
          case 190: break;
          case 60:
            { return new Symbol(sym.ALT, yycolumn, yyline, yytext());
            }
            // fall through
          case 191: break;
          case 61:
            { return new Symbol(sym.SRC, yycolumn, yyline, yytext());
            }
            // fall through
          case 192: break;
          case 62:
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 193: break;
          case 63:
            { return new Symbol(sym.PIXELS, yycolumn, yyline, yytext());
            }
            // fall through
          case 194: break;
          case 64:
            { return new Symbol(sym.PROCESS, yycolumn, yyline, yytext());
            }
            // fall through
          case 195: break;
          case 65:
            { return new Symbol(sym.COLORES, yycolumn, yyline, yytext());
            }
            // fall through
          case 196: break;
          case 66:
            { return new Symbol(sym.CLASE, yycolumn, yyline, yytext());
            }
            // fall through
          case 197: break;
          case 67:
            { yybegin(MULTI_COMENT);
            }
            // fall through
          case 198: break;
          case 68:
            { return new Symbol(sym.BR, yycolumn, yyline, yytext());
            }
            // fall through
          case 199: break;
          case 69:
            { return new Symbol(sym.H1, yycolumn, yyline, yytext());
            }
            // fall through
          case 200: break;
          case 70:
            { return new Symbol(sym.DESC, yycolumn, yyline, yytext());
            }
            // fall through
          case 201: break;
          case 71:
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 202: break;
          case 72:
            { return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
            // fall through
          case 203: break;
          case 73:
            { return new Symbol(sym.INIT, yycolumn, yyline, yytext());
            }
            // fall through
          case 204: break;
          case 74:
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
            // fall through
          case 205: break;
          case 75:
            { return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 206: break;
          case 76:
            { return new Symbol(sym.COLS, yycolumn, yyline, yytext());
            }
            // fall through
          case 207: break;
          case 77:
            { return new Symbol(sym.HREF, yycolumn, yyline, yytext());
            }
            // fall through
          case 208: break;
          case 78:
            { return new Symbol(sym.NAME, yycolumn, yyline, yytext());
            }
            // fall through
          case 209: break;
          case 79:
            { return new Symbol(sym.ROWS, yycolumn, yyline, yytext());
            }
            // fall through
          case 210: break;
          case 80:
            { return new Symbol(sym.TYPE, yycolumn, yyline, yytext());
            }
            // fall through
          case 211: break;
          case 81:
            { yybegin(MULTI_COMENT3);
            }
            // fall through
          case 212: break;
          case 82:
            { yybegin(MULTI_COMENT2);
            }
            // fall through
          case 213: break;
          case 83:
            { return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            }
            // fall through
          case 214: break;
          case 84:
            { return new Symbol(sym.HEX, yycolumn, yyline, yytext());
            }
            // fall through
          case 215: break;
          case 85:
            { return new Symbol(sym.ALIGN, yycolumn, yyline, yytext());
            }
            // fall through
          case 216: break;
          case 86:
            { return new Symbol(sym.TIPOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 217: break;
          case 87:
            { return new Symbol(sym.DIV,yycolumn,yyline,yytext());
            }
            // fall through
          case 218: break;
          case 88:
            { return new Symbol(sym.IMG,yycolumn,yyline,yytext());
            }
            // fall through
          case 219: break;
          case 89:
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
            // fall through
          case 220: break;
          case 90:
            { return new Symbol(sym.CLASS, yycolumn, yyline, yytext());
            }
            // fall through
          case 221: break;
          case 91:
            { return new Symbol(sym.COLOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 222: break;
          case 92:
            { return new Symbol(sym.WIDTH, yycolumn, yyline, yytext());
            }
            // fall through
          case 223: break;
          case 93:
            { return new Symbol(sym.URL, yycolumn, yyline, yytext());
            }
            // fall through
          case 224: break;
          case 94:
            { return new Symbol(sym.FUENTES, yycolumn, yyline, yytext());
            }
            // fall through
          case 225: break;
          case 95:
            { return new Symbol(sym.BODY, yycolumn, yyline, yytext());
            }
            // fall through
          case 226: break;
          case 96:
            { return new Symbol(sym.GCIC, yycolumn, yyline, yytext());
            }
            // fall through
          case 227: break;
          case 97:
            { return new Symbol(sym.HEAD, yycolumn, yyline, yytext());
            }
            // fall through
          case 228: break;
          case 98:
            { return new Symbol(sym.LINK, yycolumn, yyline, yytext());
            }
            // fall through
          case 229: break;
          case 99:
            { return new Symbol(sym.SPAM, yycolumn, yyline, yytext());
            }
            // fall through
          case 230: break;
          case 100:
            { return new Symbol(sym.HUNTIL, yycolumn, yyline, yytext());
            }
            // fall through
          case 231: break;
          case 101:
            { return new Symbol(sym.INSERT, yycolumn, yyline, yytext());
            }
            // fall through
          case 232: break;
          case 102:
            { return new Symbol(sym.REPEAT, yycolumn, yyline, yytext());
            }
            // fall through
          case 233: break;
          case 103:
            { return new Symbol(sym.HEIGHT, yycolumn, yyline, yytext());
            }
            // fall through
          case 234: break;
          case 104:
            { return new Symbol(sym.STRINGD, yycolumn, yyline, yytext());
            }
            // fall through
          case 235: break;
          case 105:
            { return new Symbol(sym.MODO, yycolumn, yyline, yytext());
            }
            // fall through
          case 236: break;
          case 106:
            { return new Symbol(sym.INPUT, yycolumn, yyline, yytext());
            }
            // fall through
          case 237: break;
          case 107:
            { return new Symbol(sym.TITLE, yycolumn, yyline, yytext());
            }
            // fall through
          case 238: break;
          case 108:
            { return new Symbol(sym.ONLOAD, yycolumn, yyline, yytext());
            }
            // fall through
          case 239: break;
          case 109:
            { return new Symbol(sym.REVERSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 240: break;
          case 110:
            { return new Symbol(sym.DECIMALD, yycolumn, yyline, yytext());
            }
            // fall through
          case 241: break;
          case 111:
            { return new Symbol(sym.INT, yycolumn, yyline, yytext());
            }
            // fall through
          case 242: break;
          case 112:
            { return new Symbol(sym.ONC, yycolumn, yyline, yytext());
            }
            // fall through
          case 243: break;
          case 113:
            { return new Symbol(sym.BOOLEAND, yycolumn, yyline, yytext());
            }
            // fall through
          case 244: break;
          case 114:
            { return new Symbol(sym.BUTTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 245: break;
          case 115:
            { return new Symbol(sym.OPTION,yycolumn,yyline,yytext());
            }
            // fall through
          case 246: break;
          case 116:
            { return new Symbol(sym.SELECT,yycolumn,yyline,yytext());
            }
            // fall through
          case 247: break;
          case 117:
            { return new Symbol(sym.REDIRECT, yycolumn, yyline, yytext());
            }
            // fall through
          case 248: break;
          case 118:
            { return new Symbol(sym.THENW, yycolumn, yyline, yytext());
            }
            // fall through
          case 249: break;
          case 119:
            { return new Symbol(sym.FTS, yycolumn, yyline, yytext());
            }
            // fall through
          case 250: break;
          case 120:
            { return new Symbol(sym.ALERT, yycolumn, yyline, yytext());
            }
            // fall through
          case 251: break;
          case 121:
            { return new Symbol(sym.TEXTAREA, yycolumn, yyline, yytext());
            }
            // fall through
          case 252: break;
          case 122:
            { return new Symbol(sym.FPAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 253: break;
          case 123:
            { return new Symbol(sym.BG, yycolumn, yyline, yytext());
            }
            // fall through
          case 254: break;
          case 124:
            { return new Symbol(sym.TXTA, yycolumn, yyline, yytext());
            }
            // fall through
          case 255: break;
          case 125:
            { yybegin(SCRIPTING);return new Symbol(sym.SCRIPT, yycolumn, yyline, yytext());
            }
            // fall through
          case 256: break;
          case 126:
            { return new Symbol(sym.FTF, yycolumn, yyline, yytext());
            }
            // fall through
          case 257: break;
          case 127:
            { yybegin(YYINITIAL);return new Symbol(sym.SCRIPT, yycolumn, yyline, yytext());
            }
            // fall through
          case 258: break;
          case 128:
            { return new Symbol(sym.FIMPAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 259: break;
          case 129:
            { return new Symbol(sym.FNUM, yycolumn, yyline, yytext());
            }
            // fall through
          case 260: break;
          case 130:
            { return new Symbol(sym.GET_ELEMENT, yycolumn, yyline, yytext());
            }
            // fall through
          case 261: break;
          case 131:
            { return new Symbol(sym.FCARACTER, yycolumn, yyline, yytext());
            }
            // fall through
          case 262: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
