// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/Analizador/Lexer.flex

package Analizador;

import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENT_LINE = 4;
  public static final int MULTI_COMENT = 6;
  public static final int TEXTO = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\1\15\1\16\1\10\1\17\1\20\1\21\1\22\1\23"+
    "\10\24\1\25\1\26\1\27\1\30\1\31\1\10\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\44\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\44\1\63\1\0\1\64\1\0\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\10\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\15\1\1\21\1\22\16\1\1\23\1\2"+
    "\1\24\3\25\1\26\2\25\1\27\26\30\2\31\1\32"+
    "\1\31\1\1\1\33\1\34\1\35\1\36\1\0\1\37"+
    "\1\40\1\41\1\42\11\0\1\43\22\0\1\44\11\0"+
    "\1\45\1\0\1\27\1\46\3\0\36\30\4\0\1\47"+
    "\10\0\1\50\17\0\1\51\16\0\1\52\6\0\1\53"+
    "\1\0\25\30\1\54\1\30\1\55\6\30\1\32\1\56"+
    "\4\0\1\57\3\0\1\60\12\0\1\61\1\62\1\63"+
    "\1\0\1\64\7\0\1\65\3\0\1\66\2\0\1\67"+
    "\4\0\1\70\1\0\1\71\1\0\1\72\2\0\1\73"+
    "\1\0\1\74\2\0\14\30\1\75\6\30\1\76\1\30"+
    "\5\0\1\77\2\0\1\100\21\0\1\101\2\0\1\102"+
    "\1\103\10\0\1\104\3\0\1\105\11\30\1\0\2\30"+
    "\3\0\1\106\1\0\1\107\1\110\1\0\1\111\3\0"+
    "\1\112\2\0\1\113\1\114\4\0\1\115\10\0\1\116"+
    "\4\0\1\27\1\0\2\30\1\0\1\30\1\0\1\117"+
    "\3\0\1\120\4\0\1\121\3\0\1\122\1\123\2\0"+
    "\1\124\1\125\3\0\1\126\1\127\1\0\1\74\1\0"+
    "\1\30\4\0\1\130\1\131\1\0\1\132\12\0\1\133"+
    "\11\0\1\134\2\0\1\135\2\0\1\133\2\0\1\136"+
    "\2\0\1\137\1\0\1\140\1\0\1\141\2\0\1\142"+
    "\1\105\1\0\1\143\2\0\1\144\2\0\1\145\3\0"+
    "\1\146\2\0\1\147\3\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u019f\0\u02eb\0\u019f\0\u019f\0\u019f\0\u019f\0\u019f"+
    "\0\u019f\0\u019f\0\u019f\0\u033e\0\u0391\0\u019f\0\u03e4\0\u0437"+
    "\0\u048a\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf"+
    "\0\u0722\0\u0775\0\u07c8\0\u019f\0\u019f\0\u081b\0\u086e\0\u08c1"+
    "\0\u0914\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\u0b59"+
    "\0\u0bac\0\u0bff\0\u0c52\0\u019f\0\u0ca5\0\u019f\0\u019f\0\u01f2"+
    "\0\u0245\0\u019f\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97"+
    "\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u10dc\0\u112f"+
    "\0\u1182\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7"+
    "\0\u141a\0\u146d\0\u14c0\0\u019f\0\u01f2\0\u01f2\0\u0245\0\u1513"+
    "\0\u019f\0\u019f\0\u019f\0\u019f\0\u1566\0\u019f\0\u019f\0\u019f"+
    "\0\u019f\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab"+
    "\0\u17fe\0\u1851\0\u019f\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0"+
    "\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88"+
    "\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27\0\u019f\0\u1e7a\0\u1ecd"+
    "\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u2112\0\u01f2"+
    "\0\u2165\0\u21b8\0\u019f\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357"+
    "\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef"+
    "\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887"+
    "\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f"+
    "\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7"+
    "\0\u019f\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc"+
    "\0\u304f\0\u019f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241"+
    "\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9"+
    "\0\u352c\0\u019f\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e"+
    "\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910\0\u3963\0\u39b6"+
    "\0\u019f\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u019f"+
    "\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40"+
    "\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8"+
    "\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u0e44\0\u431d"+
    "\0\u0e44\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f\0\u019f"+
    "\0\u019f\0\u4562\0\u45b5\0\u4608\0\u465b\0\u019f\0\u46ae\0\u4701"+
    "\0\u4754\0\u019f\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946"+
    "\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u019f\0\u019f\0\u019f\0\u4ae5"+
    "\0\u019f\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a"+
    "\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u019f\0\u4ec9\0\u4f1c\0\u019f"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u019f\0\u50bb\0\u019f\0\u510e"+
    "\0\u019f\0\u5161\0\u51b4\0\u019f\0\u5207\0\u525a\0\u52ad\0\u5300"+
    "\0\u5353\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598"+
    "\0\u55eb\0\u563e\0\u5691\0\u56e4\0\u0e44\0\u5737\0\u578a\0\u57dd"+
    "\0\u5830\0\u5883\0\u58d6\0\u0e44\0\u5929\0\u597c\0\u59cf\0\u5a22"+
    "\0\u5a75\0\u5ac8\0\u019f\0\u5b1b\0\u5b6e\0\u019f\0\u5bc1\0\u5c14"+
    "\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06\0\u5e59\0\u5eac"+
    "\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u019f"+
    "\0\u6144\0\u6197\0\u019f\0\u019f\0\u61ea\0\u623d\0\u6290\0\u62e3"+
    "\0\u6336\0\u6389\0\u63dc\0\u642f\0\u019f\0\u6482\0\u64d5\0\u6528"+
    "\0\u0e44\0\u657b\0\u65ce\0\u6621\0\u6674\0\u66c7\0\u671a\0\u676d"+
    "\0\u67c0\0\u6813\0\u6866\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05"+
    "\0\u019f\0\u6a58\0\u019f\0\u019f\0\u6aab\0\u019f\0\u6afe\0\u6b51"+
    "\0\u6ba4\0\u019f\0\u6bf7\0\u6c4a\0\u019f\0\u019f\0\u6c9d\0\u6cf0"+
    "\0\u6d43\0\u6d96\0\u019f\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35"+
    "\0\u6f88\0\u6fdb\0\u702e\0\u019f\0\u7081\0\u70d4\0\u7127\0\u717a"+
    "\0\u019f\0\u71cd\0\u7220\0\u7273\0\u72c6\0\u7319\0\u736c\0\u019f"+
    "\0\u73bf\0\u7412\0\u7465\0\u019f\0\u74b8\0\u750b\0\u755e\0\u75b1"+
    "\0\u019f\0\u7604\0\u7657\0\u76aa\0\u019f\0\u019f\0\u76fd\0\u7750"+
    "\0\u019f\0\u019f\0\u77a3\0\u77f6\0\u7849\0\u019f\0\u019f\0\u789c"+
    "\0\u019f\0\u78ef\0\u7942\0\u7995\0\u79e8\0\u7a3b\0\u7a8e\0\u019f"+
    "\0\u019f\0\u7ae1\0\u019f\0\u7b34\0\u7b87\0\u7bda\0\u7c2d\0\u7c80"+
    "\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18"+
    "\0\u7f6b\0\u7fbe\0\u8011\0\u8064\0\u80b7\0\u810a\0\u815d\0\u019f"+
    "\0\u81b0\0\u8203\0\u019f\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2"+
    "\0\u019f\0\u83f5\0\u8448\0\u019f\0\u849b\0\u019f\0\u84ee\0\u019f"+
    "\0\u8541\0\u8594\0\u019f\0\u019f\0\u85e7\0\u019f\0\u863a\0\u868d"+
    "\0\u019f\0\u86e0\0\u8733\0\u019f\0\u8786\0\u87d9\0\u882c\0\u019f"+
    "\0\u887f\0\u88d2\0\u019f\0\u8925\0\u8978\0\u89cb\0\u019f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\0\1\10\1\11\1\12\3\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\6\1\21\3\6"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\6"+
    "\1\31\1\32\1\33\2\6\1\34\1\35\2\6\1\36"+
    "\1\6\1\37\1\40\1\6\1\41\1\6\1\42\2\6"+
    "\1\43\2\6\1\44\1\45\1\6\1\46\1\47\1\50"+
    "\1\51\1\6\1\52\1\53\1\54\1\55\4\6\1\56"+
    "\1\57\2\6\1\60\1\61\1\62\2\6\1\63\3\6"+
    "\1\64\1\65\1\66\1\67\2\70\1\67\1\71\1\67"+
    "\1\72\1\73\7\67\1\74\3\67\2\75\6\67\1\76"+
    "\1\77\1\100\3\77\1\101\15\77\1\102\3\77\3\67"+
    "\1\103\1\104\1\105\2\77\1\106\1\107\1\110\1\77"+
    "\1\111\1\77\1\112\1\113\1\114\1\115\1\116\1\77"+
    "\1\117\1\120\1\121\2\77\1\122\1\77\1\123\1\77"+
    "\1\67\1\70\1\67\1\124\1\125\1\126\1\124\1\127"+
    "\114\124\1\125\2\124\2\125\1\124\1\127\12\124\1\130"+
    "\11\124\1\6\67\124\1\125\1\124\1\67\2\70\1\67"+
    "\1\71\22\67\1\131\71\67\1\70\1\67\124\0\2\7"+
    "\116\0\1\7\5\0\1\10\123\0\1\132\22\0\1\133"+
    "\104\0\1\134\115\0\1\135\13\0\1\136\6\0\1\137"+
    "\122\0\1\140\1\141\165\0\1\142\74\0\1\143\5\0"+
    "\1\144\101\0\1\145\31\0\1\146\74\0\1\147\131\0"+
    "\1\150\12\0\1\151\117\0\1\152\104\0\1\153\7\0"+
    "\1\154\111\0\1\155\141\0\1\156\114\0\1\157\111\0"+
    "\1\160\125\0\1\161\122\0\1\162\161\0\1\163\107\0"+
    "\1\164\15\0\1\165\113\0\1\166\3\0\1\167\2\0"+
    "\1\170\110\0\1\171\134\0\1\172\110\0\1\173\122\0"+
    "\1\174\14\0\1\175\104\0\1\176\11\0\1\177\105\0"+
    "\1\200\137\0\1\201\123\0\1\202\125\0\1\203\1\0"+
    "\1\204\103\0\1\205\23\0\1\206\102\0\1\207\25\0"+
    "\2\7\116\0\1\210\23\0\3\211\6\0\6\211\25\0"+
    "\6\211\52\0\2\212\107\0\1\213\6\0\1\214\1\0"+
    "\3\75\60\0\1\215\35\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\21\77\1\220\10\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\32\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\16\77"+
    "\1\221\13\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\4\77\1\222\25\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\4\77\1\223\25\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\20\77\1\224\11\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\13\77\1\225\16\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\4\77\1\226"+
    "\2\77\1\227\6\77\1\230\13\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\24\77\1\231\5\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\21\77\1\232\10\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\23\77\1\233\6\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\24\77\1\234"+
    "\5\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\4\77\1\235\3\77\1\236\21\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\1\237\31\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\1\240\23\77\1\241\5\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\13\77\1\242\16\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\24\77"+
    "\1\243\5\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\1\244\3\77\1\245\3\77\1\246\5\77"+
    "\1\247\13\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\1\250\7\77\1\251\21\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\4\77\1\252"+
    "\25\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\7\77\1\253\22\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\4\77\1\254\25\77\22\0"+
    "\1\255\122\0\1\256\204\0\1\257\60\0\1\260\120\0"+
    "\1\261\140\0\1\262\103\0\1\263\1\0\1\264\2\0"+
    "\1\265\1\266\1\267\2\0\1\270\2\0\1\271\1\272"+
    "\1\0\1\273\1\274\121\0\1\275\122\0\1\276\111\0"+
    "\1\277\127\0\1\300\115\0\1\301\10\0\1\302\123\0"+
    "\1\303\114\0\1\304\140\0\1\305\107\0\1\306\4\0"+
    "\1\307\102\0\1\310\126\0\1\311\170\0\1\312\101\0"+
    "\1\313\136\0\1\314\104\0\1\315\122\0\1\316\135\0"+
    "\1\317\111\0\1\320\135\0\1\321\130\0\1\322\107\0"+
    "\1\323\116\0\1\324\141\0\1\325\113\0\1\326\110\0"+
    "\1\327\146\0\1\330\76\0\1\331\141\0\1\332\130\0"+
    "\1\333\112\0\1\334\106\0\1\335\53\0\3\336\6\0"+
    "\6\336\25\0\6\336\47\0\1\214\1\0\3\212\120\0"+
    "\3\337\213\0\1\340\40\0\30\341\3\0\32\341\25\0"+
    "\3\217\6\0\30\217\2\0\33\217\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\10\77\1\342\21\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\24\77\1\343\5\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\15\77\1\344\14\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\21\77\1\345"+
    "\10\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\24\77\1\346\5\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\1\347\23\77\1\350\5\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\15\77\1\351\14\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\4\77\1\352\25\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\13\77\1\353"+
    "\16\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\2\77\1\354\27\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\1\355\3\77\1\356\25\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\23\77\1\357\6\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\22\77\1\360\7\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\5\77\1\361"+
    "\24\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\14\77\1\350\15\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\21\77\1\362\10\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\25\77"+
    "\1\355\4\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\14\77\1\363\15\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\10\77\1\364\21\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\21\77\1\365\10\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\3\77\1\366\26\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\3\77\1\367"+
    "\26\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\6\77\1\370\23\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\26\77\1\371\3\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\15\77"+
    "\1\372\14\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\13\77\1\373\16\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\1\374\26\77\1\375"+
    "\2\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\10\77\1\376\21\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\13\77\1\377\16\77\34\0"+
    "\1\u0100\110\0\1\u0101\207\0\1\u0102\71\0\1\u0103\102\0"+
    "\1\u0104\140\0\1\u0105\1\0\1\u0106\2\0\1\u0107\107\0"+
    "\1\u0108\114\0\1\u0109\110\0\1\u010a\13\0\1\u010b\132\0"+
    "\1\u010c\1\u010d\115\0\1\u010e\131\0\1\u010f\105\0\1\u0110"+
    "\1\0\1\u0111\12\0\1\u0112\107\0\1\u0113\3\0\1\u0114"+
    "\114\0\1\u0115\124\0\1\u0116\140\0\1\u0117\122\0\1\u0118"+
    "\122\0\1\u0119\104\0\1\u011a\126\0\1\u011b\6\0\1\u011c"+
    "\135\0\1\u011d\103\0\1\u011e\113\0\1\u011f\122\0\1\u0120"+
    "\133\0\1\u0121\120\0\1\u0122\154\0\1\u0123\123\0\1\u0124"+
    "\130\0\1\u0125\123\0\1\u0126\116\0\1\u0127\3\0\1\u0128"+
    "\110\0\1\u0129\135\0\1\u012a\50\0\1\u012b\157\0\1\u012c"+
    "\121\0\1\u012d\121\0\1\u012e\122\0\1\u012f\131\0\1\u0130"+
    "\131\0\1\u0131\110\0\1\u0132\135\0\1\u0133\103\0\1\u0134"+
    "\141\0\1\u0135\33\0\3\u0136\6\0\6\u0136\25\0\6\u0136"+
    "\51\0\3\u0137\116\0\1\u0138\12\0\30\341\3\0\32\341"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\1\u0139\31\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\21\77\1\u013a\10\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\4\77\1\u013b\25\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\3\77\1\u013c\26\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\1\367\31\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\2\77\1\u013d\27\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\4\77\1\367\25\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\23\77\1\u013e\6\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\2\77\1\u013f"+
    "\27\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\24\77\1\u0140\5\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\22\77\1\u0141\7\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\30\77"+
    "\1\367\1\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\4\77\1\u0142\25\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\17\77\1\u0143\12\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\23\77\1\u0144\6\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\23\77\1\u0145\6\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\16\77\1\u0146"+
    "\13\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\1\77\1\u0147\30\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\25\77\1\350\4\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\17\77"+
    "\1\u0148\12\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\10\77\1\u0149\21\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\7\77\1\361\22\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\22\77\1\u014a\7\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\25\77\1\u014b\4\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\13\77\1\367"+
    "\16\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\23\77\1\u014c\6\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\23\77\1\350\6\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\13\77"+
    "\1\u014d\16\77\72\0\1\u014e\110\0\1\u014f\102\0\1\u0150"+
    "\123\0\1\u0151\141\0\1\u0152\124\0\1\u0153\106\0\1\u0154"+
    "\112\0\1\u0155\130\0\1\u0156\133\0\1\u0157\120\0\1\u0158"+
    "\127\0\1\u0159\120\0\1\u015a\115\0\1\u015b\107\0\1\u015c"+
    "\150\0\1\u015d\116\0\1\u015e\110\0\1\u015f\132\0\1\u0160"+
    "\116\0\1\u0161\106\0\1\u0162\122\0\1\u0163\140\0\1\u0164"+
    "\104\0\1\u0165\142\0\1\u0166\127\0\1\u0167\101\0\1\u0168"+
    "\157\0\1\u0169\120\0\1\u016a\140\0\1\u016b\121\0\1\u016c"+
    "\115\0\1\u016d\37\0\1\u016e\204\0\1\u016f\116\0\1\u0170"+
    "\121\0\1\u0171\124\0\1\u0172\127\0\1\u0173\36\0\1\u0174"+
    "\200\0\1\u0175\47\0\3\u0176\6\0\6\u0176\25\0\6\u0176"+
    "\51\0\3\u0177\166\0\1\u0178\52\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\13\77\1\u0179\16\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\10\77"+
    "\1\u017a\21\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\25\77\1\u017b\4\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\1\u017c\31\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\12\77"+
    "\1\367\17\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\4\77\1\u017d\25\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\12\77\1\u017e\17\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\14\77\1\u017f\15\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\10\77\1\346\21\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\15\77\1\367"+
    "\14\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\22\77\1\u0180\7\77\23\0\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\10\77\1\u0181\21\77\23\0"+
    "\1\216\1\0\3\217\6\0\30\77\2\0\1\217\16\77"+
    "\1\u0142\13\77\23\0\1\216\1\0\3\217\6\0\30\77"+
    "\2\0\1\217\4\77\1\u0182\25\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\13\77\1\350\16\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\16\77\1\u014c\13\77\22\0\1\u0183\1\216\1\0\3\217"+
    "\6\0\30\77\2\0\1\217\32\77\23\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\4\77\1\u0184\25\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\16\77\1\u0185\13\77\71\0\1\u0186\121\0\1\u0187\112\0"+
    "\1\u0188\127\0\1\u0189\115\0\1\u018a\102\0\1\u018b\123\0"+
    "\1\u018c\142\0\1\u018d\111\0\1\u018e\120\0\1\u018f\122\0"+
    "\1\u0190\116\0\1\u0191\132\0\1\u0192\130\0\1\u0193\113\0"+
    "\1\u0194\122\0\1\u0195\131\0\1\u0196\117\0\1\u0197\123\0"+
    "\1\u0198\115\0\1\u0199\107\0\1\u019a\144\0\1\u019b\121\0"+
    "\1\u019c\110\0\1\u019d\167\0\1\u019e\101\0\1\u019f\122\0"+
    "\1\u01a0\127\0\1\u01a1\14\0\1\u01a2\104\0\1\u01a3\141\0"+
    "\1\u01a4\103\0\1\u01a5\120\0\1\u01a6\126\0\1\67\114\0"+
    "\1\u01a7\56\0\3\u01a8\6\0\6\u01a8\25\0\6\u01a8\51\0"+
    "\3\u01a9\202\0\1\u01aa\36\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\4\77\1\u01ab\25\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\1\u0179\31\77"+
    "\23\0\1\216\1\0\3\217\6\0\30\77\2\0\1\217"+
    "\15\77\1\u017b\14\77\23\0\1\216\1\0\3\217\6\0"+
    "\30\77\2\0\1\217\21\77\1\u0145\10\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\1\77\1\u01ac"+
    "\30\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\15\77\1\371\14\77\23\0\1\216\1\0\3\217"+
    "\1\u01ad\5\0\30\77\2\0\1\217\32\77\23\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\5\77\1\u01ae"+
    "\24\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\21\77\1\u014c\10\77\113\0\1\u01af\32\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\21\77\1\367"+
    "\10\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\26\77\1\367\3\77\104\0\1\u01b0\64\0\1\u01b1"+
    "\116\0\1\u01b2\134\0\1\u01b3\126\0\1\u01b4\116\0\1\u01b5"+
    "\123\0\1\u01b6\105\0\1\u01b7\120\0\1\u01b8\126\0\1\u01b9"+
    "\116\0\1\u01ba\154\0\1\u01bb\74\0\1\u01bc\121\0\1\u01bd"+
    "\123\0\1\u01be\126\0\1\u01bf\163\0\1\u01c0\121\0\1\u01c1"+
    "\120\0\1\u01c2\107\0\1\u01c3\132\0\1\u01c4\126\0\1\u01c5"+
    "\127\0\1\u01c6\113\0\1\u01c7\123\0\1\u01c8\43\0\3\u01c9"+
    "\6\0\6\u01c9\25\0\6\u01c9\131\0\1\u01ca\40\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\21\77\1\u0179"+
    "\10\77\23\0\1\216\1\0\3\217\6\0\30\77\2\0"+
    "\1\217\16\77\1\u01cb\13\77\24\0\1\u01cc\121\0\1\216"+
    "\1\0\3\217\6\0\30\77\2\0\1\217\30\77\1\u0145"+
    "\1\77\75\0\1\u01cd\100\0\1\u01ce\125\0\1\u01cf\117\0"+
    "\1\u01d0\122\0\1\u01d1\127\0\1\u01d2\122\0\1\u01d3\120\0"+
    "\1\u01d4\122\0\1\u01d5\117\0\1\u01d6\105\0\1\u01d7\135\0"+
    "\1\u01d8\166\0\1\u01d9\112\0\1\u01da\137\0\1\u01db\75\0"+
    "\1\u01dc\126\0\1\u01dd\45\0\1\u01de\121\0\1\216\1\0"+
    "\3\217\6\0\30\77\2\0\1\217\27\77\1\u014c\2\77"+
    "\24\0\1\u01df\210\0\1\u01e0\53\0\1\u01e1\147\0\1\u01e2"+
    "\100\0\1\u01e3\116\0\1\u01e4\150\0\1\u01e5\113\0\1\u01e6"+
    "\121\0\1\u01e7\104\0\1\u01e8\166\0\1\u01e9\115\0\1\u01ea"+
    "\116\0\1\u01eb\133\0\1\u01ec\113\0\1\u01ed\33\0\1\u01de"+
    "\1\0\13\u01de\1\0\2\u01ee\2\u01de\1\0\1\u01de\1\0"+
    "\66\u01de\36\0\30\u01ef\3\0\32\u01ef\101\0\1\u01f0\75\0"+
    "\1\u01f1\104\0\1\u01f2\137\0\1\u01f3\105\0\1\u01f4\137\0"+
    "\1\u01f5\121\0\1\u01f6\124\0\1\u01f7\142\0\1\u01f8\132\0"+
    "\1\u01f9\132\0\1\u01fa\114\0\1\u01fb\24\0\1\u01de\1\0"+
    "\13\u01de\3\u01ee\2\u01de\1\0\1\u01de\1\0\66\u01de\23\0"+
    "\1\216\12\0\30\u01ef\3\0\32\u01ef\76\0\1\u01fc\75\0"+
    "\1\u01fd\115\0\1\u01fe\137\0\1\u01ff\117\0\1\u0200\165\0"+
    "\1\u0201\40\0\1\u0202\125\0\1\u0203\132\0\1\u0204\116\0"+
    "\1\u0205\175\0\1\u0206\37\0\1\u0207\140\0\1\u0208\114\0"+
    "\1\u0209\134\0\1\u020a\136\0\1\u020b\102\0\1\u020c\124\0"+
    "\1\u020d\112\0\1\u020e\130\0\1\u020f\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35358];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\10\11\2\1\1\11"+
    "\15\1\2\11\16\1\1\11\1\1\2\11\2\1\1\11"+
    "\31\1\1\11\4\1\4\11\1\0\4\11\11\0\1\11"+
    "\22\0\1\11\11\0\1\1\1\0\1\1\1\11\3\0"+
    "\36\1\4\0\1\11\10\0\1\11\17\0\1\11\16\0"+
    "\1\11\6\0\1\11\1\0\36\1\2\11\4\0\1\11"+
    "\3\0\1\11\12\0\3\11\1\0\1\11\7\0\1\1"+
    "\3\0\1\11\2\0\1\11\4\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\1\2\0\25\1"+
    "\5\0\1\11\2\0\1\11\21\0\1\11\2\0\2\11"+
    "\10\0\1\11\3\0\12\1\1\0\2\1\3\0\1\11"+
    "\1\0\2\11\1\0\1\11\3\0\1\11\2\0\2\11"+
    "\4\0\1\11\10\0\1\11\4\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\1\11\3\0\1\11\4\0\1\11"+
    "\3\0\2\11\2\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\1\4\0\2\11\1\0\1\11\12\0\1\1"+
    "\11\0\1\11\2\0\1\11\2\0\1\1\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERRORLEX,yycolumn,yyline,yytext());
            }
            // fall through
          case 105: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 106: break;
          case 3:
            { /*ignore*/
            }
            // fall through
          case 107: break;
          case 4:
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 5:
            { yybegin(STRING); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 6:
            { return new Symbol(sym.PARENTESISA, yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 7:
            { return new Symbol(sym.PARENTESISC, yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 8:
            { return new Symbol(sym.POR, yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 9:
            { return new Symbol(sym.MAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 113: break;
          case 10:
            { return new Symbol(sym.MENOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 114: break;
          case 11:
            { return new Symbol(sym.ENTRE, yycolumn, yyline, yytext());
            }
            // fall through
          case 115: break;
          case 12:
            { return new Symbol(sym.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 116: break;
          case 13:
            { return new Symbol(sym.PUNTOC, yycolumn, yyline, yytext());
            }
            // fall through
          case 117: break;
          case 14:
            { yybegin(TEXTO); return new Symbol(sym.MENORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 118: break;
          case 15:
            { return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 119: break;
          case 16:
            { return new Symbol(sym.MAYORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 120: break;
          case 17:
            { return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 18:
            { return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 19:
            { return new Symbol(sym.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 123: break;
          case 20:
            { return new Symbol(sym.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 21:
            { return new Symbol(sym.STRING, yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 22:
            { yybegin(YYINITIAL); return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 126: break;
          case 23:
            { return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 127: break;
          case 24:
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 128: break;
          case 25:
            { 
            }
            // fall through
          case 129: break;
          case 26:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 130: break;
          case 27:
            { yybegin(YYINITIAL); return new Symbol(sym.MENORQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 131: break;
          case 28:
            { yybegin(COMENT_LINE);
            }
            // fall through
          case 132: break;
          case 29:
            { return new Symbol(sym.COMP_DIF, yycolumn, yyline, yytext());
            }
            // fall through
          case 133: break;
          case 30:
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
            // fall through
          case 134: break;
          case 31:
            { return new Symbol(sym.FINETIQUETA, yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 32:
            { return new Symbol(sym.COMP_MENOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 136: break;
          case 33:
            { return new Symbol(sym.COMP_IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 137: break;
          case 34:
            { return new Symbol(sym.COMP_MAYOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 138: break;
          case 35:
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
            // fall through
          case 139: break;
          case 36:
            { return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
            // fall through
          case 140: break;
          case 37:
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
            // fall through
          case 141: break;
          case 38:
            { return new Symbol(sym.PORC, yycolumn, yyline, yytext());
            }
            // fall through
          case 142: break;
          case 39:
            { return new Symbol(sym.ASC, yycolumn, yyline, yytext());
            }
            // fall through
          case 143: break;
          case 40:
            { return new Symbol(sym.P, yycolumn, yyline, yytext());
            }
            // fall through
          case 144: break;
          case 41:
            { return new Symbol(sym.ALT, yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 42:
            { return new Symbol(sym.SRC, yycolumn, yyline, yytext());
            }
            // fall through
          case 146: break;
          case 43:
            { return new Symbol(sym.PIXELS, yycolumn, yyline, yytext());
            }
            // fall through
          case 147: break;
          case 44:
            { return new Symbol(sym.COLORES, yycolumn, yyline, yytext());
            }
            // fall through
          case 148: break;
          case 45:
            { return new Symbol(sym.CLASE, yycolumn, yyline, yytext());
            }
            // fall through
          case 149: break;
          case 46:
            { yybegin(MULTI_COMENT);
            }
            // fall through
          case 150: break;
          case 47:
            { return new Symbol(sym.BR, yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 48:
            { return new Symbol(sym.H1, yycolumn, yyline, yytext());
            }
            // fall through
          case 152: break;
          case 49:
            { return new Symbol(sym.DESC, yycolumn, yyline, yytext());
            }
            // fall through
          case 153: break;
          case 50:
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 154: break;
          case 51:
            { return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
            // fall through
          case 155: break;
          case 52:
            { return new Symbol(sym.INIT, yycolumn, yyline, yytext());
            }
            // fall through
          case 156: break;
          case 53:
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
            // fall through
          case 157: break;
          case 54:
            { return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 158: break;
          case 55:
            { return new Symbol(sym.COLS, yycolumn, yyline, yytext());
            }
            // fall through
          case 159: break;
          case 56:
            { return new Symbol(sym.HREF, yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 57:
            { return new Symbol(sym.NAME, yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 58:
            { return new Symbol(sym.ROWS, yycolumn, yyline, yytext());
            }
            // fall through
          case 162: break;
          case 59:
            { return new Symbol(sym.TYPE, yycolumn, yyline, yytext());
            }
            // fall through
          case 163: break;
          case 60:
            { return new Symbol(sym.HEX, yycolumn, yyline, yytext());
            }
            // fall through
          case 164: break;
          case 61:
            { return new Symbol(sym.ALIGN, yycolumn, yyline, yytext());
            }
            // fall through
          case 165: break;
          case 62:
            { return new Symbol(sym.TIPOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 166: break;
          case 63:
            { return new Symbol(sym.DIV,yycolumn,yyline,yytext());
            }
            // fall through
          case 167: break;
          case 64:
            { return new Symbol(sym.IMG,yycolumn,yyline,yytext());
            }
            // fall through
          case 168: break;
          case 65:
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
            // fall through
          case 169: break;
          case 66:
            { return new Symbol(sym.CLASS, yycolumn, yyline, yytext());
            }
            // fall through
          case 170: break;
          case 67:
            { return new Symbol(sym.COLOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 171: break;
          case 68:
            { return new Symbol(sym.WIDTH, yycolumn, yyline, yytext());
            }
            // fall through
          case 172: break;
          case 69:
            { return new Symbol(sym.FUENTES, yycolumn, yyline, yytext());
            }
            // fall through
          case 173: break;
          case 70:
            { return new Symbol(sym.BODY, yycolumn, yyline, yytext());
            }
            // fall through
          case 174: break;
          case 71:
            { return new Symbol(sym.GCIC, yycolumn, yyline, yytext());
            }
            // fall through
          case 175: break;
          case 72:
            { return new Symbol(sym.HEAD, yycolumn, yyline, yytext());
            }
            // fall through
          case 176: break;
          case 73:
            { return new Symbol(sym.LINK, yycolumn, yyline, yytext());
            }
            // fall through
          case 177: break;
          case 74:
            { return new Symbol(sym.SPAM, yycolumn, yyline, yytext());
            }
            // fall through
          case 178: break;
          case 75:
            { return new Symbol(sym.HUNTIL, yycolumn, yyline, yytext());
            }
            // fall through
          case 179: break;
          case 76:
            { return new Symbol(sym.INSERT, yycolumn, yyline, yytext());
            }
            // fall through
          case 180: break;
          case 77:
            { return new Symbol(sym.REPEAT, yycolumn, yyline, yytext());
            }
            // fall through
          case 181: break;
          case 78:
            { return new Symbol(sym.HEIGHT, yycolumn, yyline, yytext());
            }
            // fall through
          case 182: break;
          case 79:
            { return new Symbol(sym.MODO, yycolumn, yyline, yytext());
            }
            // fall through
          case 183: break;
          case 80:
            { return new Symbol(sym.INPUT, yycolumn, yyline, yytext());
            }
            // fall through
          case 184: break;
          case 81:
            { return new Symbol(sym.TITLE, yycolumn, yyline, yytext());
            }
            // fall through
          case 185: break;
          case 82:
            { return new Symbol(sym.ONLOAD, yycolumn, yyline, yytext());
            }
            // fall through
          case 186: break;
          case 83:
            { return new Symbol(sym.REVERSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 187: break;
          case 84:
            { return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            }
            // fall through
          case 188: break;
          case 85:
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 189: break;
          case 86:
            { return new Symbol(sym.INT, yycolumn, yyline, yytext());
            }
            // fall through
          case 190: break;
          case 87:
            { return new Symbol(sym.ONC, yycolumn, yyline, yytext());
            }
            // fall through
          case 191: break;
          case 88:
            { return new Symbol(sym.BUTTON,yycolumn,yyline,yytext());
            }
            // fall through
          case 192: break;
          case 89:
            { return new Symbol(sym.OPTION,yycolumn,yyline,yytext());
            }
            // fall through
          case 193: break;
          case 90:
            { return new Symbol(sym.SELECT,yycolumn,yyline,yytext());
            }
            // fall through
          case 194: break;
          case 91:
            { return new Symbol(sym.URL, yycolumn, yyline, yytext());
            }
            // fall through
          case 195: break;
          case 92:
            { return new Symbol(sym.THENW, yycolumn, yyline, yytext());
            }
            // fall through
          case 196: break;
          case 93:
            { return new Symbol(sym.FTS, yycolumn, yyline, yytext());
            }
            // fall through
          case 197: break;
          case 94:
            { return new Symbol(sym.ALERT, yycolumn, yyline, yytext());
            }
            // fall through
          case 198: break;
          case 95:
            { return new Symbol(sym.TEXTAREA, yycolumn, yyline, yytext());
            }
            // fall through
          case 199: break;
          case 96:
            { return new Symbol(sym.FPAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 200: break;
          case 97:
            { return new Symbol(sym.BG, yycolumn, yyline, yytext());
            }
            // fall through
          case 201: break;
          case 98:
            { return new Symbol(sym.TXTA, yycolumn, yyline, yytext());
            }
            // fall through
          case 202: break;
          case 99:
            { return new Symbol(sym.SCRIPT, yycolumn, yyline, yytext());
            }
            // fall through
          case 203: break;
          case 100:
            { return new Symbol(sym.FTF, yycolumn, yyline, yytext());
            }
            // fall through
          case 204: break;
          case 101:
            { return new Symbol(sym.FIMPAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 205: break;
          case 102:
            { return new Symbol(sym.FNUM, yycolumn, yyline, yytext());
            }
            // fall through
          case 206: break;
          case 103:
            { return new Symbol(sym.GET_ELEMENT, yycolumn, yyline, yytext());
            }
            // fall through
          case 207: break;
          case 104:
            { return new Symbol(sym.FCARACTER, yycolumn, yyline, yytext());
            }
            // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
