package Analizador;

import java_cup.runtime.Symbol;
import Generador.html;
import com.hp.gagawa.java.Node;
import com.hp.gagawa.java.elements.Body;
import com.hp.gagawa.java.elements.Br;
import com.hp.gagawa.java.elements.Button;
import com.hp.gagawa.java.elements.Div;
import com.hp.gagawa.java.elements.H1;
import com.hp.gagawa.java.elements.Head;
import com.hp.gagawa.java.elements.Html;
import com.hp.gagawa.java.elements.Img;
import com.hp.gagawa.java.elements.Input;
import com.hp.gagawa.java.elements.Link;
import com.hp.gagawa.java.elements.P;
import com.hp.gagawa.java.elements.Span;
import com.hp.gagawa.java.elements.Textarea;
import com.hp.gagawa.java.elements.Title;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import Controladores.Tabla;
import POJOS.*;
import com.hp.gagawa.java.elements.Option;
import com.hp.gagawa.java.elements.Script;
import com.hp.gagawa.java.elements.Select;
import java_cup.runtime.XMLElement;

parser code
{:
    private Symbol sym;
    public Tabla tab = new Tabla();
    public Html retorno = new Html();
    public Body cuerpo = new Body();
    public html html = new html();
    public Script funciones = new Script("");
    public String escribir = "";
    public ArrayList<Errores> errores = new ArrayList<>();
    public ArrayList<Cambio> cambios = new ArrayList<>();
    public ArrayList<Variable> globales = new ArrayList<>();
    public ArrayList<Variable> todas = new ArrayList<>();
    public ArrayList<Variable> locales = new ArrayList<>();
    public String id_cap = "";
    public String nombre_cap = "";
    public String url_cap = "";
    public String titulo_cap = "";
    public int no_eje = -1;

    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }

    public Variable existe(String id){
        for (int i = 0; i < globales.size(); i++){
            if (globales.get(i).getId().equals(id)){
                return globales.get(i);
            }
        }
        for (int i = 0; i < locales.size(); i++){
            if (locales.get(i).getId().equals(id)){
                return locales.get(i);
            }
        }
        return null;
    }
    
    public void analizar_asignacion(String id, Variable var, int linea, int col){
        col ++;
        linea++;
        if (existe(id)!=null){
            Variable temporal = existe(id);
            if (temporal.getTipo()==var.getTipo()){
                Object antiguo = temporal.getValor();
                temporal.setValor(var.getValor());
                cambios.add(new Cambio(id,no_eje+1,antiguo,var.getValor()));
            } else {
                errores.add(new Errores("-","Semantico",col,linea,"La variable "+id+" es de tipo "+compatibilidad(temporal.getTipo())+" y se le intenta asignar un "+compatibilidad(var.getTipo()),"Verifica al asignar que los datos sean compatibles"));
            }
        } else {
            errores.add(new Errores("-","Semantico",col,linea,"No existe la variable que intentas crear","Crear primero la variable "+id));
        }
    }

    public void analizar_declaracion(String tipo2, String modo, ArrayList<String> ids, Variable var, int linea, int col){
        int tipo = Integer.parseInt(tipo2);
        col ++;
        linea++;
            if (var==null){
                for(int i = 0; i < ids.size(); i++){
                    if (existe(ids.get(i))!=null){
                        errores.add(new Errores("-","Semantico",col,linea,"Declaración de variable ya existente","Realiza el cambio del id de la variable"));
                    } else {
                        var.setId(ids.get(i));
                        var.setEjecucion(no_eje+1);
                        var.setTipo(tipo);
                        var.setValorNull(tipo);
                        if (modo.equalsIgnoreCase("-")){
                            var.setModo("-");
                            locales.add(var);
                        } else {
                            var.setModo("@global");
                            globales.add(var);
                        }
                    }
                }
            } else {
                for(int i = 0; i < ids.size(); i++){
                    if (existe(ids.get(i))!=null){
                        errores.add(new Errores("-","Semantico",col,linea,"Declaración de variable ya existente","Realiza el cambio del id de la variable"));
                    } else {
                        if (tipo==var.getTipo()){
                            var.setId(ids.get(i));
                            var.setEjecucion(no_eje+1);
                            if (modo.equalsIgnoreCase("-")){
                                var.setModo("-");
                                locales.add(var);
                            } else {
                                var.setModo("@global");
                                globales.add(var);
                            }
                        } else {
                            if (var.toString().contains("error")){
                                errores.add(new Errores("-","Semantico",col,linea,"La variable "+ids.get(i)+" es "+compatibilidad(tipo)+" y se le intento declarar un "+compatibilidad(var.getTipo()),"Verifica los valores ingresados"));
                            } else {
                                errores.add(new Errores("-","Semantico",col,linea,var.getValor().toString(),"Realiza el cambio del id de la variable"));
                            }
                        }
                    }
                }
            }
    }

    public String compatibilidad(int c){
        switch(c){
            case 0:
                return "integer";
            case 1:
                return "string";
            case 2:
                return "decimal";
            case 3:
                return "char";
            case 4:
                return "boolean";
            default:
                return "integer";
        }
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        String explicacion = "";
        String solucion = "";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
            explicacion = "Se esperaban alguno de los siguientes "+esperados;
            solucion = "Considera la posibilidad de reescribir la produccion que genera problema";
        } else {
            explicacion = "No es reconocido ese token en el ambito donde se encuentra";
            solucion = "Verifica que los tokens que ingreses sean permitidos en el ambito donde deseas";
        }
        errores.add(new Errores(cur_token.value.toString(),tip,cur_token.right-1,cur_token.left-1,explicacion,solucion));
    }

    protected int error_sync_size() {
        return 1;
    }

:};

terminal GCIC, HEAD, TITLE, LINK, BODY, SPAM, INPUT, TEXTAREA, SELECT, OPTION, DIV, IMG, BR, BUTTON, H1, P, HREF,
    BG, COLOR, FTS, FTF, TXTA, TYPE, ID, NAME, COLS, ROWS, CLASS, SRC, WIDTH, HEIGHT, ALT, ONC, PARENTESISA,
    PARENTESISC, LLAVEA, LLAVEC, CORCHETEA, CORCHETEC, MODO, FINETIQUETA, MAYORQ, MENORQ, COMP_IGUAL, COMP_DIF,
    COMP_MENOR, COMP_MAYOR, OR, AND, NOT, MAS, MENOS, POR, ENTRE, ASC, DESC, FPAR, FIMPAR, REVERSE, FCARACTER,
    FNUM, ALERT, EXIT, INT, BOOLEAN, STRING, DECIMAL, DECIMALD, CHAR, GET_ELEMENT, PUNTOC, INIT, DOSP, IF, ELSE, REPEAT,
    HUNTIL, WHILE, THENW, THEN, INSERT, HEX, NUMERO, PIXELS, PORC, COLORES, FUENTES, ALIGN, TIPOS, CLASE, PROCESS,
    URL, IGUAL, COMILLAS, SCRIPT, IDENTIFICADOR, ONLOAD, ERRORLEX, STRINGD, COMA,APOS, BOOLEAND, REDIRECT, UMINUS, END, OCHAR; 

non terminal inicio, bloque_global, parametros_gcic, head, body, bloque_opcionesP, 
    metodo, bloque_head, link, bloque_codigo, bloque_codigo2, instruccion2, lista_metodos, bloque_instrucciones, instruccion, declaracion,
    asignacion, llamada, if, repeat, while, insert, elseif, else, condicion, if2, repeat2, while2, asignacion2, declaracion2;

non terminal HashMap<String, Object> dato, expr, valor_boolean;
non terminal H1 h1;
non terminal Div div, script;
non terminal Textarea textarea;
non terminal Select select;
non terminal Input input;
non terminal Img img;
non terminal Br br;
non terminal Button button;
non terminal Span spam;
non terminal Option opcion;
non terminal P p;
non terminal Variable valor_asignar, asignar;
non terminal List<Node> bloque_etiquetas, bloque_opciones;
non terminal Node tipo_etiqueta, etiqueta;
non terminal ArrayList<String> lista_button, parametros_button, parametros_div, lista_div, parametros_img, lista_img,
    parametros_input, lista_tokens, lista_input, parametros_h1, lista_h1, bloque_ids, parametros_textarea, lista_textarea;
non terminal String colors, bg, class2, id, name, fts, ftf, txta, color, onc, type, src, numerico, width, height, 
    tipo_button, tipo_div, alt, string, tipo_string, title, parametros_body, tipo_img, tipo_input, tipo_h1, token, tipo_token, global,
    rows, cols, tipo_textarea, tipo_dato, tipo_url, entre;

precedence left MAS, MENOS;
precedence left POR, ENTRE;
precedence left UMINUS;
precedence left OR;
precedence left AND;
precedence left COMP_IGUAL, COMP_DIF, MENORQ, COMP_MENOR, COMP_MAYOR, MAYORQ;
precedence left NOT;

start with inicio;

inicio::=
    MENORQ GCIC CORCHETEA parametros_gcic MAYORQ MENORQ bloque_global FINETIQUETA GCIC MAYORQ
    | error
;

bloque_global ::=
    head MENORQ body
    | body MENORQ head
    | error
;

body::=
    BODY parametros_body:e2 MAYORQ bloque_etiquetas:e1 FINETIQUETA BODY MAYORQ {: Body temp = html.parametros_body(new Body(),e2); temp.appendChild(e1); imp(new String(temp.write().getBytes(), "UTF-8")); cuerpo = temp; :}
    | error
;

head::=
    HEAD MAYORQ MENORQ bloque_head FINETIQUETA HEAD MAYORQ
;


bloque_head::=
    link MENORQ title
    | title MENORQ link
    | error
;

bloque_etiquetas ::=
    bloque_etiquetas:e1 etiqueta:e2   {: e1.add(e2); RESULT = e1; :}
    | etiqueta:e1         {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}             
;

etiqueta::=
    MENORQ tipo_etiqueta:e1           {: RESULT = e1; :}
;

tipo_etiqueta::=
    h1:e1           {: RESULT = e1; :}
    | br:e1         {: RESULT = e1; :}
    | spam:e1       {: RESULT = e1; :}
    | script:e1     {: RESULT = e1; :}
    | input:e1      {: RESULT = e1; :}
    | textarea:e1   {: RESULT = e1; :}
    | select:e1     {: RESULT = e1; :}
    | div:e1        {: RESULT = e1; :}
    | img:e1        {: RESULT = e1; :}
    | button:e1     {: RESULT = e1; :}
    | p:e1          {: RESULT = e1; :}
    | error
;

link::=
    LINK CORCHETEA HREF IGUAL COMILLAS URL:e1 COMILLAS CORCHETEC MAYORQ FINETIQUETA LINK MAYORQ {: url_cap = e1.toString(); :}
;

title::=
    TITLE MAYORQ tipo_string:e1 FINETIQUETA TITLE MAYORQ {: RESULT = "title="+e1; titulo_cap = e1; :}
;

tipo_string::=
    IDENTIFICADOR:e1  {: RESULT = e1.toString(); :}
    | STRING:e1  {: RESULT = e1.toString(); :}
;

colors::=
    COLORES:e1  {: RESULT = e1.toString(); :}
    | HEX:e1    {: RESULT = e1.toString(); :}
;

parametros_body::=
    {: RESULT = "background-color: white;"; :}| CORCHETEA bg:e1 {: RESULT = e1; :}
;

parametros_button::=
    {: RESULT = new ArrayList<>(); :}| lista_button:e1 {: RESULT = e1; :}
;

lista_button::=
    lista_button:e1 CORCHETEA tipo_button:e2    {: e1.add(e2); RESULT = e1; :}
    | CORCHETEA tipo_button:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}
;

tipo_button::=
    fts:e1           {: RESULT = e1; :}
    | ftf:e1           {: RESULT = e1; :}
    | txta:e1           {: RESULT = e1; :}
    | id:e1           {: RESULT = e1; :}
    | color:e1           {: RESULT = e1; :}
    | bg:e1           {: RESULT = e1; :}
    | onc:e1           {: RESULT = e1; :}
    | error
;

onc::=
    ONC IGUAL COMILLAS PROCESS:e1 PARENTESISA PARENTESISC COMILLAS CORCHETEC {: RESULT = "onclick="+e1.toString();:}
;

parametros_div::=
    {: RESULT = new ArrayList<>(); :}| lista_div:e1 {: RESULT = e1; :}
;

lista_div::=
    lista_div:e1 CORCHETEA tipo_div:e2      {: e1.add(e2); RESULT = e1; :}
    | tipo_div:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}
;

tipo_div::=
    fts:e1          {: RESULT = e1;:}
    | ftf:e1        {: RESULT = e1;:}
    | txta:e1       {: RESULT = e1;:}
    | id:e1         {: RESULT = e1;:}
    | class2:e1      {: RESULT = e1;:}
    | color:e1      {: RESULT = e1;:}
    | bg:e1         {: RESULT = e1;:}
    | error
;

bg::=
    BG IGUAL COMILLAS colors:e1 COMILLAS CORCHETEC {: RESULT = "background-color: "+e1+";"; :}
;

class2::=
    CLASS IGUAL COMILLAS CLASE:e1 COMILLAS CORCHETEC {: RESULT = "class="+e1.toString(); :}
;

parametros_gcic::=
    name:e1 CORCHETEA id:e2         {: nombre_cap = e1.toString().substring(5, e1.toString().length()); id_cap = e2.toString().substring(3, e2.toString().length()); :}
    | id:e2 CORCHETEA name:e1       {: nombre_cap = e1.toString().substring(5, e1.toString().length()); id_cap = e2.toString().substring(3, e2.toString().length()); :}
;

parametros_img::=
    {: RESULT = new ArrayList<>(); :}| lista_img:e1 {: RESULT = e1; :}
;

lista_img::=
    lista_img:e1 CORCHETEA tipo_img:e2      {: e1.add(e2); RESULT = e1; :}
    | CORCHETEA tipo_img:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}
;

parametros_input::=
    {: RESULT = new ArrayList<>(); :}| lista_input:e1 {: RESULT = e1; :}
;

lista_input::=
    lista_input:e1 CORCHETEA tipo_input:e2      {: e1.add(e2); RESULT = e1; :}
    | CORCHETEA tipo_input:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}
;

tipo_input::=
    type:e1         {: RESULT = e1;:}
    | fts:e1        {: RESULT = e1;:}
    | ftf:e1        {: RESULT = e1;:}
    | txta:e1       {: RESULT = e1;:}
    | id:e1         {: RESULT = e1;:}
    | error
;

tipo_img::=
    src:e1              {: RESULT = e1;:}
    | width:e1          {: RESULT = e1;:}
    | height:e1         {: RESULT = e1;:}
    | alt:e1            {: RESULT = e1;:}
    | id:e1             {: RESULT = e1;:}
    | error
;

parametros_h1::=
    {: RESULT = new ArrayList<>(); :}| lista_h1:e1 {: RESULT = e1; :}
;

lista_h1::=
    lista_h1:e1 CORCHETEA tipo_h1:e2 {: e1.add(e2); RESULT = e1; :}
    | CORCHETEA tipo_h1:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1);  :}
; 

tipo_h1::=
    fts:e1              {: RESULT = e1;:}
    | ftf:e1              {: RESULT = e1;:}
    | txta:e1              {: RESULT = e1;:}
    | id:e1              {: RESULT = e1;:}
    | color:e1              {: RESULT = e1;:}
    | error
;

type::=
    TYPE IGUAL COMILLAS TIPOS:e1 COMILLAS CORCHETEC     {: RESULT = "type="+e1.toString();:}
;

src::=
    SRC IGUAL COMILLAS tipo_url:e1 COMILLAS CORCHETEC        {: RESULT = "src="+e1.toString();:}
;

tipo_url::=
    URL:e1 {: RESULT = e1.toString();:}
    | STRING:e1 {: RESULT = e1.toString();:}
;

numerico::=
    PIXELS:e1   {: RESULT = e1.toString();:}
    | PORC:e1    {: RESULT = e1.toString();:}
;

width::=
    WIDTH IGUAL COMILLAS numerico:e1 COMILLAS CORCHETEC    {: RESULT = "width="+e1;:}
;

height::=
    HEIGHT IGUAL COMILLAS numerico:e1 COMILLAS CORCHETEC    {: RESULT = "height="+e1;:}
;

alt::=
    ALT IGUAL COMILLAS string:e1 COMILLAS CORCHETEC         {: RESULT = "alt="+e1;:}          
;

name::=
    NAME IGUAL COMILLAS STRING:e1 COMILLAS CORCHETEC            {: RESULT = "name="+e1.toString();:}
;

id::=
    ID IGUAL COMILLAS IDENTIFICADOR:e1 COMILLAS CORCHETEC       {: RESULT = "id="+e1.toString();:}
;

fts::=
    FTS IGUAL COMILLAS PIXELS:e1 COMILLAS CORCHETEC             {: RESULT = "font-size:"+e1.toString()+";";:}
;

ftf::=
    FTF IGUAL COMILLAS FUENTES:e1 COMILLAS CORCHETEC            {: RESULT = "font-family:"+e1.toString()+";";:}
;

txta::=
    TXTA IGUAL COMILLAS ALIGN:e1 COMILLAS CORCHETEC             {: RESULT = "text-align:"+e1.toString()+";";:}
;

color::=
    COLOR IGUAL COMILLAS colors:e1 COMILLAS CORCHETEC           {: RESULT = "color:"+e1+";";:}
;

h1::=
    H1 parametros_h1:e1 MAYORQ string:e2 FINETIQUETA H1 MAYORQ {: H1 temp = html.parametros_h1(new H1(),e1,e2); RESULT = temp; :}
;

br::=
    BR MAYORQ FINETIQUETA BR MAYORQ  {: RESULT = new Br(); :}
;

img::=
    IMG parametros_img:e1 MAYORQ FINETIQUETA IMG MAYORQ {: RESULT = html.parametros_img(new Img("",""), e1); :}
;

div::=
    DIV parametros_div:e1 MAYORQ bloque_etiquetas:e2 FINETIQUETA DIV MAYORQ {: RESULT = html.parametros_div(new Div(), e1, e2); :} 
;

button::=
    BUTTON parametros_button:e1 MAYORQ string:e2 FINETIQUETA BUTTON MAYORQ {: RESULT = html.parametros_button(new Button(), e1, e2); :}
;

p::=
    P parametros_h1:e1 MAYORQ string:e2 FINETIQUETA P MAYORQ {: RESULT = html.parametros_p(new P(), e1, e2); :} 
;

spam::=
    SPAM parametros_h1:e1 MAYORQ string:e2 FINETIQUETA SPAM MAYORQ {: RESULT = html.parametros_spam(new Span(), e1, e2); :} 
;

script::=
    SCRIPT MAYORQ lista_metodos FINETIQUETA SCRIPT MAYORQ {: RESULT = new Div(); RESULT.appendText(escribir); escribir = ""; :} 
;

input::=
    INPUT parametros_input:e1 MAYORQ FINETIQUETA INPUT MAYORQ {: RESULT = html.parametros_input(new Input(), e1); :} 
;

textarea::=
    TEXTAREA parametros_textarea:e1 MAYORQ FINETIQUETA TEXTAREA MAYORQ {: RESULT = html.parametros_textarea(new Textarea("",""), e1); :} 
;

parametros_textarea::=
    {: RESULT = new ArrayList<>(); :} | lista_textarea:e1                  {: RESULT = e1;:}
;

lista_textarea::=
    lista_textarea:e1 CORCHETEA tipo_textarea:e2 {: e1.add(e2); RESULT = e1; :}
    | CORCHETEA tipo_textarea:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1); :}
;

tipo_textarea::=
    fts:e1              {: RESULT = e1;:}
    | ftf:e1              {: RESULT = e1;:}
    | txta:e1              {: RESULT = e1;:}
    | id:e1              {: RESULT = e1;:}
    | cols:e1              {: RESULT = e1;:}
    | rows:e1              {: RESULT = e1;:}
    | error
;

rows::=
    ROWS IGUAL COMILLAS NUMERO:e1 COMILLAS CORCHETEC   {: RESULT = "rows="+e1.toString(); :}
;

cols::=
    COLS IGUAL COMILLAS NUMERO:e1 COMILLAS CORCHETEC   {: RESULT = "cols="+e1.toString(); :}
;


select::=
    SELECT parametros_h1:e1 MAYORQ bloque_opciones:e2 FINETIQUETA SELECT MAYORQ   {: RESULT = html.parametros_select(new Select(),e1,e2); :}
;

bloque_opciones::=
    bloque_opciones:e1 opcion:e2    {: e1.add(e2); RESULT = e1; :}
    | opcion:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1); :}
;

opcion::=
    MENORQ OPTION MAYORQ string:e1 FINETIQUETA OPTION MAYORQ   {: Option temp = new Option(); temp.appendText(e1); RESULT = temp; :}
;

lista_metodos::=
    lista_metodos metodo
    | metodo
;

metodo::=
    ONLOAD PARENTESISA PARENTESISC CORCHETEA bloque_codigo CORCHETEC
    | PROCESS PARENTESISA PARENTESISC CORCHETEA bloque_codigo2 CORCHETEC
;


string::=
    STRING:e1         {: RESULT = e1.toString();:}
    | NUMERO:e1         {: RESULT = e1.toString();:}
;

bloque_codigo::=
    bloque_codigo instruccion
    | instruccion
;

bloque_codigo2::=
    bloque_codigo2 instruccion2
    | instruccion2
;

instruccion2::=
    llamada
    | declaracion
    | asignacion
    | repeat
    | while
;

instruccion::=
    declaracion
    | asignacion
    | if
    | repeat
    | while
    | insert
;

if::=
    IF PARENTESISA valor_boolean PARENTESISC THEN bloque_instrucciones else
;

else::=
    | ELSE bloque_instrucciones
;


repeat::=
    REPEAT PARENTESISA condicion PARENTESISC HUNTIL PARENTESISA expr PARENTESISC bloque_instrucciones
;

condicion::=
    IDENTIFICADOR IGUAL NUMERO
    | INT IDENTIFICADOR IGUAL NUMERO
;

while::=
    WHILE PARENTESISA valor_boolean PARENTESISC THENW bloque_instrucciones
;

bloque_instrucciones::=
    INIT LLAVEA DOSP bloque_codigo DOSP LLAVEC END
    | instruccion2
;

insert::=
    INSERT PARENTESISA lista_tokens:e1 PARENTESISC PUNTOC   {: :}
;

lista_tokens::=
    lista_tokens:e1 COMA token:e2   {: e1.add(e2); RESULT = e1; escribir += e2; :}
    | token:e1                      {: ArrayList<String> temp = new ArrayList<>(); temp.add(e1); RESULT = temp; escribir += e1; :}
;

token::=
    IDENTIFICADOR:e1 {: Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()<5){ RESULT = var.getValor().toString(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} :}
    | APOS tipo_token:e1 APOS   {:RESULT = e1.toString();:}
;

tipo_token::=
    STRING:e1         {: RESULT = e1.toString();:}
    | OCHAR:e1         {: RESULT = e1.toString();:}
    | IDENTIFICADOR:e1         {: RESULT = e1.toString();:}
    | MENORQ tipo_etiqueta:e1  {:RESULT = e1.write();:}
;

llamada::=
    ALERT PARENTESISA IDENTIFICADOR PARENTESISC
    | EXIT PARENTESISA PARENTESISC
;

declaracion::=
    tipo_dato:e1 global:e2 bloque_ids:e3 asignar:e4 PUNTOC:e5 {: analizar_declaracion(e1,e2,e3,e4,e5left,e5right); :}
;

asignacion::=
    IDENTIFICADOR:e1 IGUAL valor_asignar:e2 PUNTOC:e3 {: analizar_asignacion(e1.toString(),e2,e3left,e3right); :}
;

asignar::=
    {: RESULT = null; :} | IGUAL valor_asignar:e1 {: imp(e1.getValor().toString()); RESULT = e1; :}
;

valor_asignar::=
    valor_boolean:e1 {: Variable var = new Variable(); var.setTipo((int)e1.get("tipo")); var.setValor(e1.get("valor")); RESULT = var; :}
    | ASC PARENTESISA entre:e1 PARENTESISC {: RESULT = new Variable(); RESULT.asc(e1); :}
    | DESC PARENTESISA entre:e1 PARENTESISC {: RESULT = new Variable(); RESULT.desc(e1); :}
    | FPAR PARENTESISA entre:e1 PARENTESISC {: RESULT = new Variable(); RESULT.letpar_num(e1); :}
    | FIMPAR PARENTESISA entre:e1 PARENTESISC {: RESULT = new Variable(); RESULT.letimpar_num(e1); :}
    | REVERSE PARENTESISA entre:e1 PARENTESISC {: RESULT = new Variable(); RESULT.reverse(e1); :}
    | FCARACTER PARENTESISA PARENTESISC {: RESULT = new Variable(); RESULT.char_aleatorio(); :}
    | FNUM PARENTESISA PARENTESISC {: RESULT = new Variable(); RESULT.num_aleatorio(); :}
    | error
;

entre::=
    IDENTIFICADOR:e1 {: Variable var = existe(e1.toString()); if (var!=null) { if (var.getTipo()==1){ RESULT = (String) var.getValor(); } else { RESULT = "ERROR:No es un string"; }} else { RESULT = "ERROR:No se ha declarado la variable";} :}
    | COMILLAS STRING:e1 COMILLAS {: RESULT = e1.toString(); :}
;

tipo_dato::=
    INT:e1 {: RESULT = "0"; :}
    | STRINGD:e1 {: RESULT = "1"; :}
    | DECIMALD:e1 {: RESULT = "2"; :}
    | CHAR:e1 {: RESULT = "3"; :}
    | BOOLEAND:e1 {: RESULT = "4"; :}
;

valor_boolean::=
    valor_boolean:e1 OR valor_boolean:e2                {: RESULT = tab.resultado_or(e1,e2); :}
    | valor_boolean:e1 AND valor_boolean:e2             {: RESULT = tab.resultado_and(e1,e2); :}
    | NOT valor_boolean:e1                              {: RESULT = tab.resultado_not(e1); :}
    | valor_boolean:e1 COMP_IGUAL valor_boolean:e2      {: RESULT = tab.resultado_ii(e1,e2); :}
    | valor_boolean:e1 COMP_DIF valor_boolean:e2        {: RESULT = tab.resultado_dif(e1,e2); :}
    | valor_boolean:e1 COMP_MENOR valor_boolean:e2      {: RESULT = tab.resultado_mayor(e2,e1); :}
    | valor_boolean:e1 COMP_MAYOR valor_boolean:e2      {: RESULT = tab.resultado_menor(e2,e1); :}
    | valor_boolean:e1 MENORQ valor_boolean:e2          {: RESULT = tab.resultado_menor(e1,e2); :}
    | valor_boolean:e1 MAYORQ valor_boolean:e2          {: RESULT = tab.resultado_mayor(e1,e2); :}
    | expr:e1                                           {: RESULT = e1; :}
;

expr ::=
    expr:e1 MAS expr:e2                                 {: RESULT = tab.resultado_suma(e1,e2); :}
    | expr:e1 MENOS expr:e2                             {: RESULT = tab.resultado_resta(e1,e2); :}
    | expr:e1 POR expr:e2                               {: RESULT = tab.resultado_mult(e1,e2); :}
    | expr:e1 ENTRE expr:e2                             {: RESULT = tab.resultado_div(e1,e2); :}
    | MENOS expr:e1                                     {: RESULT = tab.resultado_cambio(e1); :}
    %prec UMINUS
    | dato:e1                                           {: RESULT = e1; :}
    | PARENTESISA expr:e1 PARENTESISC                   {: RESULT = e1; :}
;

dato::=
    COMILLAS STRING:e1 COMILLAS {: HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",1); temp.put("valor",e1.toString()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; :}
    | APOS OCHAR:e1 APOS {: HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",3); temp.put("valor",e1.toString().charAt(0)); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; :}
    | DECIMAL:e1 {: HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",2); temp.put("valor",Double.parseDouble(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; :}
    | NUMERO:e1 {: HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",0); temp.put("valor",Integer.parseInt(e1.toString())); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; :}
    | BOOLEAN:e1 {: HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",4); boolean agregar = e1.toString().equalsIgnoreCase("true");  temp.put("valor",agregar); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; :}
    | IDENTIFICADOR:e1 {: Variable var = existe(e1.toString()); if (var!=null) {HashMap<String, Object> temp = new HashMap<>(); temp.put("tipo",var.getTipo()); temp.put("valor",var.getValor()); temp.put("row",e1left); temp.put("col",e1right); RESULT = temp; } else { RESULT = new HashMap<>(); RESULT.put("tipo",5); RESULT.put("valor","no se ha declarado la variable en la posicion "+e1left+","+e1right); }:}
;

bloque_ids::=
    bloque_ids:e1 COMA IDENTIFICADOR:e2     {: e1.add(e2.toString()); RESULT = e1; :}
    | IDENTIFICADOR:e1 {: RESULT = new ArrayList<>(); RESULT.add(e1.toString()); :}
;

global::=
    {: RESULT = "-"; :}| MODO:e1 {: RESULT = e1.toString(); :}
;