
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import POJOS.Captcha;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDB.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\006\000\002\004" +
    "\002\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\003\005\000\002\006\004\000\002\007\016\000" +
    "\002\010\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\004\004\004\001\002\000\004\015\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\016\uffff\017\013\001\002\000\006\005\051\016" +
    "\ufffe\001\002\000\004\016\050\001\002\000\006\005\ufffc" +
    "\016\ufffc\001\002\000\004\006\016\001\002\000\004\012" +
    "\034\001\002\000\004\020\032\001\002\000\004\011\017" +
    "\001\002\000\004\022\020\001\002\000\004\021\021\001" +
    "\002\000\004\007\022\001\002\000\004\011\023\001\002" +
    "\000\004\022\024\001\002\000\004\021\025\001\002\000" +
    "\004\010\026\001\002\000\004\011\027\001\002\000\004" +
    "\022\030\001\002\000\004\021\031\001\002\000\004\012" +
    "\ufff9\001\002\000\006\005\ufffb\016\ufffb\001\002\000\004" +
    "\020\ufffa\001\002\000\004\011\035\001\002\000\004\022" +
    "\036\001\002\000\004\021\037\001\002\000\004\013\040" +
    "\001\002\000\004\011\041\001\002\000\004\022\042\001" +
    "\002\000\004\021\043\001\002\000\004\014\044\001\002" +
    "\000\004\011\045\001\002\000\004\022\046\001\002\000" +
    "\004\021\047\001\002\000\004\020\ufff8\001\002\000\004" +
    "\002\000\001\002\000\004\017\013\001\002\000\006\005" +
    "\ufffd\016\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\011\004\010" +
    "\005\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\014\007\013\001\001\000\004" +
    "\010\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\051\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    public ArrayList<Captcha> listado = new ArrayList<>();
    public Captcha temporal = new Captcha();

    public Symbol getS(){
        return this.sym;
    }

    public void agregar1(Object a, Object b, Object c){
        String id = a.toString();
        String nombre = b.toString();
        int veces = Integer.parseInt(c.toString());
        temporal.setId(id);
        temporal.setNombre(nombre);
        temporal.setVeces(veces);
    }

    public void agregar2(Object a, Object b, Object c){
        int aciertos = Integer.parseInt(a.toString());
        int fallos = Integer.parseInt(b.toString());
        String fecha = c.toString();
        temporal.setAciertos(aciertos);
        temporal.setFallos(fallos);
        temporal.setFecha(fecha);
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        ArrayList<String> esperados = new ArrayList<>();
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados.add(symbl_name_from_id(expected_token_ids().get(i)));
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
        }
        //errores.add(new Errores(esperados,cur_token,nom,tip));
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDB$actions {
  private final ParserDB parser;

  /** Constructor */
  CUP$ParserDB$actions(ParserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDB$do_action_part00000000(
    int                        CUP$ParserDB$act_num,
    java_cup.runtime.lr_parser CUP$ParserDB$parser,
    java.util.Stack            CUP$ParserDB$stack,
    int                        CUP$ParserDB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDB$result;

      /* select the action based on the action number */
      switch (CUP$ParserDB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = start_val;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDB$parser.done_parsing();
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= BASE LLAVEA posibilidad LLAVEC 
            {
              Object RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // posibilidad ::= 
            {
              Object RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("posibilidad",2, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // posibilidad ::= lista_datos 
            {
              Object RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("posibilidad",2, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_datos ::= lista_datos COMA datos 
            {
              Object RESULT =null;
		 listado.add(temporal); temporal = new Captcha(); 
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("lista_datos",3, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_datos ::= datos 
            {
              Object RESULT =null;
		 listado.add(temporal); temporal = new Captcha(); 
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("lista_datos",3, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // datos ::= CORCHETEA grupo CORCHETEC 
            {
              Object RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("datos",1, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // grupo ::= mitad faltante 
            {
              Object RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("grupo",4, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mitad ::= CAPTCHA IGUAL STRING PUNTOC NOMBRE IGUAL STRING PUNTOC VECES IGUAL STRING PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		 agregar1(e1,e2,e3); 
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("mitad",5, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-11)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // faltante ::= ACIERTOS IGUAL STRING PUNTOC FALLOS IGUAL STRING PUNTOC FECHA IGUAL STRING PUNTOC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		 agregar2(e1,e2,e3); 
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("faltante",6, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-11)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDB$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDB$do_action(
    int                        CUP$ParserDB$act_num,
    java_cup.runtime.lr_parser CUP$ParserDB$parser,
    java.util.Stack            CUP$ParserDB$stack,
    int                        CUP$ParserDB$top)
    throws java.lang.Exception
    {
              return CUP$ParserDB$do_action_part00000000(
                               CUP$ParserDB$act_num,
                               CUP$ParserDB$parser,
                               CUP$ParserDB$stack,
                               CUP$ParserDB$top);
    }
}

}
